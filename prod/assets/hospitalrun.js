"use strict";
/* jshint ignore:start */

/* jshint ignore:end */

define('hospitalrun/adapters/application', ['exports', 'ember', 'hospitalrun/mixins/pouchdb', 'hospitalrun/mixins/pouch-adapter-utils'], function (exports, Ember, PouchDb, PouchAdapterUtils) {

  'use strict';

  exports['default'] = DS.PouchDBAdapter.extend(PouchDb['default'], PouchAdapterUtils['default'], {
      _specialQueries: [
          'containsValue',
          'mapReduce',
          'options.startkey',
          'options.endkey',
          'searchIndex'
      ],
    
      _executeContainsSearch: function(store, type, query, options) {
           return new Ember['default'].RSVP.Promise(function(resolve, reject){
              var searchUrl = '/search/hrdb/'+type.typeKey+'/_search';
              if (query.containsValue && query.containsValue.value) {
                  var queryString = '';
                  query.containsValue.keys.forEach(function(key) {
                      if (!Ember['default'].isEmpty(queryString)) {
                          queryString += ' OR ';
                      }
                      queryString += key+':'+query.containsValue.value;
                  });
                  Ember['default'].$.ajax(searchUrl, {
                      dataType: 'json',
                      data: {
                          q:queryString
                      },
                      success: function (results) {
                          if (results && results.hits && results.hits.hits) {
                              var resultDocs = Ember['default'].A(results.hits.hits).map(function(hit) {
                                  return {
                                      doc: hit._source
                                  };
                              });
                              var response = {
                                  rows: resultDocs
                              };
                              this._handleQueryResponse(resolve, response, store, type, options);
                          } else if (results.rows) {
                              this._handleQueryResponse(resolve, results, store, type, options);
                          } else {
                              reject('Search results are not valid');
                          }
                      }.bind(this)
                  });
              } else {
                  reject('invalid query');
              }
          }.bind(this));
      },
      
      _handleQueryResponse: function(resolve, response, store, type, options) {
          if (response.rows) {
              var data = Ember['default'].A(response.rows).mapBy('doc');
              if(Ember['default'].isNone(options.embed)) {
                  options.embed = true;
              }
              this._resolveRelationships(store, type, data, options).then(function(data){
                  resolve(data);
              }.bind(this));
          }
      },
      
      /**
       * Look for nulls and maxvalues in start key because those keys can't be handled by the sort/list function
       */
      _doesStartKeyContainSpecialCharacters: function(startkey) {
          var haveSpecialCharacters = false,
              maxValue = this.get('maxValue');
          if (!Ember['default'].isEmpty(startkey) && Ember['default'].isArray(startkey)) {
              startkey.forEach(function(keyvalue) {
                  if (keyvalue === null || keyvalue === maxValue) {
                      haveSpecialCharacters = true;
                  }
              });
          }
          return haveSpecialCharacters;
      },
      
      findQuery: function(store, type, query, options) {
          var specialQuery = false;
          for (var i=0;i< this._specialQueries.length; i++) {
              if (Ember['default'].get(query,this._specialQueries[i])) {
                  specialQuery = true;
                  break;
              }
          }
          if (!specialQuery) {
              if (query.options) {
                  var newQuery = Ember['default'].copy(query);
                  delete newQuery.options;            
                  return this._super(store, type, newQuery, query.options);
              } else {
                  return this._super(store, type, query, options);
              }
          } else {
              var mapReduce = null,                
                  queryParams = {};
              if (query.searchIndex) {
                  queryParams = query.searchIndex;
              }
              if (query.options) {
                  queryParams = Ember['default'].copy(query.options);
                  if (query.sortKey || query.filterBy) {
                      if (query.sortDesc) {
                          queryParams.sortDesc = query.sortDesc;
                      }
                      if (query.sortKey) {
                          queryParams.sortKey = query.sortKey;
                      }
                      if (!this._doesStartKeyContainSpecialCharacters(queryParams.startkey)) {
                          queryParams.sortLimit = queryParams.limit;
                          delete queryParams.limit;
                          queryParams.sortStartKey = JSON.stringify(queryParams.startkey);
                          delete queryParams.startkey;
                      } else if (queryParams.startkey) {
                          queryParams.startkey = JSON.stringify(queryParams.startkey);
                      }
                      if (query.filterBy) {
                          queryParams.filterBy = JSON.stringify(query.filterBy);
                      }
                      if (queryParams.endkey) {
                          queryParams.endkey = JSON.stringify(queryParams.endkey);
                      }
                      query.useList = true;
                  }
              }
              queryParams.reduce  = false;
              queryParams.include_docs = true;
              
              if (query.mapReduce) {
                  mapReduce = query.mapReduce;
              } else if (query.containsValue) {
                  return this._executeContainsSearch(store, type, query, options);
              }
              return new Ember['default'].RSVP.Promise(function(resolve, reject){
                  this._getDb().then(function(db){
                      try {
                          if (mapReduce) {
                              if (query.useList) {
                                  var listParams = {
                                      query: queryParams
                                  };
                                  db.list(mapReduce+'/sort/'+mapReduce, listParams, function(err, response) {
                                      if (err) {
                                          this._pouchError(reject)(err);
                                      } else {
                                          this._handleQueryResponse(resolve, response.json, store, type, options);
                                      }
                                  }.bind(this));
                              } else {
                                  db.query(mapReduce, queryParams, function(err, response) {
                                      if (err) {
                                          this._pouchError(reject)(err);
                                      } else {
                                          this._handleQueryResponse(resolve, response, store, type, options);
                                      }
                                  }.bind(this));
                              }
                          } else {
                              db.allDocs(queryParams, function(err, response) {
                                  if (err) {
                                      this._pouchError(reject)(err);
                                  } else {
                                      this._handleQueryResponse(resolve, response, store, type, options);
                                  }
                              }.bind(this));
                          }
                      } catch (err){
                          this._pouchError(reject)(err);
                      }
                  }.bind(this), this._pouchError(reject));
              }.bind(this), "findQuery in application-pouchdb-adapter");
          }
      }
  });

});
define('hospitalrun/adapters/config', ['exports', 'ember', 'hospitalrun/mixins/pouch-adapter-utils'], function (exports, Ember, PouchAdapterUtils) {

    'use strict';

    exports['default'] = DS.PouchDBAdapter.extend(PouchAdapterUtils['default'], {
        databaseName: 'config',
        
        _mapQuery: function(doc, emit) {
            if (doc._id) {
                emit(doc._id, null);
            }
        },

        findQuery: function(store, type, query, options) {
            if (!query.exactKeys) {
                return this._super(store, type, query, options);
            } else {
                var self = this,
                queryParams = {
                    reduce: false,
                    include_docs: true
                };
                
                queryParams.keys = query.exactKeys.map(function(key) {
                    return self._idToPouchId(key, 'config');
                });
                return new Ember['default'].RSVP.Promise(function(resolve, reject){
                    self._getDb().then(function(db){
                        try {
                            db.query(self._mapQuery, queryParams, function(err, response) {
                                if (err) {
                                    self._pouchError(reject)(err);
                                } else {
                                    if (response.rows) {
                                        var data = Ember['default'].A(response.rows).mapBy('doc');
                                        Ember['default'].run(null, resolve, data);
                                    }
                                }
                            });
                        } catch (err){
                            self._pouchError(reject)(err);
                        }
                    }, self._pouchError(reject));
                }, "findQuery in config-pouchdb-adapter");
            }
        }
    });

});
define('hospitalrun/adapters/user', ['exports', 'ember', 'hospitalrun/mixins/user-session'], function (exports, Ember, UserSession) {

    'use strict';

    exports['default'] = DS.RESTAdapter.extend(UserSession['default'], {
        endpoint: '/db/_users/',
            
        defaultSerializer:  'couchdb',
        
        ajaxError: function(jqXHR) {
            var error = this._super(jqXHR);        
            if (jqXHR && jqXHR.status === 401) {
                var jsonErrors = Ember['default'].$.parseJSON(jqXHR.responseText);
                window.Hospitalrun.__container__.lookup('controller:application').transitionToRoute('login');
                return new DS.InvalidError(jsonErrors);
            } else {
                return error;
            }
        },
        
        /**
        @method ajaxOptions Overriden here so that we can specify xhr with credentials
        @private
        @param {String} url
        @param {String} type The request type GET, POST, PUT, DELETE etc.
        @param {Object} hash
        @return {Object} hash
        */
        ajaxOptions: function(url, type, hash) {
            hash = hash || {};
            hash.xhrFields = { withCredentials: true };
            return this._super(url, type, hash);
        },

        /**
         Called by the store when a newly created record is
         saved via the `save` method on a model record instance.

         The `createRecord` method serializes the record and makes an Ajax (HTTP POST) request
         to a URL computed by `buildURL`.

         See `serialize` for information on how to customize the serialized form
         of a record.

         @method createRecord
         @param {DS.Store} store
         @param {subclass of DS.Model} type
         @param {DS.Model} record
         @returns {Promise} promise
        */
        createRecord: function(store, type, record) {
            return this.updateRecord(store, type, record);
        },
        
        /**
        Called by the store when a record is deleted.

        The `deleteRecord` method  makes an Ajax (HTTP DELETE) request to a URL computed by `buildURL`.

        @method deleteRecord
        @param {DS.Store} store
        @param {subclass of DS.Model} type
        @param {DS.Model} record
        @returns {Promise} promise
        */
        deleteRecord: function(store, type, record) {
            var ajaxData = {
                data: record.getProperties('id', 'rev')
            };
            ajaxData.data.name = this.getUserName(true);
            return this.ajax('/deleteuser', 'POST', ajaxData);
        },
        
        /**
        Called by the store in order to fetch the JSON for a given
        type and ID.

        The `find` method makes an Ajax request to a URL computed by `buildURL`, and returns a
        promise for the resulting payload.

        This method performs an HTTP `GET` request with the id provided as part of the query string.

        @method find
        @param {DS.Store} store
        @param {subclass of DS.Model} type
        @param {String} id
        @returns {Promise} promise
        */
        find: function(store, type, id) {
            var ajaxData = {
                data: {
                    id: id,
                    name: this.getUserName(true)
                }
            };
            return this.ajax('/getuser', 'POST', ajaxData);
        },    

        /**
         Called by the store when an existing record is saved
         via the `save` method on a model record instance.

         The `updateRecord` method serializes the record and makes an Ajax (HTTP PUT) request
         to a URL computed by `buildURL`.

         See `serialize` for information on how to customize the serialized form
         of a record.

         @method updateRecord
         @param {DS.Store} store
         @param {subclass of DS.Model} type
         @param {DS.Model} record
         @returns {Promise} promise
        */
        updateRecord: function(store, type, record) {
            var data = {};
            var serializer = store.serializerFor(type.typeKey);
            serializer.serializeIntoHash(data, type, record, { includeId: true });
            data = data.user;
            data.type = 'user';
            var idToUpdate = data.id,
                revToUpdate = data.rev;
            delete data.id;
            delete data.rev;
            data = this._cleanPasswordAttrs(data);
            var ajaxData = {
                data: {
                    data: data,
                    updateParams: {
                        doc_name: idToUpdate
                    },
                    name: this.getUserName(true)
                }
            };
            if (!Ember['default'].isEmpty(revToUpdate)) {
                ajaxData.data.updateParams.rev = revToUpdate;
            }
            return this.ajax('/updateuser', 'POST', ajaxData); 
        },

        /**
        Called by the store in order to fetch a JSON array for all
        of the records for a given type.

        The `findAll` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a
        promise for the resulting payload.

        @private
        @method findAll
        @param {DS.Store} store //currently unused
        @param {subclass of DS.Model} type //currently unused
        @param {String} sinceToken //currently unused
        @returns {Promise} promise
        */
        findAll: function() {
            var ajaxData = {
                data: {
                    name: this.getUserName(true)
                }
            };
            var allURL = '/allusers';
            return this.ajax(allURL, 'POST', ajaxData);
        },
        
        /**
         Remove null/empty password fields from payload sent to server
         */
        _cleanPasswordAttrs: function(data) {
            var attrsToCheck = [
                'derived_key',
                'password',
                'password_scheme',
                'password_sha',
                'salt',
                'iterations'
            ];
            attrsToCheck.forEach(function(attr) {
                if (Ember['default'].isEmpty(data[attr])) {
                    delete data[attr];
                }
            });
            return data;
        },    

        _getItemUrl: function(record) {
            var urlArray = [this.endpoint];
            urlArray.push(Ember['default'].get(record, 'id'));
            var rev = Ember['default'].get(record, 'rev');
            if (rev) {
                urlArray.push('?rev=');
                urlArray.push(rev);
            }
            return urlArray.join('');
        }
        
    });

});
define('hospitalrun/admin/address/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller'], function (exports, AbstractEditController) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend({
        hideCancelButton: true,
        updateCapability: 'update_config', 
        
        afterUpdate: function() {
            this.displayAlert('Options Saved','The address options have been saved');
        }
    });

});
define('hospitalrun/admin/address/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember'], function (exports, AbstractEditRoute, Ember) {

    'use strict';

    exports['default'] = AbstractEditRoute['default'].extend({
        hideNewButton: true,
        newTitle: 'Address Options',
        editTitle: 'Address Options',
        model: function() {
            return new Ember['default'].RSVP.Promise(function(resolve) {            
                this.get('store').find('option', 'address_options').then(function(address_options) {
                    resolve(address_options);
                }, function() {
                    var newConfig = this.get('store').push('option', {
                        id: 'address_options',
                        value: {
                            address1Label: 'Address',
                            address1Include: true
                        }
                    });
                    resolve(newConfig);
                }.bind(this));
            }.bind(this));
        }
    });

});
define('hospitalrun/admin/address/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Address 1 Label"),
      'property': ("value.address1Label")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("Include address 1"),
      'property': ("value.address1Include")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Address 2 Label"),
      'property': ("value.address2Label")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("Include address 2"),
      'property': ("value.address2Include")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Address 3 Label"),
      'property': ("value.address3Label")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("Include address 3"),
      'property': ("value.address3Include")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Address 4 Label"),
      'property': ("value.address4Label")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("Include address 4"),
      'property': ("value.address4Include")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n        ");
    return buffer;
    }

    data.buffer.push("<div class=\"panel panel-primary\">\n    <div class=\"panel-body\">        \n        ");
    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </div>\n</div>");
    return buffer;
    
  });

});
define('hospitalrun/admin/address/view', ['exports', 'hospitalrun/views/panel'], function (exports, PanelView) {

	'use strict';

	exports['default'] = PanelView['default'].extend();

});
define('hospitalrun/admin/lookup/controller', ['exports', 'ember', 'hospitalrun/mixins/billing-categories', 'hospitalrun/mixins/lab-pricing-types', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/imaging-pricing-types', 'hospitalrun/mixins/inventory-type-list', 'hospitalrun/mixins/visit-types'], function (exports, Ember, BillingCategories, LabPricingTypes, ModalHelper, ImagingPricingTypes, InventoryTypeList, VisitTypes) {

    'use strict';

    exports['default'] = Ember['default'].ArrayController.extend(BillingCategories['default'], LabPricingTypes['default'], 
            ModalHelper['default'], ImagingPricingTypes['default'], InventoryTypeList['default'], VisitTypes['default'], {
        needs: 'filesystem',
        fileSystem: Ember['default'].computed.alias('controllers.filesystem'),
        lookupType: null,
        lookupTypes: [{
            name: 'Anesthesia Types',
            value: 'anesthesia_types',        
            model: {        
                procedure: 'anesthesiaType'
            }
        }, {
            name: 'Anesthesiologists',
            value: 'anesthesiologists',
            model: {
                procedure: 'anesthesiologist'
            }
        }, {
            defaultValues: 'defaultBillingCategories',
            name: 'Billing Categories',
            value: 'billing_categories',
            models: {
                'billing-line-item': 'category'
            }
        }, {
            name: 'Clinic Locations',
            value: 'clinic_list',
            models: { //Models that use this lookup -- use this later to update models on lookup changes
                patient: 'clinic'
            }
        }, {
            name: 'Countries',
            value: 'country_list',
            models: {
                patient: 'country'
            }
        }, {
            name: 'Diagnoses',
            value: 'diagnosis_list',
            models: {
                visit: 'primaryDiagnosis'
            }
        }, {
            name: 'CPT Codes',
            value: 'cpt_code_list',
            models: {
                procedure: 'cptCode'
            }
        }, {
            name: 'Expense Accounts',
            value: 'expense_account_list',
            models: {
                'inv-request':  'expenseAccount',
                pricing: 'expenseAccount',
            }
        }, {
            name: 'Inventory Aisle Locations',
            value: 'aisle_location_list',
            models: {
                inventory: 'aisleLocation',
                'inv-location': 'aisleLocation',
                'inv-purchase': 'aisleLocation',
                'inv-request':  [
                    'deliveryAisle',
                    'locationsAffected' //Special use case that we need to handle
                ]
            }
        }, {
            name: 'Inventory Locations',
            value: 'warehouse_list',
            models: {
                inventory:  'location',
                'inv-location': 'location',
                'inv-purchase': 'location',
                'inv-request':  [
                    'deliveryLocation',
                     'locationsAffected' //Special use case that we need to handle
                ]
            }
        }, {
            defaultValues: 'defaultInventoryTypes',
            name: 'Inventory Types',
            value: 'inventory_types',
            models: {
                inventory:  'type'
            }
        }, {
            defaultValues: 'defaultImagingPricingTypes',
            name: 'Imaging Pricing Types',
            value: 'imaging_pricing_types',
            models: {
                pricing:  'type'
            }
        }, {
            defaultValues: 'defaultLabPricingTypes',
            name: 'Lab Pricing Types',
            value: 'lab_pricing_types',
            models: {
                pricing:  'type'
            }
        }, {
            name: 'Patient Status List',
            value: 'patient_status_list', 
            models: {
                patient: 'status'
            }
        }, {
            name: 'Physicians',
            value: 'physician_list', 
            models: {
                appointment: 'provider',
                visit: 'examiner',
                procedure: [
                    'assistant',
                    'physician'
                ]
            }
        }, {
            name: 'Procedures',
            value: 'procedure_list',
            models: {
                procedure: 'description'
            }
        }, {
            name: 'Procedure Locations',
            value: 'procedure_locations',
            models: {
                procedure: 'location'         
            }
        }, {
            name: 'Procedure Pricing Types',
            value: 'procedure_pricing_types',
            models: {
                pricing:  'type'
            }
        }, {
            name: 'Radiologists',
            value: 'radiologists',
            model: {
                imaging: 'radiologist'
            }
        }, {
            name: 'Vendor',
            value: 'vendor_list',
            models: {
                'inv-purchase': 'vendor'      
            }
        }, {
            name: 'Visit Locations',
            value: 'visit_location_list',
            models: {
                appointment: 'location',
                visit: 'location',            
            }
        }, {
            defaultValues: 'defaultVisitTypes',
            name: 'Visit Types',
            value: 'visit_types',
            models: {
                visit: 'visitType',            
            }
        }, {
            name: 'Ward Pricing Types',
            value: 'ward_pricing_types',
            models: {
                pricing:  'type'
            }
        }],
        
        importFile: Ember['default'].computed.alias('lookupTypeList.importFile'),
        
        lookupTitle: function() {
            var lookupType = this.get('lookupType'),
                lookupTypes = this.get('lookupTypes'),
                lookupDesc;
            if (!Ember['default'].isEmpty(lookupType)) {
                lookupDesc = lookupTypes.findBy('value', lookupType);
                if (!Ember['default'].isEmpty(lookupDesc)) {
                    return lookupDesc.name;
                }
            }            
        }.property('lookupType'),
            
        lookupTypeList: function() {
            var lookupType = this.get('lookupType'),
                lookupItem;        
            if (!Ember['default'].isEmpty(lookupType)) {
                lookupItem = this.get('model').findBy('id', lookupType);
                if (Ember['default'].isEmpty(lookupItem)) {
                    var defaultValues = [],
                        lookupTypes = this.get('lookupTypes'),
                        lookupDesc = lookupTypes.findBy('value', lookupType);
                    if (!Ember['default'].isEmpty(lookupDesc) && !Ember['default'].isEmpty(lookupDesc.defaultValues)) {
                        defaultValues = this.get(lookupDesc.defaultValues);
                    }
                    lookupItem = this.get('store').push('lookup', {
                        id: lookupType,
                        value: defaultValues
                    });          
                }
                if (!Ember['default'].isEmpty(lookupItem) && Ember['default'].isEmpty(lookupItem.get('userCanAdd'))) {
                    lookupItem.set('userCanAdd', true);                
                } 
                return lookupItem;
            }
        }.property('lookupType'),
        
        lookupTypeValues: function() {
            var values = this.get('lookupTypeList.value');
            if (!Ember['default'].isEmpty(values)) {
                values.sort(this._sortValues);
            }
            return Ember['default'].ArrayProxy.create({content: Ember['default'].A(values)});
        }.property('lookupType', 'lookupTypeList.value'),
        
        organizeByType: Ember['default'].computed.alias('lookupTypeList.organizeByType'),
        
        showOrganizeByType: function() {
            var lookupType = this.get('lookupType');
            return (!Ember['default'].isEmpty(lookupType) && lookupType.indexOf('pricing_types') > 0);
        }.property('lookupType'),
            
        userCanAdd: Ember['default'].computed.alias('lookupTypeList.userCanAdd'),
        
        _canDeleteValue: function(value) {
            var lookupType = this.get('lookupType');
            switch (lookupType) {
                case 'inventory_types': {
                    if (value === 'Medication') {
                        this.displayAlert('Cannot Delete Medication', 'The Medication inventory type cannot be deleted because it is needed for the Medication module.');
                        return false;
                    }
                    break;
                }
                case 'lab_pricing_types': {
                    if (value === 'Lab Procedure') {
                        this.displayAlert('Cannot Delete Lab Pricing Type', 'The Lab Procedure pricing type cannot be deleted because it is needed for the Labs module.');
                        return false;
                    }
                    break;
                }
                case 'imaging_pricing_types': {
                    if (value === 'Imaging Procedure') {
                        this.displayAlert('Cannot Delete Imaging Pricing Type', 'The Imaging Procedure pricing type cannot be deleted because it is needed for the Imaging module.');
                        return false;
                    }
                    break;
                }
                case 'visit_types': {
                    if (value === 'Admission') {
                        this.displayAlert('Cannot Delete Admmission Visit Type', 'The Admission Visit type cannot be deleted because it is needed for the Visits module.');
                        return false;                    
                    } else if (value === 'Imaging') {
                        this.displayAlert('Cannot Delete Imaging Visit Type', 'The Imaging Visit type cannot be deleted because it is needed for the Imaging module.');
                        return false;
                    } else if (value === 'Lab') {
                        this.displayAlert('Cannot Delete Lab Visit Type', 'The Lab Visit type cannot be deleted because it is needed for the Lab module.');
                        return false;
                    } else if (value === 'Pharmacy') {
                        this.displayAlert('Cannot Delete Pharmacy Visit Type', 'The Lab Visit type cannot be deleted because it is needed for the Medication module.');
                        return false;
                    }
                }
            }
            return true;        
        },
        
        _sortValues: function(a, b) {
            return Ember['default'].compare(a.toLowerCase(), b.toLowerCase());
        },
        
        actions: {
            addValue: function() {
                this.send('openModal', 'admin.lookup.edit', Ember['default'].Object.create({
                    isNew: true
                }));
            },
            deleteValue: function(value) {
                var lookupTypeList = this.get('lookupTypeList'),
                    lookupTypeValues = lookupTypeList.get('value');
                if (this._canDeleteValue(value)) {
                    lookupTypeValues.removeObject(value.toString());        
                    lookupTypeList.save();
                }
            },
            editValue: function(value) {
                if (!Ember['default'].isEmpty(value)) {
                    this.send('openModal', 'admin.lookup.edit', Ember['default'].Object.create({
                        isNew: false,
                        originalValue: value.toString(),
                        value: value.toString()
                    }));
                }
            },
            importList: function() {
                var fileSystem = this.get('fileSystem'),
                    fileToImport = this.get('importFile'),
                    lookupTypeList = this.get('lookupTypeList');
                if (!fileToImport || !fileToImport.type) {
                    this.displayAlert('Select File To Import', 'Please select file to import.');
                } else {
                    fileSystem.fileToDataURL(fileToImport).then(function(fileDataUrl) {
                        var dataUrlParts = fileDataUrl.split(',');
                        lookupTypeList.setProperties({
                            _attachments: {
                                file: {
                                    content_type: fileToImport.type,
                                    data: dataUrlParts[1]
                                }
                            },
                            importFile: true
                        }); 
                        lookupTypeList.save().then(function() {
                            this.displayAlert('List Imported', 'The lookup list has been imported.','refreshLookupLists');
                            this.set('importFile');
                            this.set('importFileName');
                        }.bind(this));
                    }.bind(this));
                }
            },
            updateList: function() {
                var lookupTypeList = this.get('lookupTypeList');
                lookupTypeList.save().then(function() {
                    this.displayAlert('List Saved', 'The lookup list has been saved');
                }.bind(this));
            },        
            updateValue: function(valueObject) {
                 var updateList = false,
                     lookupTypeList = this.get('lookupTypeList'),
                     lookupTypeValues = this.get('lookupTypeValues'),
                     values = lookupTypeList.get('value'),
                     value = valueObject.get('value');
                if (valueObject.get('isNew')) {
                    updateList = true;
                } else {
                    var originalValue = valueObject.get('originalValue');
                    if (value !== originalValue) {
                        lookupTypeValues.removeObject(originalValue);
                        updateList = true;
                        //TODO UPDATE ALL EXISTING DATA LOOKUPS (NODEJS JOB)
                    }
                }
                if (updateList) {
                    values.addObject(value);
                    values = values.sort(this._sortValues);
                    lookupTypeList.set('value', values);                
                    lookupTypeList.save().then(function(list) {
                        //Make sure that the list on screen gets updated with the sorted items.
                        var values = Ember['default'].copy(list.get('value'));
                        lookupTypeValues.clear();
                        lookupTypeValues.addObjects(values);
                    });
                    
                }
            }
        }
    });

});
define('hospitalrun/admin/lookup/edit/controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled'], function (exports, Ember, IsUpdateDisabled) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend(IsUpdateDisabled['default'], {
        
        needs: 'admin/lookup',
        
        editController: Ember['default'].computed.alias('controllers.admin/lookup'),
        showUpdateButton: true,
        
        title: function() {
            var isNew = this.get('isNew');
            if (isNew) {
                return 'Add Value';
            } else {
                return 'Edit Value';
            }
        }.property('isNew'),
        
        updateButtonAction: 'update',

        updateButtonText: function() {
            var isNew = this.get('isNew');
            if (isNew) {
                return 'Add';
            } else {
                return 'Update';
            }
        }.property('isNew'),

        actions: {
            cancel: function() {
                this.send('closeModal');
            },
            
            update: function() {
                if (!Ember['default'].isEmpty(this.get('value'))) {
                    this.get('editController').send('updateValue', this.get('model'));
                    this.send('closeModal');
                }
            }
        }
    });

});
define('hospitalrun/admin/lookup/edit/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n     ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Value"),
      'property': ("value")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false),
      'action': ("update")
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN",'action': "STRING"},hashContexts:{'model': depth0,'submit_button': depth0,'action': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/admin/lookup/edit/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/admin/lookup/route', ['exports', 'hospitalrun/routes/abstract-index-route'], function (exports, AbstractIndexRoute) {

    'use strict';

    exports['default'] = AbstractIndexRoute['default'].extend({
        hideNewButton: true,
        pageTitle: 'Lookup Lists',
        model: function() {
            return this.store.find('lookup');
        },
            
        actions: {
            refreshLookupLists: function() {
                this.refresh();            
            }
        }
    });

});
define('hospitalrun/admin/lookup/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n            <div class=\"row\">\n                ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-xs-3"),
      'label': ("Lookup Type"),
      'property': ("lookupType"),
      'content': ("lookupTypes"),
      'optionValuePath': ("content.value"),
      'optionLabelPath': ("content.name"),
      'selected': ("lookupType")
    },hashTypes:{'class': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'selected': "ID"},hashContexts:{'class': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'selected': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n            </div>        \n        ");
    return buffer;
    }

  function program3(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                <tr>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>                    \n                    <td>\n                        <button class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editValue", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                        <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "deleteValue", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span>Delete</button>\n                    </td>\n                </tr>\n            ");
    return buffer;
    }

  function program5(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n            <div class=\"row\">\n                <div class=\"col-sm-4\">\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("User Can Add New Values"),
      'property': ("userCanAdd")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    <button class=\"btn btn-default\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "updateList", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">Update</button> \n                </div>\n                ");
    stack1 = helpers['if'].call(depth0, "showOrganizeByType", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                <div class=\"col-sm-4\">\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['file-upload'] || (depth0 && depth0['file-upload']),options={hash:{
      'label': ("Import File"),
      'property': ("importFileName"),
      'selectedFile': ("importFile")
    },hashTypes:{'label': "STRING",'property': "STRING",'selectedFile': "ID"},hashContexts:{'label': depth0,'property': depth0,'selectedFile': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "file-upload", options))));
    data.buffer.push("\n                    <button class=\"btn btn-default\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "importList", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">Import</button>\n                </div>\n            </div>\n        ");
    return buffer;
    }
  function program6(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("Organize Pricing By Type"),
      'property': ("organizeByType"),
      'class': ("col-sm-4")
    },hashTypes:{'label': "STRING",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                ");
    return buffer;
    }

    data.buffer.push("<div class=\"panel panel-primary\">\n    <div class=\"panel-body\">\n        ");
    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </div>\n</div>\n<div class=\"panel panel-primary\">\n    <div class=\"panel-heading\">\n        <h3 class=\"panel-title\">");
    stack1 = helpers._triageMustache.call(depth0, "lookupTitle", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</h3>\n    </div>    \n    <div class=\"panel-body\">\n        <table class=\"table\">\n            <tr class=\"table-header\">\n                <th>Value</th>\n                <th>Actions</th>\n            </tr>\n            ");
    stack1 = helpers.each.call(depth0, "lookupTypeValues", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        </table>\n    </div>\n    <div class=\"panel-footer\">\n        <button class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "addValue", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">Add Value</button>\n        ");
    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(5, program5, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </div>\n</div>");
    return buffer;
    
  });

});
define('hospitalrun/admin/query/controller', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        hideCancelButton: true,
        showUpdateButton: true,
        updateButtonAction: 'query',
        updateButtonText: 'Query',
        
        objectTypes: [
            'appointment',
            'imaging',
            'inv-location',
            'inv-purchase',
            'inv-request',
            'inventory',
            'invoice',
            'lab',
            'medication',
            'patient',
            'photo',
            'procedure',
            'visit',
            'vital'
        ],
        
        actions: {
            query: function() {
                var fieldName = this.get('fieldName'),
                    objectType = this.get('objectType'),
                    queryValue = this.get('queryValue');
                var query = {
                    containsValue: {
                        value: queryValue,
                        keys: [fieldName]
                    }
                };
                this.store.find(objectType, query).then(function(results) {
                    if (Ember['default'].isEmpty(results)) {
                        this.set('errorMessage', 'Query returned no results.');
                        this.set('haveError', true);
                        this.set('showQueryResults', false);
                    } else {
                        var currentValue,
                            attributes = ['id'],
                            resultRow,
                            resultRows = [];
                        results.get('firstObject').eachAttribute(function(name) {
                            attributes.push(name);
                        });
                        
                        results.forEach(function(result) {
                            resultRow = [];
                            /*resultRow.push({
                                name: 'id',
                                value: result.get('id')
                            });*/
                            attributes.forEach(function(attribute) {
                                currentValue = result.get(attribute);
                                if (!Ember['default'].isEmpty(currentValue)) {                                
                                    resultRow.push({
                                        name: attribute,
                                        value: currentValue
                                    });
                                }
                            });
                            resultRows.push(resultRow);
                        });                    
                        this.set('resultRows', resultRows);
                        this.set('haveError', false);
                        this.set('showQueryResults', true);
                    }
                }.bind(this), function(error) {
                    this.set('errorMessage', error);
                    this.set('haveError', true);
                    this.set('showQueryResults', false);
                }.bind(this));
            }
        }
    });

});
define('hospitalrun/admin/query/route', ['exports', 'ember', 'hospitalrun/mixins/user-session'], function (exports, Ember, UserSession) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend(UserSession['default'], Ember['default'].SimpleAuth.AuthenticatedRouteMixin, {    
        beforeModel: function() {
            if (!this.currentUserCan('query_db')) {
                this.transitionTo('application');
            }
        }
    });

});
define('hospitalrun/admin/query/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n            <div class=\"row\">\n                ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-xs-3"),
      'label': ("Object Type"),
      'property': ("objectType"),
      'content': ("objectTypes"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content"),
      'selected': ("objectType")
    },hashTypes:{'class': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'selected': "ID"},hashContexts:{'class': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'selected': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n            </div>\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Field Name"),
      'property': ("fieldName")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Query Value"),
      'property': ("queryValue")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n        ");
    return buffer;
    }

  function program3(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <div class=\"alert alert-danger\" role=\"alert\">");
    stack1 = helpers._triageMustache.call(depth0, "errorMessage", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</div>\n");
    return buffer;
    }

  function program5(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <div class=\"panel panel-primary\">\n        <div class=\"panel-heading\">\n            <h3 class=\"panel-title\">Query Results</h3>\n        </div>\n        <div class=\"panel-body\">\n            ");
    stack1 = helpers.each.call(depth0, "resultRows", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        </div>\n    </div>\n");
    return buffer;
    }
  function program6(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                <table class=\"table\">\n                    <tr class=\"table-header\">\n                        <th>Field</th>\n                        <th>Value</th>\n                    </tr>\n                    ");
    stack1 = helpers.each.call(depth0, "", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </table>\n            ");
    return buffer;
    }
  function program7(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                        <tr>\n                            <th>");
    stack1 = helpers._triageMustache.call(depth0, "name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</th>\n                            <td>");
    stack1 = helpers._triageMustache.call(depth0, "value", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                        </tr>\n                    ");
    return buffer;
    }

    data.buffer.push("<div class=\"panel panel-primary\">\n    <div class=\"panel-body\">        \n        ");
    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </div>\n</div>\n");
    stack1 = helpers['if'].call(depth0, "haveError", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    stack1 = helpers['if'].call(depth0, "showQueryResults", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    return buffer;
    
  });

});
define('hospitalrun/admin/query/view', ['exports', 'hospitalrun/views/panel'], function (exports, PanelView) {

	'use strict';

	exports['default'] = PanelView['default'].extend();

});
define('hospitalrun/admin/route', ['exports', 'hospitalrun/routes/abstract-module-route'], function (exports, AbstractModuleRoute) {

    'use strict';

    exports['default'] = AbstractModuleRoute['default'].extend({
        addCapability: 'add_user',
        allowSearch: false,
        moduleName: 'admin',
        sectionTitle: 'Admin',
        subActions: [{
            text: 'Address Options',
            linkTo: 'admin.address'        
        },{
            text: 'Lookup Lists',
            linkTo: 'admin.lookup'
        },{
            text: 'Users',
            linkTo: 'users.index'
        }],
        
        editPath: function() {
            return 'users.edit';
        }.property(),
        
        deletePath: function() {
            return 'users.delete';    
        }.property()
    });

});
define('hospitalrun/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'hospitalrun/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {

  'use strict';

  Ember['default'].MODEL_FACTORY_INJECTIONS = true;

  var App = Ember['default'].Application.extend({
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix,
    Resolver: Resolver['default']
  });

  loadInitializers['default'](App, config['default'].modulePrefix);

  /*window.onerror = function(errorMsg, url, lineNumber, colno, error) {
      var errorMessage = "Error Occurred: "+errorMsg;
      if (url) {
          errorMessage += "; url:"+url;
      }
      if (lineNumber) {
          errorMessage += "; line:"+lineNumber;
      }
      if (colno) {
          errorMessage += "; colno:"+colno;
      }
      if (error && error.stack) {
          errorMessage += "; stack:"+error.stack;
      }
      console.log("UNCAUGHT ERROR IN APPLICATION: "+errorMessage);
  };*/

  exports['default'] = App;

});
define('hospitalrun/appointments/calendar/controller', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].ArrayController.extend({
        needs: 'appointment-calendar'
    });

});
define('hospitalrun/appointments/calendar/route', ['exports', 'hospitalrun/routes/abstract-index-route'], function (exports, AbstractIndexRoute) {

    'use strict';

    exports['default'] = AbstractIndexRoute['default'].extend({
        modelName: 'appointment',
        pageTitle: 'Appointment Listing'
    });

});
define('hospitalrun/appointments/calendar/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var escapeExpression=this.escapeExpression;


    data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Calendar.CalendarView", {hash:{
      'controllerBinding': ("controllers.appointment-calendar")
    },hashTypes:{'controllerBinding': "STRING"},hashContexts:{'controllerBinding': depth0},contexts:[depth0],types:["ID"],data:data})));
    
  });

});
define('hospitalrun/appointments/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, AbstractDeleteController) {

    'use strict';

    exports['default'] = AbstractDeleteController['default'].extend({
        title: 'Delete Appointment',
        
        afterDeleteAction: function() {
            var deleteFromPatient = this.get('deleteFromPatient');
            if (deleteFromPatient) {
                return 'appointmentDeleted';
            } else {
                return 'closeModal';
            }
        }.property('deleteFromPatient')
    });

});
define('hospitalrun/appointments/delete/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    


    data.buffer.push("<div class=\"alert alert-danger\">\n    <span class=\"glyphicon glyphicon-warning-sign\"></span> \n    Are you sure you wish to delete this appointment?\n</div>");
    
  });

});
define('hospitalrun/appointments/delete/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/appointments/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/appointment-statuses', 'ember', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/mixins/visit-types'], function (exports, AbstractEditController, AppointmentStatuses, Ember, PatientSubmodule, VisitTypes) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend(AppointmentStatuses['default'], PatientSubmodule['default'], VisitTypes['default'], {
        needs: ['appointments','pouchdb'],
        
        dateFormat: 'l h:mm A',
        findPatientVisits: false,
        
        hourList: function(){
            var hour, 
                hourList = [];
            for (hour=0; hour < 24; hour++) {
                var hourText = (hour%12) + (hour<12 ? ' AM' : ' PM');
                if (hourText === '0 AM') {
                    hourText = 'Midnight';
                } else if (hourText === '0 PM') {
                    hourText = 'Noon';
                }
                hourList.push({
                    name: hourText,
                    value: hour
                });
            }
            return hourList;
        }.property(),
        
        locationList: Ember['default'].computed.alias('controllers.appointments.locationList'),

        lookupListsToUpdate: [{
            name: 'physicianList',
            property: 'provider',
            id: 'physician_list'
        }, {
            name: 'locationList',
            property: 'location',
            id: 'visit_location_list'
        }],
        
        minuteList: function(){
            var minute, 
                minuteList = [];
            for (minute=0; minute < 60; minute++) {
                minuteList.push(String('00' + minute).slice(-2));
            }
            return minuteList;
        }.property(),
        
        physicianList: Ember['default'].computed.alias('controllers.appointments.physicianList'),
        showTime: true,
        visitTypesList: Ember['default'].computed.alias('controllers.appointments.visitTypeList'),
        
        cancelAction: function() {
            var returnTo = this.get('returnTo');
            if (Ember['default'].isEmpty(returnTo)) {
                return this._super();
            } else {
                return 'returnTo';
            }
        }.property('returnTo'),
        
        dateChanged: function() {
            Ember['default'].run.once(this, function(){
                this.get('model').validate();
            });
        }.observes('startDate','endDate'),
        
        isAdmissionAppointment: function() {
            var appointmentType = this.get('appointmentType'),
                isAdmissionAppointment = (appointmentType === 'Admission');
            if (!isAdmissionAppointment) {
                this.set('allDay', true);
            }        
            return isAdmissionAppointment;
        }.property('appointmentType'),
        
        updateCapability: 'add_appointment',

        afterUpdate: function() {
            this.send(this.get('cancelAction'));
        },

        allDayChanged: function() {
            var allDay = this.get('allDay'),
                isAdmissionAppointment = this.get('isAdmissionAppointment');
            if (allDay) {
                var endDate = this.get('endDate'),
                    startDate = this.get('startDate');
                this.set('startDate', moment(startDate).startOf('day').toDate());
                this.set('endDate', moment(endDate).endOf('day').toDate());
                this.set('dateFormat', 'l');
                this.set('showTime', false);
            } else {
                this.set('dateFormat', 'l h:mm A');
                this.set('showTime', true);
                if (isAdmissionAppointment) {
                    this._updateAllTimes();
                }
            }
        }.observes('allDay'),
        
        beforeUpdate: function() {
            this._updateAppointmentDates();
            return Ember['default'].RSVP.Promise.resolve();
        },  
        
        endHourChanged: function() {
            this._updateDate('endHour', 'endDate');
        }.observes('endHour'),
        
        endMinuteChanged: function() {
            this._updateDate('endMinute', 'endDate');
        }.observes('endMinute'),
        
        endTimeHasError: function() {
            var endDateError = this.get('errors.endDate');
            return (endDateError.length > 0);
        }.property('errors.endDate'),
            
        startHourChanged: function() {
            this._updateDate('startHour', 'startDate');
        }.observes('startHour'),
        
        startMinuteChanged: function() {
            this._updateDate('startMinute', 'startDate');
        }.observes('startMinute'),    
        
        _updateAllTimes: function() {
            this.endHourChanged();
            this.endMinuteChanged();
            this.startMinuteChanged();
            this.startHourChanged();
        },
        
        _updateAppointmentDates: function() {
            var allDay = this.get('allDay'),            
                isAdmissionAppointment = this.get('isAdmissionAppointment'), 
                appointmentDate = this.get('appointmentDate');
            if (!isAdmissionAppointment) {
                this.set('endDate', appointmentDate);
                this.set('startDate', appointmentDate);
                if (!allDay) {
                    this._updateAllTimes();
                }
            }
        },
        
        _updateDate: function(fieldName, dateFieldName) {
            var fieldValue = this.get(fieldName),
                dateToChange = this.get(dateFieldName);
            if (!Ember['default'].isEmpty(dateToChange)) {
                dateToChange = moment(dateToChange);
                if (fieldName.indexOf('Hour') > -1) {
                    dateToChange.hour(fieldValue);                
                } else {
                    dateToChange.minute(fieldValue);
                }
                this.set(dateFieldName, dateToChange.toDate());
                this.dateChanged();
            }
        }
    });

});
define('hospitalrun/appointments/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'hospitalrun/mixins/patient-list-route'], function (exports, AbstractEditRoute, Ember, PatientListRoute) {

    'use strict';

    exports['default'] = AbstractEditRoute['default'].extend(PatientListRoute['default'], {
        editTitle: 'Edit Appointment',
        modelName: 'appointment',
        newTitle: 'New Appointment',
        
        getNewData: function() {
            return Ember['default'].RSVP.resolve({
                selectPatient: true
            });
        }
    });

});
define('hospitalrun/appointments/edit/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    ");
    stack1 = helpers['if'].call(depth0, "selectPatient", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    <div class=\"row\">\n        ");
    stack1 = helpers['if'].call(depth0, "isAdmissionAppointment", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("All Day"),
      'property': ("allDay"),
      'class': ("col-sm-2")
    },hashTypes:{'label': "STRING",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n    </div>\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-sm-6 required"),
      'label': ("Type"),
      'property': ("appointmentType"),
      'content': ("visitTypes"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content")
    },hashTypes:{'class': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING"},hashContexts:{'class': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'class': ("col-sm-6"),
      'property': ("provider"),
      'label': ("With"),
      'list': ("physicianList"),
      'selection': ("provider")
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'class': depth0,'property': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n    </div>\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'class': ("col-sm-6 required"),
      'property': ("location"),
      'label': ("Location"),
      'list': ("locationList"),
      'selection': ("location")
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'class': depth0,'property': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-sm-3"),
      'property': ("status"),
      'label': ("Status"),
      'content': ("appointmentStatuses"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content")
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING"},hashContexts:{'class': depth0,'property': depth0,'label': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n    </div>\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-text'] || (depth0 && depth0['em-text']),options={hash:{
      'label': ("Notes"),
      'property': ("notes"),
      'rows': (3)
    },hashTypes:{'label': "STRING",'property': "STRING",'rows': "INTEGER"},hashContexts:{'label': depth0,'property': depth0,'rows': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-text", options))));
    data.buffer.push("    \n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['patient-typeahead'] || (depth0 && depth0['patient-typeahead']),options={hash:{
      'property': ("patientTypeAhead"),
      'label': ("Patient"),
      'content': ("patientList"),
      'selection': ("selectedPatient"),
      'class': ("required")
    },hashTypes:{'property': "STRING",'label': "STRING",'content': "ID",'selection': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'content': depth0,'selection': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "patient-typeahead", options))));
    data.buffer.push("\n    ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['patient-summary'] || (depth0 && depth0['patient-summary']),options={hash:{
      'patient': ("patient"),
      'returnTo': ("appointments.edit"),
      'returnToContext': ("id"),
      'disablePatientLink': ("isNew")
    },hashTypes:{'patient': "ID",'returnTo': "STRING",'returnToContext': "ID",'disablePatientLink': "ID"},hashContexts:{'patient': depth0,'returnTo': depth0,'returnToContext': depth0,'disablePatientLink': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "patient-summary", options))));
    data.buffer.push("\n    ");
    return buffer;
    }

  function program6(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("    \n            ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("startDate"),
      'label': ("Start Date"),
      'showTime': ("showTime"),
      'format': ("dateFormat"),
      'class': ("col-sm-4 required")
    },hashTypes:{'property': "STRING",'label': "STRING",'showTime': "ID",'format': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'showTime': depth0,'format': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("endDate"),
      'label': ("End Date"),
      'showTime': ("showTime"),
      'format': ("dateFormat"),
      'class': ("col-sm-4 required")
    },hashTypes:{'property': "STRING",'label': "STRING",'showTime': "ID",'format': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'showTime': depth0,'format': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n        ");
    return buffer;
    }

  function program8(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("appointmentDate"),
      'label': ("Date"),
      'class': ("col-sm-4 required")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n            ");
    stack1 = helpers.unless.call(depth0, "allDay", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    return buffer;
    }
  function program9(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                <div class=\"form-group col-sm-3 required\">            \n                    <label class=\"control-label\" for=\"startTime\">Start Time</label>\n                    <div class=\"input-group\">\n                        ");
    data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
      'viewName': ("select"),
      'content': ("hourList"),
      'optionLabelPath': ("content.name"),
      'optionValuePath': ("content.value"),
      'value': ("startHour"),
      'id': ("startTime"),
      'class': ("form-control")
    },hashTypes:{'viewName': "STRING",'content': "ID",'optionLabelPath': "STRING",'optionValuePath': "STRING",'value': "ID",'id': "STRING",'class': "STRING"},hashContexts:{'viewName': depth0,'content': depth0,'optionLabelPath': depth0,'optionValuePath': depth0,'value': depth0,'id': depth0,'class': depth0},contexts:[depth0],types:["ID"],data:data})));
    data.buffer.push("\n                        <div class=\"input-group-addon\">:</div>\n                        ");
    data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
      'viewName': ("select"),
      'content': ("minuteList"),
      'optionLabelPath': ("content"),
      'optionValuePath': ("content"),
      'value': ("startMinute"),
      'class': ("form-control")
    },hashTypes:{'viewName': "STRING",'content': "ID",'optionLabelPath': "STRING",'optionValuePath': "STRING",'value': "ID",'class': "STRING"},hashContexts:{'viewName': depth0,'content': depth0,'optionLabelPath': depth0,'optionValuePath': depth0,'value': depth0,'class': depth0},contexts:[depth0],types:["ID"],data:data})));
    data.buffer.push("\n                    </div>\n                </div>\n                <div ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'class': (":form-group :col-sm-3 :required :has-feedback endTimeHasError:has-error")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(">            \n                    <label class=\"control-label\" for=\"endTime\">End Time</label>\n                    <div class=\"input-group\">\n                        ");
    data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
      'viewName': ("select"),
      'content': ("hourList"),
      'optionLabelPath': ("content.name"),
      'optionValuePath': ("content.value"),
      'value': ("endHour"),
      'id': ("endTime"),
      'class': ("form-control")
    },hashTypes:{'viewName': "STRING",'content': "ID",'optionLabelPath': "STRING",'optionValuePath': "STRING",'value': "ID",'id': "STRING",'class': "STRING"},hashContexts:{'viewName': depth0,'content': depth0,'optionLabelPath': depth0,'optionValuePath': depth0,'value': depth0,'id': depth0,'class': depth0},contexts:[depth0],types:["ID"],data:data})));
    data.buffer.push("\n                        <div class=\"input-group-addon\">:</div>\n                        ");
    data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
      'viewName': ("select"),
      'content': ("minuteList"),
      'optionLabelPath': ("content"),
      'optionValuePath': ("content"),
      'value': ("endMinute"),
      'class': ("form-control")
    },hashTypes:{'viewName': "STRING",'content': "ID",'optionLabelPath': "STRING",'optionValuePath': "STRING",'value': "ID",'class': "STRING"},hashContexts:{'viewName': depth0,'content': depth0,'optionLabelPath': depth0,'optionValuePath': depth0,'value': depth0,'class': depth0},contexts:[depth0],types:["ID"],data:data})));
    data.buffer.push("\n                    </div>\n                    ");
    stack1 = helpers['if'].call(depth0, "endTimeHasError", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </div>\n            ");
    return buffer;
    }
  function program10(depth0,data) {
    
    
    data.buffer.push("\n                        <p class=\"help-block\">Please select an end time later than the start time.</p>\n                    ");
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/appointments/edit/view', ['exports', 'hospitalrun/views/panel'], function (exports, PanelView) {

	'use strict';

	exports['default'] = PanelView['default'].extend();

});
define('hospitalrun/appointments/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, AbstractPagedController, UserSession) {

    'use strict';

    exports['default'] = AbstractPagedController['default'].extend(UserSession['default'], {
        startKey: [],
        canAddVisit: function() {
            return this.currentUserCan('add_visit');
        }.property(),
        
        canEdit: function() {
            //Add and edit are the same capability
            return this.currentUserCan('add_appointment');
        }.property(),    

        canDelete: function() {
            return this.currentUserCan('delete_appointment');
        }.property(),
            
        sortProperties: ['startDate', 'endDate'],
        sortAscending: true
    });

});
define('hospitalrun/appointments/index/route', ['exports', 'hospitalrun/routes/abstract-index-route'], function (exports, AbstractIndexRoute) {

    'use strict';

    exports['default'] = AbstractIndexRoute['default'].extend({
        editReturn: 'appointments.index',
        modelName: 'appointment',
        pageTitle: 'Appointments This Week',

        _getStartKeyFromItem: function(item) {
            var endDate = item.get('endDate'),
                startDate = item.get('startDate');
            if (endDate && endDate !== '') {
                endDate = new Date(endDate);
                if (endDate.getTime) {
                    endDate = endDate.getTime();
                }
            }
            if (startDate && startDate !== '') {
                startDate = new Date(startDate);
                if (startDate.getTime) {
                    startDate = startDate.getTime(); 
                }
            }
            return [startDate, endDate, 'appointment_'+item.get('id')];
        },

        _modelQueryParams: function() {
            var endOfWeek = moment().endOf('week').toDate().getTime(),
                maxValue = this.get('maxValue'),
                startOfWeek = moment().startOf('week').toDate().getTime();
            return {
                options: {
                    startkey: [startOfWeek, null, null],
                    endkey: [endOfWeek, endOfWeek, 'appointment_'+maxValue]
                },
                mapReduce: 'appointments_by_date'
            };
        },
        
        actions: {
            editAppointment: function(appointment) {
                appointment.set('returnTo', this.get('editReturn'));
                this.send('editItem', appointment);
            }
        }
    });

});
define('hospitalrun/appointments/index/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "appointments/item", options) : helperMissing.call(depth0, "partial", "appointments/item", options))));
    data.buffer.push("\n    ");
    return buffer;
    }

    data.buffer.push("<table class=\"table\">\n    <tr class=\"table-header\">\n        <th>Date</th>\n        <th>Name</th>\n        <th>Type</th>\n        <th>Location</th>\n        <th>Provider</th>\n        <th>Status</th>\n        <th>Actions</th>\n    </tr>\n    ");
    stack1 = helpers.each.call(depth0, {hash:{
      'itemController': ("appointments/item")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n</table>");
    return buffer;
    
  });

});
define('hospitalrun/appointments/index/view', ['exports', 'hospitalrun/views/item-listing'], function (exports, ItemListingView) {

	'use strict';

	exports['default'] = ItemListingView['default'].extend();

});
define('hospitalrun/appointments/item/controller', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend({
        longDateFormat: 'l h:mm A',
        shortDateFormat: 'l',
        timeFormat:  'h:mm A',
        
        _getDateSpan: function(startDate, endDate, format) {
            var formattedStart = startDate.format(format),
                formattedEnd = endDate.format(format);
            return '%@ - %@'.fmt(formattedStart, formattedEnd);
        },
        
        appointmentDate: function() {
            var allDay = this.get('allDay'),
                endDate = moment(this.get('endDate')),
                dateFormat = '',
                formattedDate = '',
                startDate = moment(this.get('startDate'));

            if (startDate.isSame(endDate, 'day')) {
                formattedDate = startDate.format(this.get('shortDateFormat'));
                if (!allDay) {                
                    formattedDate += ' ';
                    formattedDate += this._getDateSpan(startDate, endDate, this.get('timeFormat'));
                }
            } else {            
                if (allDay) {
                    dateFormat = this.get('shortDateFormat');
                } else {
                    dateFormat = this.get('longDateFormat');
                }
                formattedDate = this._getDateSpan(startDate, endDate, dateFormat);
            }        
            return formattedDate;
        }.property('startDate','endDate')
    });

});
define('hospitalrun/appointments/item/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n            <button class=\"btn btn-default\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "createVisit", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Add Visit</button>\n        ");
    return buffer;
    }

  function program3(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n            <button class=\"btn btn-default\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editAppointment", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n        ");
    return buffer;
    }

  function program5(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n            <button class=\"btn btn-default\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "deleteItem", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Delete</button>\n        ");
    return buffer;
    }

    data.buffer.push("<tr ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editAppointment", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n    <td>\n        ");
    stack1 = helpers._triageMustache.call(depth0, "appointmentDate", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </td>\n    <td>");
    stack1 = helpers._triageMustache.call(depth0, "patient.displayName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n    <td>");
    stack1 = helpers._triageMustache.call(depth0, "appointmentType", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n    <td>");
    stack1 = helpers._triageMustache.call(depth0, "location", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n    <td>");
    stack1 = helpers._triageMustache.call(depth0, "provider", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n    <td>");
    stack1 = helpers._triageMustache.call(depth0, "displayStatus", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n    <td>\n        ");
    stack1 = helpers['if'].call(depth0, "parentController.canAddVisit", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    stack1 = helpers['if'].call(depth0, "parentController.canEdit", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    stack1 = helpers['if'].call(depth0, "parentController.canDelete", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </td>        \n</tr>");
    return buffer;
    
  });

});
define('hospitalrun/appointments/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'hospitalrun/mixins/user-session'], function (exports, AbstractModuleRoute, UserSession) {

    'use strict';

    exports['default'] = AbstractModuleRoute['default'].extend(UserSession['default'],{
        addCapability: 'add_appointment',
        allowSearch: false,
        currentScreenTitle: 'Appointment List',
        editTitle: 'Edit Appointment',    
        newTitle: 'New Appointment',
        moduleName: 'appointments',
        newButtonText: '+ new appointment',
        sectionTitle: 'Appointments',
        
        actions: {
            createVisit: function(appointment) {
                var visitProps = appointment.getProperties('startDate', 'endDate', 'location', 'patient'),
                    visit;            
                visitProps.visitType = appointment.get('appointmentType');
                visitProps.examiner = appointment.get('provider');
                visit = this.get('store').createRecord('visit', visitProps);
                this.transitionTo('visits.edit', visit);
            }        
        },
        
        additionalModels: [{ 
            name: 'physicianList',
            findArgs: ['lookup','physician_list']
        },  {
            name: 'locationList',
            findArgs: ['lookup','visit_location_list']
        }, {
            name: 'visitTypesList',
            findArgs: ['lookup','visit_types']
        }],
        
        subActions: [{
            text: 'This Week',
            linkTo: 'appointments.index'
        }, {
            text: 'Today',
            linkTo: 'appointments.today'
        }, {
            text: 'Search',
            linkTo: 'appointments.search'
        }]
    });

});
define('hospitalrun/appointments/search/controller', ['exports', 'hospitalrun/appointments/index/controller', 'hospitalrun/mixins/appointment-statuses', 'ember', 'hospitalrun/mixins/visit-types'], function (exports, AppointmentIndexController, AppointmentStatuses, Ember, VisitTypes) {

    'use strict';

    exports['default'] = AppointmentIndexController['default'].extend(AppointmentStatuses['default'], VisitTypes['default'], {
        needs: 'appointments',
        appointmentType: null,
        physicianList: Ember['default'].computed.alias('controllers.appointments.physicianList'),
        provider: null,
        queryParams: ['appointmentType', 'provider', 'status', 'startKey', 'startDate'],
        searchFields: ['selectedAppointmentType', 'selectedProvider', 'selectedStatus', 'selectedStartDate'],
        selectedProvider: null,
        selectedStartingDate: new Date(),
        selectedStatus: null,
        sortProperties: null,
        startKey: [],
        status: null,
        visitTypesList: Ember['default'].computed.alias('controllers.appointments.visitTypeList'),

        actions: {
            search: function() {
                var appointmentType = this.get('selectedAppointmentType'),
                    fieldsToSet = {
                        startKey: [],
                        previousStartKey: null,
                        previousStartKeys: []
                    },
                    provider = this.get('selectedProvider'),
                    status = this.get('selectedStatus'),
                    startDate = this.get('selectedStartingDate');
                
                if (Ember['default'].isEmpty(appointmentType)) {
                    fieldsToSet.appointmentType = null;
                } else {
                    fieldsToSet.appointmentType = appointmentType;
                }
                if (Ember['default'].isEmpty(provider)) {
                    fieldsToSet.provider = null;
                } else {
                    fieldsToSet.provider = provider;
                }
                if (Ember['default'].isEmpty(status)) {
                    fieldsToSet.status = null;
                } else {
                    fieldsToSet.status = status;
                }
                if (!Ember['default'].isEmpty(startDate)) {
                    fieldsToSet.startDate = startDate.getTime();
                }
                if (!Ember['default'].isEmpty(fieldsToSet)) {
                    this.setProperties(fieldsToSet);
                }
            }
        }
    });

});
define('hospitalrun/appointments/search/route', ['exports', 'hospitalrun/appointments/index/route', 'ember'], function (exports, AppointmentIndexRoute, Ember) {

    'use strict';

    exports['default'] = AppointmentIndexRoute['default'].extend({
        editReturn: 'appointments.search',
        filterParams: ['appointmentType', 'provider', 'status'],
        modelName: 'appointment',
        pageTitle: 'Search Appointments',
        
        queryParams: {
            appointmentType: {refreshModel: true},
            provider: {refreshModel: true}, 
            status: {refreshModel: true},
            startDate: {refreshModel: true},
            startKey: {refreshModel: true}
        },
        
        _modelQueryParams: function(params) {
            var startDate = params.startDate,
                maxValue = this.get('maxValue');       
            if (Ember['default'].isEmpty(startDate)) {
                startDate = moment();
            } else {
                startDate = moment(parseInt(startDate));
            }
            var startOfDay = startDate.startOf('day').toDate().getTime();
            var searchOptions =  {
                startkey: [startOfDay, null, 'appointment_'],
                endkey: [maxValue, maxValue, 'appointment_'+maxValue]
            };
            return {
                options: searchOptions,
                mapReduce: 'appointments_by_date'
            };
        }
    });

});
define('hospitalrun/appointments/search/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n            <div class=\"row\">        \n                ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("selectedStartingDate"),
      'label': ("Show Appointments On Or After"),
      'class': ("col-sm-3")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n                ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-sm-3"),
      'prompt': (" "),
      'property': ("selectedStatus"),
      'label': ("Status"),
      'content': ("appointmentStatuses"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content")
    },hashTypes:{'class': "STRING",'prompt': "STRING",'property': "STRING",'label': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING"},hashContexts:{'class': depth0,'prompt': depth0,'property': depth0,'label': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n            </div>\n            <div calss=\"row\">\n                ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-sm-3"),
      'prompt': (" "),
      'label': ("Type"),
      'property': ("selectedAppointmentType"),
      'content': ("visitTypes"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content")
    },hashTypes:{'class': "STRING",'prompt': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING"},hashContexts:{'class': depth0,'prompt': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n                ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-sm-3"),
      'prompt': (" "),
      'property': ("selectedProvider"),
      'label': ("With"),
      'content': ("physicianList.value"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content")
    },hashTypes:{'class': "STRING",'prompt': "STRING",'property': "STRING",'label': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING"},hashContexts:{'class': depth0,'prompt': depth0,'property': depth0,'label': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n            </div>        \n        ");
    return buffer;
    }

  function program3(depth0,data) {
    
    
    data.buffer.push("Date");
    }

  function program5(depth0,data) {
    
    
    data.buffer.push("Type");
    }

  function program7(depth0,data) {
    
    
    data.buffer.push("Location");
    }

  function program9(depth0,data) {
    
    
    data.buffer.push("With");
    }

  function program11(depth0,data) {
    
    
    data.buffer.push("Status");
    }

  function program13(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "appointments/item", options) : helperMissing.call(depth0, "partial", "appointments/item", options))));
    data.buffer.push("\n    ");
    return buffer;
    }

    data.buffer.push("<div class=\"panel panel-info\">    \n    <div class=\"panel-body\">\n        ");
    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </div>\n    <div class=\"panel-footer\">\n        <button class=\"btn btn-default\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "search", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">Search</button>\n    </div>\n</div>\n<table class=\"table\">\n    <tr class=\"table-header\">\n        ");
    stack1 = (helper = helpers['sortable-column'] || (depth0 && depth0['sortable-column']),options={hash:{
      'sortBy': ("date"),
      'sortDesc': ("sortDesc"),
      'sortKey': ("sortKey")
    },hashTypes:{'sortBy': "STRING",'sortDesc': "ID",'sortKey': "ID"},hashContexts:{'sortBy': depth0,'sortDesc': depth0,'sortKey': depth0},inverse:self.noop,fn:self.program(3, program3, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "sortable-column", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        <th>Name</th>\n        ");
    stack1 = (helper = helpers['sortable-column'] || (depth0 && depth0['sortable-column']),options={hash:{
      'sortBy': ("appointmentType"),
      'sortDesc': ("sortDesc"),
      'sortKey': ("sortKey")
    },hashTypes:{'sortBy': "STRING",'sortDesc': "ID",'sortKey': "ID"},hashContexts:{'sortBy': depth0,'sortDesc': depth0,'sortKey': depth0},inverse:self.noop,fn:self.program(5, program5, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "sortable-column", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    stack1 = (helper = helpers['sortable-column'] || (depth0 && depth0['sortable-column']),options={hash:{
      'sortBy': ("location"),
      'sortDesc': ("sortDesc"),
      'sortKey': ("sortKey")
    },hashTypes:{'sortBy': "STRING",'sortDesc': "ID",'sortKey': "ID"},hashContexts:{'sortBy': depth0,'sortDesc': depth0,'sortKey': depth0},inverse:self.noop,fn:self.program(7, program7, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "sortable-column", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("        \n        ");
    stack1 = (helper = helpers['sortable-column'] || (depth0 && depth0['sortable-column']),options={hash:{
      'sortBy': ("provider"),
      'sortDesc': ("sortDesc"),
      'sortKey': ("sortKey")
    },hashTypes:{'sortBy': "STRING",'sortDesc': "ID",'sortKey': "ID"},hashContexts:{'sortBy': depth0,'sortDesc': depth0,'sortKey': depth0},inverse:self.noop,fn:self.program(9, program9, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "sortable-column", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    stack1 = (helper = helpers['sortable-column'] || (depth0 && depth0['sortable-column']),options={hash:{
      'sortBy': ("status"),
      'sortDesc': ("sortDesc"),
      'sortKey': ("sortKey")
    },hashTypes:{'sortBy': "STRING",'sortDesc': "ID",'sortKey': "ID"},hashContexts:{'sortBy': depth0,'sortDesc': depth0,'sortKey': depth0},inverse:self.noop,fn:self.program(11, program11, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "sortable-column", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        <th>Actions</th>\n    </tr>\n    ");
    stack1 = helpers.each.call(depth0, {hash:{
      'itemController': ("appointments/item")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(13, program13, data),contexts:[],types:[],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n</table>");
    return buffer;
    
  });

});
define('hospitalrun/appointments/search/view', ['exports', 'hospitalrun/views/item-listing'], function (exports, ItemListingView) {

	'use strict';

	exports['default'] = ItemListingView['default'].extend();

});
define('hospitalrun/appointments/today/controller', ['exports', 'hospitalrun/appointments/index/controller'], function (exports, AppointmentIndexController) {

    'use strict';

    exports['default'] = AppointmentIndexController['default'].extend({
        startKey: []
    });

});
define('hospitalrun/appointments/today/route', ['exports', 'hospitalrun/appointments/index/route'], function (exports, AppointmentIndexRoute) {

    'use strict';

    exports['default'] = AppointmentIndexRoute['default'].extend({
        editReturn: 'appointments.today',
        modelName: 'appointment',
        pageTitle: 'Today\'s Appointments',
        
        _modelQueryParams: function() {
            var endOfDay = moment().endOf('day').toDate().getTime(),
                maxValue = this.get('maxValue'),
                startOfDay= moment().startOf('day').toDate().getTime();
            return {
                options: {
                    startkey: [startOfDay, null, 'appointment_'],
                    endkey: [endOfDay, endOfDay, 'appointment_'+maxValue]
                },
                mapReduce: 'appointments_by_date'
            };
        }
    });

});
define('hospitalrun/appointments/today/view', ['exports', 'hospitalrun/views/item-listing'], function (exports, ItemListingView) {

    'use strict';

    exports['default'] = ItemListingView['default'].extend({
        templateName: 'appointments/index'
    });

});
define('hospitalrun/components/action-checkbox', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({ 
        //From http://emberjs.jsbin.com/rwjblue/58/edit?html,css,js,output
        attributeBindings: ['type', 'value'],
        tagName: 'input',
        type: 'checkbox',
        checked: false,

        _updateElementValue: function() {
            this.set('checked', this.$().prop('checked'));
        }.on('didInsertElement'),

        change: function(){
            this._updateElementValue();    
            this.sendAction('action', this.get('value'), this.get('checked'));
        }
    });

});
define('hospitalrun/components/array-display', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({
        
        isArray: function() {
            var content = this.get('content');
            return Ember['default'].isArray(content);
        }.property('content')
    });

});
define('hospitalrun/components/checkbox-or-typeahead', ['exports', 'ember', 'hospitalrun/components/select-or-typeahead'], function (exports, Ember, SelectOrTypeahead) {

    'use strict';

    exports['default'] = SelectOrTypeahead['default'].extend({
        checkboxesPerRow: 5, 
        model: null,
        
        _getLabelFromContent: function(object) {
            var optionLabelPath = this.get('optionLabelPath');
            return this._getPropertyFromContent(optionLabelPath, object);
        },
        
        _getPropertyFromContent: function(property, object) {
            var retrieveObject = {
                content: object
            };
            return Ember['default'].get(retrieveObject, property);
        },
        
        _getValueFromContent: function(object) {    
            var optionValuePath = this.get('optionValuePath');
            return this._getPropertyFromContent(optionValuePath, object);
        },
        
        _mapCheckboxValues: function(value) {
            return {
                label: this._getLabelFromContent(value),
                value: this._getValueFromContent(value)
            };
        },
        
        _setup: function() {
            var property = this.get('property');
            Ember['default'].defineProperty(this, 'errors', Ember['default'].computed('model.errors.'+property, function() {
                var property = this.get('property'),
                    errors = this.get('model.errors.'+property);
                if (!Ember['default'].isEmpty(errors)) {
                    return errors[0];
                }
            }));
        }.on('init'),
        
        checkboxRows: function() {
            var checkboxRows = [],
                checkboxesPerRow = this.get('checkboxesPerRow'),
                content = this.get('content'),
                allValues = content.copy();
            while(allValues.length > 0) {
                var checkBoxRowValues = allValues.splice(0,checkboxesPerRow).map(this._mapCheckboxValues.bind(this));
                checkboxRows.push(checkBoxRowValues);
            }
            return checkboxRows;
        }.property('content', 'checkboxesPerRow'),
        
        actions: {
            checkboxChanged: function(value, checked) {
                var property = this.get('property'),
                    propertyName = 'model.'+property,
                    selectedValues = this.get(propertyName);
                if (!Ember['default'].isArray(selectedValues)) {
                    selectedValues = [];
                }
                if (checked && !selectedValues.contains(value)) {
                    selectedValues.addObject(value);
                } else if (!checked && selectedValues.contains(value)) {
                    selectedValues.removeObject(value);
                }
                this.set(propertyName, selectedValues);
                this.set('selection', selectedValues);
                this.get('model').validate();
            }
        }
            
        
    });

});
define('hospitalrun/components/date-picker', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Forms.FormInputComponent.extend({
        currentDate: null,
        currentDisplayDate: null,
        dateProperty: null,
        minDate: null,
        maxDate: null,
        format: 'l',
        showTime: false,
        yearRange: 10,
        
        _picker: null,
        
        showTimeChanged: function() {
            var picker = this.get('_picker');
            if (picker) {
                picker.destroy();
                this.didInsertElement();
            }
        }.observes('showTime'),
        
        /**
         * Map the propertyName to a "displayPropertyName" so that
         * we can maintain a display date (used by pikadate) and
         * also bind to the date property specified to the component.
         */
        _setup: function() {
            var dateProperty = this.get('propertyName'),
                displayPropertyName = 'display_'+dateProperty;
            this.set('doingSetup', true);
            this.set('propertyName',displayPropertyName);
            this.set('dateProperty', dateProperty);
            if (Ember['default'].isEmpty(this.get('currentDate'))) {
                Ember['default'].Binding.from("model." + dateProperty).to('currentDate').connect(this);
            }
            if (Ember['default'].isEmpty(this.get('currentDisplayDate'))) {
                Ember['default'].Binding.from("model." + displayPropertyName).to('currentDisplayDate').connect(this);
            }
            
            Ember['default'].Binding.from('model.errors.'+dateProperty).to('model.errors.'+displayPropertyName).connect(this);
            this.set('doingSetup', false);
        }.on('init'),
        
        _shouldSetDate: function(currentDate, picker) {
            return (picker && (Ember['default'].isEmpty(currentDate) || 
                           Ember['default'].isEmpty(picker.getDate()) || 
                           picker.getDate().getTime() !== currentDate.getTime()));
            
        },
            
        currentDateChangedValue: function(){
            var currentDate = this.get('currentDate'),
                picker = this.get('_picker');
            if (this._shouldSetDate(currentDate, picker)){
                picker.setDate(currentDate);
            }
        }.observes('currentDate'),
        
        currentDisplayDateChangedValue: function(){
            if (!this.get('doingSetup')) {
                var currentDisplayDate = this.get('currentDisplayDate');
                if (Ember['default'].isEmpty(currentDisplayDate)) {
                    this.set('currentDate');
                }
            }
        }.observes('currentDisplayDate'),

        dateSet: function() {
            var currentDate = this.get('currentDate'),
                picker = this.get('_picker');
            if (this._shouldSetDate(currentDate, picker)){
                this.set('currentDate', picker.getDate());
            }
        },

        didInsertElement: function(){
            var currentDate = this.get('currentDate'),
                $input = this.$('input'),
                picker = null,
                props = this.getProperties('format','yearRange','showTime');
            
            props.onSelect = this.dateSet.bind(this);
        
            if (!Ember['default'].isEmpty(this.get('minDate'))) {
                props.minDate = this.get('minDate');
                if (props.minDate === 'now') {
                    props.minDate = new Date();
                }            
            }
            if (!Ember['default'].isEmpty(this.get('maxDate'))) {
                props.maxDate = this.get('maxDate');
                if (props.maxDate === 'now') {
                    props.maxDate = new Date();
                }            
            }
            props.field = $input[0];
            picker = new Pikaday(props);
            picker.setDate(currentDate);
            this.set("_picker", picker);
        },
     
        willDestroyElement: function(){
            var picker = this.get("_picker");
            if (picker) {
                picker.destroy();
            }
            this.set("_picker", null);
        }
    });

});
define('hospitalrun/components/ext-radio', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({     
        includeOtherOption: false,
        otherOptionLabel: null,
        name: 'radio',
        showInline: false,
        radioLabelPath: 'content.label',
        radioValuePath: 'content.value'
    });

});
define('hospitalrun/components/file-upload', ['exports', 'hospitalrun/components/image-upload'], function (exports, ImageUpload) {

    'use strict';

    exports['default'] = ImageUpload['default'].extend({
        resizeFile: false
    });

});
define('hospitalrun/components/icd10-pcs-typeahead', ['exports', 'hospitalrun/components/icd10-typeahead'], function (exports, ICD10TypeAhead) {

	'use strict';

	exports['default'] = ICD10TypeAhead['default'].extend();

});
define('hospitalrun/components/icd10-typeahead', ['exports', 'hospitalrun/components/type-ahead'], function (exports, TypeAhead) {

    'use strict';

    exports['default'] = TypeAhead['default'].extend({
        class: 'scrollable-typeahead',
        minlength: 2,
        selectionKey: 'id', 
        setOnBlur: true,
        templates: {
            header: '<div class="alert alert-success well-sm query-results" role="alert"></div>'
        },
        
        _sourceQuery: function (query, cb) { // Custom source function
            // Get the data from the Blodhound engine and process it.
            this.bloodhound.get(query, function (suggestions) {
                cb(suggestions);
                // Set the headers content.
                var $header = this.$('.query-results');
                $header.html('<strong><em>'+query+'</em></strong> returned <strong>' + suggestions.length + '</strong> results');
            }.bind(this));
        },
        
        _getSource: function() {
            return this._sourceQuery.bind(this);
        }
    });

});
define('hospitalrun/components/image-upload', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Forms.FormInputComponent.extend({
      fileInputEl: null,
      resizeFile: true,
      selectedFile: null,
      type: 'file',
      
      _fileChanged: function() {
          var inputEl = this.get('fileInputEl'),
              resize = this.get('resizeFile');

          if (resize) {
              //Derived from https://github.com/josefrichter/resize/blob/master/public/preprocess.js
              window.URL = window.URL || window.webkitURL;
              var blobURL = window.URL.createObjectURL(inputEl.files[0]); // and get it's URL
              // helper Image object
              var image = new Image();
              image.src = blobURL;
              image.onload = function() {
                  window.URL.revokeObjectURL(blobURL);
                  // have to wait till it's loaded
                  this.set('selectedFile', this._resizeImage(image)); // send it to canvas
                  
              }.bind(this);
          } else {            
              this.set('selectedFile', inputEl.files[0]);
          }        
      },
      
      /**
       * Resize the image to no larger than 1024px so that file sizes
       * are not too large.
       */
      _resizeImage: function(img) {
          //Derived from https://github.com/josefrichter/resize/blob/master/public/preprocess.js
          var canvas = document.createElement('canvas'),
              height = img.height,
              width = img.width,
              max_height = 1024,
              max_width = 1024;

          // calculate the width and height, constraining the proportions
          if (width > height) {
              if (width > max_width) {
                  //height *= max_width / width;
                  height = Math.round(height *= max_width / width);
                  width = max_width;
              }
          } else {
              if (height > max_height) {
                  //width *= max_height / height;
                  width = Math.round(width *= max_height / height);
                  height = max_height;
              }
          }
    
          // resize the canvas and draw the image data into it
          canvas.width = width;
          canvas.height = height;
          var ctx = canvas.getContext("2d");
          ctx.drawImage(img, 0, 0, width, height);
            
          var dataURI = canvas.toDataURL("image/png");        
          var binary = atob(dataURI.split(',')[1]);
          var array = [];
          for(var i = 0; i < binary.length; i++) {
              array.push(binary.charCodeAt(i));
          }
          return new Blob([new Uint8Array(array)], {type: 'image/png'});
      },
      
      didInsertElement: function() {
          var $input = this.$('input');
          this.set('fileInputEl', $input[0]);
          $input.on('change', this._fileChanged.bind(this));
      }
      
      
  });

});
define('hospitalrun/components/inventory-location-picker', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({
        doingSetup: false,
        label: null,
        locationPickers: null,
        locationList: null,    
        quantityRequested: null,    

        locationChange: function() {    
            var doingSetup = this.get('doingSetup'),
                locationList = this.get('locationList'),
                locationPickers = this.get('locationPickers'),
                quantityRequested = this.get('quantityRequested'),
                quantitySatisfiedIdx = -1;
            if (!doingSetup) {
                locationPickers.reduce(function(previousValue, item, index) {
                    var selectedLocation = item.get('selectedLocation'),
                        returnValue;
                    if (Ember['default'].isEmpty(selectedLocation)) {                
                        returnValue = previousValue;                
                    } else {
                        returnValue = (previousValue + selectedLocation.get('quantity'));
                    }
                    if (quantitySatisfiedIdx === -1 && returnValue >= quantityRequested) {
                        quantitySatisfiedIdx = index;
                    }
                    return returnValue;
                },0);
                if (quantitySatisfiedIdx > -1 ) {
                    if (locationPickers.get('length') > (quantitySatisfiedIdx + 1)) {
                        locationPickers = locationPickers.slice(0, quantitySatisfiedIdx+1);
                        this.set('locationPickers', locationPickers);
                    }
                } else {            
                    locationPickers.addObject(Ember['default'].Object.create());
                }        
                this._setupLocationPickers(locationPickers, locationList);
            }
        },
        
        _setup: function() {
            var locationList = this.get('locationList'),
                locationPickers = [],
                quantityRequested = this.get('quantityRequested');        
            if (Ember['default'].isEmpty(locationList) || Ember['default'].isEmpty(quantityRequested)) {
                //We need both a locationList and a quantityRequested
                return;
            }
            this.set('doingSetup', true);
            locationList.reduce(function(previousValue, location) {
                if (previousValue < quantityRequested) {
                    locationPickers.addObject(Ember['default'].Object.create());
                }
                return (previousValue + location.get('quantity'));
            },0);
            this._setupLocationPickers(locationPickers, locationList, true);
            this.set('locationPickers', locationPickers);
            this.set('doingSetup', false);
        }.on('init'),
        
        _setupLocationPickers: function(locationPickers, locationList, setInitialLocation) {
            locationPickers.reduce(function(previousValue, item) {
                var selectedLocation = item.get('selectedLocation');
                item.set('subLocationList',previousValue);            
                if (!previousValue.contains(selectedLocation) || setInitialLocation) {
                    item.set('selectedLocation', previousValue.get('firstObject'));
                }
                item.set('label', 'And');
                return previousValue.filter(function(location) {
                    return (item.get('selectedLocation.id') !== location.get('id'));
                });
            }, locationList);
            var firstPicker = locationPickers.get('firstObject');
            if (!Ember['default'].isEmpty(firstPicker)) {
                firstPicker.set('label', this.get('label'));
            }
        },
        
        _selectedLocationChange: function() {
            var locationPickers = this.get('locationPickers'),
                selectedLocations = [];
            locationPickers.forEach(function(locationPicker) {
                selectedLocations.addObject(locationPicker.get('selectedLocation'));
            });
            this.set('selectedLocations', selectedLocations);
        }.observes('locationPickers.@each.selectedLocation'),
        
        resetLocationParameters: function() {
            this._setup();
        }.observes('locationList', 'quantityRequested')
    });

});
define('hospitalrun/components/inventory-typeahead', ['exports', 'hospitalrun/components/type-ahead'], function (exports, TypeAhead) {

    'use strict';

    exports['default'] = TypeAhead['default'].extend({
        displayKey: 'name',   
        showQuantity: true,
        _mapInventoryItems: function(item) {
            var returnObj = {};
            if (this.get('showQuantity') && item.quantity) {
                returnObj.name = '%@ - %@ (%@ available)'.fmt(item.name, item.friendlyId, item.quantity);
            } else {
                returnObj.name = '%@ - %@'.fmt(item.name, item.friendlyId);
            }                
            returnObj[this.get('selectionKey')] = item;
            return returnObj;
        },
        
        mappedContent: function() {
            var content = this.get('content'),
                mapped = [];
            if (content) {
                mapped = content.map(this._mapInventoryItems.bind(this));
            }
            return mapped;
        }.property('content'),
        
        contentChanged: function() {
            var bloodhound = this.get('bloodhound'),
                content = this.get('content');
            if (bloodhound) {
                bloodhound.clear();
                bloodhound.add(content.map(this._mapInventoryItems.bind(this)));
            }        
        }.observes('content.[]'),
    });

});
define('hospitalrun/components/loading-message', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({
        tagName: 'span',
        layout: Ember['default'].Handlebars.compile('{{message}}'),
        showLoadingMessages: false,
        loadingMessages: [
            'The top butterfly flight speed is 12 miles per hour. Some moths can fly 25 miles per hour!',
            'Owls are the only birds that can see the color blue.',
            'Cats have over 100 vocal sounds; dogs only have 10.',
            'Humans use a total of 72 different muscles in speech.',
            'More than 1,000 different languages are spoken on the continent of Africa.',
            'An erythrophobe is someone who blushes easily.',
            'The most common phobia in the world is odynophobia which is the fear of pain.',
            'Your body uses 300 muscles to balance itself when you are standing still.',
            'Certain frogs can be frozen solid then thawed, and continue living.', 
            'Our eyes are always the same size from birth, but our nose and ears never stop growing.',
            'Your tongue is the only muscle in your body that is attached at only one end.',
            'Camels have three eyelids to protect themselves from blowing sand.'
        ],
        
        _setRandomMessage: function() {
            var loadingMessages = this.get('loadingMessages'),
                idx = Math.floor(Math.random()*loadingMessages.length);
            this.set('message', loadingMessages[idx]);
            this.set('timer', Ember['default'].run.later(this, this._setRandomMessage, 1000));
        },
        
        didInsertElement: function() {
            this._setRandomMessage();
        },
        
        willDestroyElement: function() {
            var timer = this.get('timer');
            if (!Ember['default'].isEmpty(timer)) {
                Ember['default'].run.cancel(timer);
            }
        }
    });

});
define('hospitalrun/components/location-select', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Select.extend({
        currentLocation: null,
        
        _setup: function() {    
            Ember['default'].Binding.from('selection').to('currentLocation').connect(this);
        }.on('init'),
        
        curentLocationChanged: function() {
            Ember['default'].run.once(this, function() {
                this.get('parentView').locationChange();
            });
        }.observes('currentLocation')
        
    });

});
define('hospitalrun/components/nav-menu', ['exports', 'ember', 'hospitalrun/mixins/user-session'], function (exports, Ember, UserSession) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend(UserSession['default'], {
        tagName: "div",
        classNames: ["primary-nav-item"],
        nav: null, 
        
        show: function() {
            return this.currentUserCan(this.get("nav").capability);        
        }.property("nav"),
        
        isShowing: false,
        
        _setup: function() {
            var nav = this.get("nav");
            nav.closeSubnav = function() {
                this.set('isShowing', false);
            }.bind(this);
            nav.subnav.forEach(function(item) { 
                item.show = this.currentUserCan(item.capability);
            }.bind(this));        
        }.on('init'),
        
        callNavAction: "navAction",
        callCloseSettings: "closeSettings",
        
        actions: {
            toggleContent: function() {
                //debugger;
                this.set('isShowing', !this.get('isShowing'));
                this.sendAction('callNavAction', this.nav);
            },
            
            resetNav: function() {
                this.sendAction('callCloseSettings');
            }
        }
    });

});
define('hospitalrun/components/patient-summary', ['exports', 'ember', 'hospitalrun/mixins/patient-diagnosis'], function (exports, Ember, PatientDiagnosis) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend(PatientDiagnosis['default'], {    
        disablePatientLink: false,
        editProcedureAction: 'editProcedure',
        patient: null,
        patientProcedures: null,
        showPatientAction: 'showPatient',
        visits: null,
        
        havePrimaryDiagnoses: function() {
            var primaryDiagnosesLength = this.get('primaryDiagnoses.length');
            return (primaryDiagnosesLength > 0);
        }.property('primaryDiagnoses.length'),    

        haveProcedures: function() {
            var proceduresLength = this.get('patientProcedures.length');
            return (proceduresLength > 0);
        }.property('patientProcedures.length'),    
        
        haveSecondaryDiagnoses: function() {
            var secondaryDiagnosesLength = this.get('secondaryDiagnoses.length');
            return (secondaryDiagnosesLength > 0);
        }.property('secondaryDiagnoses.length'),    
        
        primaryDiagnoses: function() {
            var visits = this.get('visits');
            return this.getPrimaryDiagnoses(visits);
        }.property('visits.@each'),
        
        secondaryDiagnoses: function() {
            var visits = this.get('visits');        
            return this.getSecondaryDiagnoses(visits);
        }.property('visits.@each'),
        
        shouldLinkToPatient: function() {
            var disablePatientLink = this.get('disablePatientLink');
            return !disablePatientLink;
        }.property('disablePatientLink'),
        
        actions: {
            linkToPatient: function() {
                var shouldLink = this.get('shouldLinkToPatient');
                if (shouldLink) {
                    var patient = this.get('patient'),
                        returnTo = this.get('returnTo'),
                        returnToContext = this.get('returnToContext');
                    patient.set('returnTo', returnTo);
                    patient.set('returnToContext', returnToContext);
                    this.sendAction('showPatientAction', this.get('patient'));
                }
            },        
            editProcedure: function(procedure) {
                procedure.set('returnToVisit', false);
                procedure.set('returnToPatient', true);
                procedure.set('patient', this.get('patient'));
                this.sendAction('editProcedureAction', procedure);
            },
        }
    });

});
define('hospitalrun/components/patient-typeahead', ['exports', 'ember', 'hospitalrun/mixins/patient-name', 'hospitalrun/components/type-ahead'], function (exports, Ember, PatientName, TypeAhead) {

    'use strict';

    exports['default'] = TypeAhead['default'].extend(PatientName['default'], {
        displayKey: 'name', 
        setOnBlur: true,
        
        
        _mapPatient: function(item) {
            var returnObj = {};
            item.doc.id = item.id.substr(8);
            returnObj.name = '%@ - %@'.fmt(this.getPatientDisplayName(item.doc), this.getPatientDisplayId(item.doc));
            returnObj[this.get('selectionKey')] = item.doc;
            return returnObj;
        },
        
        contentChanged: function() {
            var bloodhound = this.get('bloodhound'),
                content = this.get('content');
            if (bloodhound) {
                bloodhound.clear();
                if (!Ember['default'].isEmpty(content)) {
                    bloodhound.add(content.map(this._mapPatient.bind(this)));
                }
            }        
        }.observes('content.[]'),
        
        mappedContent: function() {
            var content = this.get('content'),
                mapped = [];
            if (content) {
                mapped = content.map(this._mapPatient.bind(this));
            }
            return mapped;
        }.property('content')
        
    });

});
define('hospitalrun/components/pricing-typeahead', ['exports', 'ember', 'hospitalrun/components/type-ahead'], function (exports, Ember, TypeAhead) {

    'use strict';

    exports['default'] = TypeAhead['default'].extend({
        displayKey: 'name', 
        setOnBlur: true,
        
        _mapContentItems: function() {
            var content = this.get('content');
            if (content) {
                var mapped = content.filter(function(item) {
                    return !Ember['default'].isEmpty(item);
                });
                mapped = mapped.map(function(item) {
                    var returnObj = {};
                    returnObj.name = item.name;
                    returnObj[this.get('selectionKey')] = item;
                    return returnObj;
                }.bind(this));                
                return mapped;
            } else {
                return [];
            }
        }
    });

});
define('hospitalrun/components/quantity-calc', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({
        quantityGroups: null,
        calculated: null,
        currentUnit: null,
        targetUnit: null,
        
        showTotal: function() {
            var calculated = this.get('calculated'),
                quantityGroups = this.get('quantityGroups');
            if (quantityGroups.length > 1 && !Ember['default'].isEmpty(calculated) && !isNaN(calculated)) {
                return true;
            }
            return false;
        }.property('calculated'),
        
        targetUnitChanged: function() {
            var targetUnit = this.get('targetUnit'),
                selectedUnit = this.get('quantityGroups.firstObject.unit');
            if (Ember['default'].isEmpty(selectedUnit)) {
                this.set('quantityGroups.firstObject.unit', targetUnit);
            } else {
                this.updateCurrentUnit(selectedUnit, 0);
            }
        }.observes('targetUnit'),
        
        _setup: function() {
            var calculated = this.get('calculated'),
                targetUnit = this.get('targetUnit'),
                quantityGroups = this.get('quantityGroups');
            if (Ember['default'].isEmpty(quantityGroups)) {
                quantityGroups = new Array({
                    index: 0,
                    unit: targetUnit,
                    firstQuantity: true,
                    quantity: calculated
                });
                this.set('quantityGroups',quantityGroups);
            }
        }.on('init'), 
        
        calculateTotal: function() {
            var quantityGroups = this.get('quantityGroups'),
                haveQuantities = false,
                lastObject = quantityGroups.get('lastObject'),
                targetUnit = this.get('targetUnit');
            haveQuantities = quantityGroups.every(function(item) {
                var quantity = item.quantity,
                    unit = item.unit;
                return (!Ember['default'].isEmpty(quantity) && !Ember['default'].isEmpty(unit) && !isNaN(quantity));
            });
            if (haveQuantities && lastObject.unit === targetUnit) {
                var newValue = quantityGroups.reduce(function(previousValue, item) {
                    return previousValue * parseInt(item.quantity);  
                }, 1);
                this.set('calculated', newValue);            
            } else {
                this.set('calculated');            
            }
        },

        updateCurrentUnit: function(selectedUnit, index) {
            var targetUnit = this.get('targetUnit'),            
                quantityGroups = this.get('quantityGroups'),
                groupLength = quantityGroups.length;
            if (!Ember['default'].isEmpty(targetUnit)) {
                if (selectedUnit === targetUnit) {
                    //Done
                    if (index < (groupLength - 1)) {
                        quantityGroups.removeAt((index+1), (groupLength-1) - index);
                    }
                } else {
                    if (index === (groupLength - 1)) {
                        quantityGroups.addObject({
                            unitName: selectedUnit,
                            unit: targetUnit,
                            index: quantityGroups.length
                        });
                    } else {
                        Ember['default'].set(quantityGroups.objectAt(index+1), 'unitName',selectedUnit);
                    }
                }
                Ember['default'].run.once(this, this.calculateTotal);
            }
        }
    });

});
define('hospitalrun/components/quantity-conv', ['exports', 'ember', 'hospitalrun/mixins/unit-types'], function (exports, Ember, UnitTypes) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend(UnitTypes['default'], {
        firstQuantity: false,
        quantity: null,    
        quantityHelp: null,    
        unitName: null,
        unit: null,
        resetUnitName: false,
        targetUnit: Ember['default'].computed.alias('parentView.targetUnit'),
                
        unitClass: function() {
            var selectedUnit = this.get('unit'),
                targetUnit = this.get('targetUnit'),
                unitClass = 'has-success';
            if (!Ember['default'].isEmpty(targetUnit) && Ember['default'].isEmpty(selectedUnit)) {
                this.set('unitHelp','please select a unit');
                unitClass = 'has-error';
            } else {
                if (Ember['default'].isEmpty(targetUnit)) {
                    unitClass = '';
                }
                this.set('unitHelp');           
            }
            this.get('parentView').updateCurrentUnit(selectedUnit, this.get('index'));
            return unitClass;
        }.property('targetUnit', 'unit'),
        
        quantityClass: function() {
            var quantity = this.get('quantity'),
                quantityClass = 'has-success',
                targetUnit = this.get('targetUnit');
            if (!Ember['default'].isEmpty(targetUnit) && (Ember['default'].isEmpty(quantity) || isNaN(quantity))) {
                this.set('quantityHelp','not a valid number');
                quantityClass = 'has-error';
            } else {
                if (Ember['default'].isEmpty(targetUnit)) {
                    quantityClass='';
                }        
                this.set('quantityHelp');            
            }
            Ember['default'].run.once(this, function() {
                this.get('parentView').calculateTotal();
            });
            return quantityClass;
        }.property('quantity','targetUnit')
    });

});
define('hospitalrun/components/radio-button', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({
         tagName : "input",
         type : "radio",
         attributeBindings : [ "name", "type", "value", "checked:checked" ],
         
         init: function() {
            this.labelPathDidChange();
            this.valuePathDidChange();
            this._super();
         },
         
         click : function() {
             var value = this.$().val();
             this.set('selection', value);
         },
         checked : function() {
             return this.get("value") === this.get("selection");
         }.property('selection'),
         
         labelPathDidChange: Ember['default'].observer('parentView.radioLabelPath', function() {
            var labelPath = this.get('parentView.radioLabelPath');

            if (!labelPath) { return; }

            Ember['default'].defineProperty(this, 'label', Ember['default'].computed(function() {
                return this.get(labelPath);
            }).property(labelPath));
        }),

        valuePathDidChange: Ember['default'].observer('parentView.radioValuePath', function() {
            var valuePath = this.get('parentView.radioValuePath');

            if (!valuePath) { return; }

            Ember['default'].defineProperty(this, 'value', Ember['default'].computed(function() {
                return this.get(valuePath);
            }).property(valuePath));
        })
    });

});
define('hospitalrun/components/role-select', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    var get = Ember['default'].get;

    exports['default'] = Ember['default'].Select.extend({
        optionValuePath: 'content.roles',
        optionLabelPath: 'content.name',
        
        valueDidChange: Ember['default'].observer('value', function() {
            var content = get(this, 'content'),
            value = get(this, 'value'),
            valuePath = get(this, 'optionValuePath').replace(/^content\.?/, ''),
            selectedValue = (valuePath ? get(this, 'selection.' + valuePath) : get(this, 'selection')),
            selection;
            if (Ember['default'].compare(value,selectedValue) !== 0)  {
                selection = content ? content.find(
                    function(obj) {                    
                        return Ember['default'].compare(value,(valuePath ? get(obj, valuePath) : obj)) === 0;
                    }) : null;
                this.set('selection', selection);
            }
        }),
    });

});
define('hospitalrun/components/select-or-typeahead', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({
        name: "select-or-typeahead",
        class: null,    
        hint: true,
        label: null,
        list: null,
        optionLabelPath: 'content',
        optionValuePath: 'content',
        property: null,
        prompt: ' ',
        selection: null,
        setOnBlur: true,
        typeAheadType: null,
        
        content: function() {
            var list = this.get('list');
            if (!Ember['default'].isEmpty(list) && list.get) {
                return list.get('value');
            }
        }.property('list'),
                
        usePricingTypeAhead: function() {
            return (this.get('typeAheadType') === 'pricing');
        }.property('typeAheadType'),
        
        userCanAdd: function() {
            var list = this.get('list');
            if (!Ember['default'].isEmpty(list) && list.get) {            
               return list.get('userCanAdd');
            } else {
                return true;
            }
        }.property('list')
    });

});
define('hospitalrun/components/smart-prescription', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].TextArea.extend(Ember['default'].TargetActionSupport, {
        valueDidChange: Ember['default'].observer('value', function() {
            this.triggerAction({
                action: 'search'            
            });
        })
    });

});
define('hospitalrun/components/sortable-column', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({
        
        action: 'sortByKey',
        sortDesc: false,
        sortBy: null,
        sortKey: null,
        sorted: function() {
            var sortBy = this.get('sortBy'),
                sortKey = this.get('sortKey');
            return sortBy === sortKey;
        }.property('sortBy','sortKey'),
        
        actions: {
            sortBy: function () {
                var sortBy = this.get('sortBy'),
                    sorted = this.get('sorted'),
                    sortDesc = false;
                if (sorted) {
                    sortDesc = this.toggleProperty('sortDesc');
                }
                this.sendAction('action', sortBy, sortDesc);
            }
        }
     
    });

});
define('hospitalrun/components/take-photo', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    navigator.getUserMedia = navigator.getUserMedia ||  navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
    exports['default'] = Ember['default'].Component.extend({
        showCameraSelect: false,
        canvas: null,
        video: null, 
        photo: null,
        photoFile: null,
        width: 200,
        height: 0,
        selectedCamera: Ember['default'].computed.alias('parentView.model.selectedCamera'),
        videoSources: null,
        photoSource: Ember['default'].computed.alias('parentView.model.photoSource'),
        photoSources: [
            'Take a Picture',
            'Upload a File'
        ],
        setupCamera: false,
        
        /***
         * Setup the specified camera
         */
        _cameraChange: function() {
            var stream = this.get('stream'),
                video = this.get('video');
            if (!Ember['default'].isEmpty(stream)) {
                video.src = null;
                stream.stop();
            }        
            var videoSource = this.get('selectedCamera');
            var constraints = {
                audio: false,
                video: {
                    optional: [{sourceId: videoSource}]
                }
            };
            navigator.getUserMedia(constraints, this._gotStream.bind(this), this._errorCallback);
            this._setupVideo();
        }.observes('parentView.model.selectedCamera'),    

        _errorCallback: function(error){
            console.log("navigator.getUserMedia error: ", error);
        },        
            
        /***
         * Callback for MediaStreamTrack.getSources
         */
        _gotSources: function(sourceInfos) {
            var cameraCount = 0,
                cameraLabel,
                videoSources = [];
            for (var i = 0; i !== sourceInfos.length; ++i) {
                var sourceInfo = sourceInfos[i];
                if (sourceInfo.kind === 'video') {
                    cameraLabel = 'Camera ' + (++cameraCount);
                    if (sourceInfo.label) {
                        cameraLabel += ' ('+sourceInfo.label + ')';
                    }
                    videoSources.addObject({
                        id: sourceInfo.id,
                        label: cameraLabel
                    });
                }
            }
            this.set('videoSources', videoSources);
            if (videoSources.length > 0) {
                this.set('selectedCamera',videoSources[0].id);
                if (videoSources.length === 1) {
                    this.set('showCameraSelect', false);
                } else {
                    this.set('showCameraSelect', true);
                }            
            }
        },
        
        /***
         * Callback handler for getUserMedia.
         */
        _gotStream: function(stream) {
            if (this.isDestroyed) {
                stream.stop();
            } else {
                var video = this.get('video');
                this.set('stream', stream); // make stream available to object
                video.src = window.URL.createObjectURL(stream);
                video.play();
            }
        },
        
        _photoSourceChanged: function() {
            var camera = this.$('.camera'),
                fileUpload = this.$('.fileupload'),
                photoSource = this.get('photoSource'),
                setupCamera = this.get('setupCamera');
            if (photoSource === 'Upload a File') {
                fileUpload.show();
                camera.hide();
            } else {
                fileUpload.hide();
                camera.show();            
                if (!setupCamera) {
                    var canvas = this.$('canvas')[0],
                        photo = this.$('img')[0],
                        video = this.$('video')[0];    
                    this.setProperties({
                        canvas: canvas,
                        photo: photo,
                        video: video
                    });
                    if (typeof MediaStreamTrack === 'undefined' || MediaStreamTrack.getSources === 'undefined' ){
                        this.set('showCameraSelect', false);
                        if (navigator.getUserMedia) {
                            navigator.getUserMedia({audio: false,video: true}, this._gotStream.bind(this), this._errorCallback);
                            this._setupCanPlayListener(video);
                        }
                    } else {
                        MediaStreamTrack.getSources(this._gotSources.bind(this));
                        this._setupCanPlayListener(video);
                    }
                    this.set('setupCamera', true);                         
                }
            }
        }.observes('parentView.model.photoSource'),
        
        _setupCanPlayListener: function(video) {
            //Remove listener if it was already added before.
            video.removeEventListener('canplay', this._setupVideo.bind(this), false);
            video.addEventListener('canplay', this._setupVideo.bind(this), false);
        },

        /***
         * Setup the dimensions for the video preview and picture elements.
         */
        _setupVideo: function() {
            var canvas = this.get('canvas'),
                height = this.get('height'),
                video = this.get('video'),
                width = this.get('width');
            height = video.videoHeight / (video.videoWidth/width);
            video.setAttribute('width', width);
            video.setAttribute('height', height);
            canvas.setAttribute('width', width);
            canvas.setAttribute('height', height);
            this.setProperties({
                height: height,
                width: width
            });
        },
        
        _stopStream: function() {
            var stream = this.get('stream');
            if (!Ember['default'].isEmpty(stream)) {
                stream.stop();
            }
        },
                                          
        actions: {
            takePhoto: function () {
                var canvas = this.get('canvas'),
                    height = this.get('height'),                
                    video = this.get('video'),
                    width = this.get('width');            
                canvas.width = width;
                canvas.height = height;
                canvas.getContext('2d').drawImage(video, 0, 0, width, height);
                var data = canvas.toDataURL('image/png');
                var binary = atob(data.split(',')[1]);
                var array = [];
                for(var i = 0; i < binary.length; i++) {
                    array.push(binary.charCodeAt(i));
                }
                this.set('photoFile', new Blob([new Uint8Array(array)], {type: 'image/png'}));            
            }
        },
                                
        canCaptureVideo: function() {
            if (navigator.getUserMedia) {
                return true;
            } else {
                return false;
            }
        }.property(),
        
        didInsertElement: function() {
            var camera = this.$('.camera'),
                fileUpload = this.$('.fileUpload');
            if (camera.length === 1) {            
                fileUpload.hide();
            }
        },
        
        willDestroyElement: function(){        
            this._stopStream();
        }
    });

});
define('hospitalrun/components/text-search', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].TextField.extend(Ember['default'].TargetActionSupport, {
        change: function() {
            this.triggerAction({
                action: 'search'
            });
        }
    });

});
define('hospitalrun/components/type-ahead', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Forms.FormInputComponent.extend({
        _mapContentItems: function() {
            var content = this.get('content');
            if (content) {
                var mapped = content.filter(function(item) {
                    return !Ember['default'].isEmpty(item);
                });
                if (content instanceof DS.RecordArray) {
                    mapped = mapped.map(function(item) {
                        var returnObj = item.getProperties(this.get('displayKey'));
                        returnObj[this.get('selectionKey')] = item;
                        return returnObj;
                    }.bind(this));                
                } else {
                    mapped = mapped.map(function(item) {
                        var returnObj = {};
                        returnObj[this.get('displayKey')] = item;
                        return returnObj;
                    }.bind(this));
                }
                return mapped;
            } else {
                return [];
            }        
        },
        
        mappedContent: function() {
            return this._mapContentItems();
        }.property('content'),
        
        contentChanged: function() {
            var bloodhound = this.get('bloodhound');
            if (bloodhound) {
                bloodhound.clear();
                bloodhound.add(this._mapContentItems());
            }        
        }.observes('content.[]'),
        
        bloodhound: null,
        displayKey: 'value',
        selectionKey: 'value',
        hint: true, 
        highlight: true,
        lastHint: null,
        minlength: 1,
        selectedItem: false,
        inputElement: null,
        typeAhead: null,
        setOnBlur: true,
        templates: null,

        _getSource: function() {
            var typeAheadBloodhound = new Bloodhound( {
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace(this.get('displayKey')),
                queryTokenizer: Bloodhound.tokenizers.whitespace,            
                local: this.get('mappedContent')
            });
            typeAheadBloodhound.initialize();
            this.set('bloodhound', typeAheadBloodhound);
            return typeAheadBloodhound.ttAdapter();
        },
        
        didInsertElement: function() {
            var $input = this.$('input');
            this.set('inputElement', $input);
            var $typeahead = $input.typeahead({
                autoselect: true,
                hint: this.get('hint'),
                highlight: this.get('highlight'),
                minLength: this.get('minlength')
            }, {            
                displayKey: this.get('displayKey'),
                source: this._getSource(),
                templates: this.get('templates')
            });
            this.set('typeAhead', $typeahead);
            
            $typeahead.on('typeahead:selected', function(event, item) {
                this.set('selection', item[this.get('selectionKey')]);        
                this.set('selectedItem', true);
            }.bind(this));

            $typeahead.on('typeahead:autocompleted', function(event, item) {
                this.set('selection', item[this.get('selectionKey')]);
                this.set('selectedItem', true);
            }.bind(this));
            
            if (this.get('setOnBlur')) {
                $input.on('keyup', function() {
                    var $hint = this.$('.tt-hint'),
                        hintValue = $hint.val();
                        this.set('lastHint', hintValue);
                        this.set('selectedItem', false);
                }.bind(this));
            
                $input.on('blur', function(event) {
                    var selection = this.get('selection');
                    var targetValue = event.target.value.trim();
                    if (!Ember['default'].isEmpty(selection)) {
                        if (selection.trim) {
                            selection = selection.trim();
                        }
                        this.set('selection', selection);
                    }
                    if (!this.get('selectedItem')) {
                        var lastHint = this.get('lastHint'),
                            exactMatch = false;
                        if (Ember['default'].isEmpty(lastHint)) {
                            lastHint = targetValue;
                            exactMatch = true;
                        }
                        if (!Ember['default'].isEmpty(targetValue) && !Ember['default'].isEmpty(lastHint)) {
                            this.get('bloodhound').get(lastHint, function(suggestions) {                        
                                if (suggestions.length > 0) {
                                    if (!exactMatch || lastHint.toLowerCase() === suggestions[0][this.get('displayKey')].toLowerCase()) {
                                        this.set('selectedItem', true);
                                        this.set('selection', suggestions[0][this.get('selectionKey')]);
                                        event.target.value = suggestions[0][this.get('displayKey')];
                                        this.get('model').set(this.get('propertyName'), event.target.value);
                                    }
                                } else if (targetValue !== selection) {
                                    this.set('selection');
                                }
                            }.bind(this));
                        }                
                    }
                }.bind(this));        
                
            }
        },

        willDestroyElement: function() {
            this.get('inputElement').typeahead('destroy');
        }

    });

});
define('hospitalrun/controllers/abstract-delete-controller', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend({
        afterDeleteAction: 'closeModal',
        showUpdateButton: true,
        updateButtonText: 'Delete',
        updateButtonAction: 'delete',
        
        isUpdateDisabled: false,
        
        actions: {
            cancel: function() {
                this.send('closeModal');
            },
            
            delete: function() {
                var recordToDelete = this.get('model');
                this.get('model').destroyRecord().then(function() {
                    this.send(this.get('afterDeleteAction'), recordToDelete);
                }.bind(this));                
            }
        }
    });

});
define('hospitalrun/controllers/abstract-edit-controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/user-session'], function (exports, Ember, IsUpdateDisabled, ModalHelper, UserSession) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend(IsUpdateDisabled['default'], ModalHelper['default'], UserSession['default'], {
        cancelAction: 'allItems',
        
        cancelButtonText: function() {
            var isDirty = this.get('isDirty');
            if (isDirty) {
                return 'Cancel';
            } else {
                return 'Return';
            }
        }.property('isDirty'),

        disabledAction: function() {
            var isValid = this.get('isValid');
            if (!isValid) {
                return 'showDisabledDialog';  
            }
        }.property('isValid'),
        
        isNewOrDeleted: function() {
            return this.get('isNew') || this.get('isDeleted');
        }.property('isNew', 'isDeleted'),
        
        /**
         *  Lookup lists that should be updated when the model has a new value to add to the lookup list.
         *  lookupListsToUpdate: [{
         *      name: 'countryList', //Name of property containing lookup list
         *      property: 'country', //Corresponding property on model that potentially contains a new value to add to the list
         *      id: 'country_list' //Id of the lookup list to update
         *  }
         */
        lookupListsToUpdate: null,
        
        showUpdateButton: function() {
            var updateButtonCapability = this.get('updateCapability');
            return this.currentUserCan(updateButtonCapability);
        }.property('updateCapability'),
        
        updateButtonAction: 'update',    
        updateButtonText: function() {
            if (this.get('isNew')) {
                return 'Add';
            } else {
                return 'Update';
            }
        }.property('isNew'),
        updateCapability: null,
        
        /**
         * Add the specified value to the lookup list if it doesn't already exist in the list.
         * @param lookupList array the lookup list to add to.
         * @param value string the value to add.
         * @param listsToUpdate array the lookup lists that need to be saved.
         * @param listsName string name of the list to add the value to.
         */
        _addValueToLookupList: function(lookupList, value, listsToUpdate, listName) {
            var lookupListValues = lookupList.get('value');
            if (!lookupListValues.contains(value)) {
                lookupListValues.push(value);
                lookupListValues.sort();
                lookupList.set('value', lookupListValues);
                if (!listsToUpdate.contains(lookupList)) {
                    listsToUpdate.push(lookupList);
                }
                this.set(listName, lookupList);
            }
        },
        
        _cancelUpdate: function() {
            var cancelledItem = this.get('model');
            if (this.get('isNew')) {
                cancelledItem.deleteRecord();
            } else {
                cancelledItem.rollback();
            }
        },
        
        actions: {
            cancel: function() {
                this._cancelUpdate();
                this.send(this.get('cancelAction'));
            },
            
            returnTo: function() {
                this._cancelUpdate();            
                var returnTo = this.get('returnTo'),
                    returnToContext = this.get('returnToContext');
                if (Ember['default'].isEmpty(returnToContext)) {
                    this.transitionToRoute(returnTo);
                } else {
                    this.transitionToRoute(returnTo, returnToContext);
                }
            },        
            
            showDisabledDialog: function() {            
                this.displayAlert('Warning!!!!','Please fill in required fields (marked with *) and correct the errors before saving.');
            },        
            
            /**
             * Update the model and perform the before update and after update
             * @param skipAfterUpdate boolean (optional) indicating whether or not 
             * to skip the afterUpdate call.
             */
            update: function(skipAfterUpdate) {
                this.beforeUpdate().then(function() {
                    this.saveModel(skipAfterUpdate);
                }.bind(this));
            }
        },
        
        /**
         * Override this function to perform logic after record update
         * @param record the record that was just updated.
         */
        afterUpdate: function() {
        },
        
        /**
         * Override this function to perform logic before record update.
         * @returns {Promise} Promise that resolves after before update is done.
         */
        beforeUpdate: function() {
            return Ember['default'].RSVP.Promise.resolve();
        },
        
        /**
         * Save the model and then (optionally) run the after update.
         * @param skipAfterUpdate boolean (optional) indicating whether or not 
         * to skip the afterUpdate call.
         */
        saveModel: function(skipAfterUpdate) {
            this.get('model').save().then(function(record){
                this.updateLookupLists();
                if (!skipAfterUpdate) {
                    this.afterUpdate(record);
                }
            }.bind(this));
        },
        
        /**
         * Update any new values added to a lookup list
         */
        updateLookupLists: function() {
            var lookupLists = this.get('lookupListsToUpdate'),
                listsToUpdate = Ember['default'].A();
            if (!Ember['default'].isEmpty(lookupLists)) {            
                lookupLists.forEach(function(list) {
                    var propertyValue = this.get(list.property),
                        lookupList = this.get(list.name);
                    if (!Ember['default'].isEmpty(propertyValue)) {
                        if (!lookupList) {
                            lookupList = this.get('store').push('lookup',{
                                id: list.id,
                                value: [],
                                userCanAdd: true
                            });                        
                        }
                        if (Ember['default'].isArray(propertyValue)) {
                            propertyValue.forEach(function(value) {
                                this._addValueToLookupList(lookupList, value, listsToUpdate, list.name);    
                            }.bind(this));
                        } else {
                            this._addValueToLookupList(lookupList, propertyValue, listsToUpdate, list.name);
                        }
                    }
                }.bind(this));
                listsToUpdate.forEach(function(list) {
                    list.save();
                });
            }
        }
        
        


    });

});
define('hospitalrun/controllers/abstract-paged-controller', ['exports', 'ember', 'hospitalrun/mixins/progress-dialog', 'hospitalrun/mixins/user-session'], function (exports, Ember, ProgressDialog, UserSession) {

    'use strict';

    exports['default'] = Ember['default'].ArrayController.extend(ProgressDialog['default'], UserSession['default'], {
        addPermission: null,
        deletePermission: null,
        nextStartKey: null,
        previousStartKey: null,
        previousStartKeys: [],
        progressMessage: 'Loading Records.  Please wait...',
        progressTitle: 'Loading',    
        queryParams: ['startKey', 'sortKey', 'sortDesc'],
        sortDesc: false,
        sortKey: null,
        
        canAdd: function() {        
            return this.currentUserCan(this.get('addPermission'));
        }.property(),    
        
        canDelete: function() {
            return this.currentUserCan(this.get('deletePermission'));
        }.property(),
        
        canEdit: function() {
            //Default to using add permission
            return this.currentUserCan(this.get('addPermission'));
        }.property(),    
        
        showActions: function() {
            return (this.get('canAdd') || this.get('canEdit') || this.get('canDelete'));
        }.property('canAdd', 'canEdit', 'canDelete'),
        
        disablePreviousPage: function() {
            return (Ember['default'].isEmpty(this.get('previousStartKey')));
        }.property('previousStartKey'),
        
        disableNextPage: function() {
            return (Ember['default'].isEmpty(this.get('nextStartKey')));
        }.property('nextStartKey'),
        
        showPagination: function() {
            return (!Ember['default'].isEmpty(this.get('previousStartKey') || !Ember['default'].isEmpty(this.get('nextStartKey'))));
        }.property('nextStartKey', 'previousStartKey'),
        
        actions: {
            nextPage: function() {            
                var key = this.get('nextStartKey'),
                    previousStartKeys = this.get('previousStartKeys'),
                    firstKey = this.get('firstKey');
                this.set('previousStartKey', firstKey);
                previousStartKeys.push(firstKey);
                this.set('startKey',key);
                this.showProgressModal();
            },
            previousPage: function() {
                var key = this.get('previousStartKey'),
                    previousStartKeys = this.get('previousStartKeys');
                previousStartKeys.pop();
                this.set('startKey',key);
                this.set('previousStartKey', previousStartKeys.pop());
                this.set('previousStartKeys', previousStartKeys);
                this.showProgressModal();  
            },
            sortByKey: function(sortKey, sortDesc) {
                this.setProperties({
                    previousStartKey: null,
                    previousStartKeys: [],
                    sortDesc: sortDesc,
                    sortKey: sortKey,                
                    startKey: null
                });            
                this.showProgressModal();
            }
        }
    });

});
define('hospitalrun/controllers/abstract-report-controller', ['exports', 'ember', 'hospitalrun/mixins/date-format', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/number-format', 'hospitalrun/mixins/pouchdb', 'hospitalrun/mixins/progress-dialog'], function (exports, Ember, DateFormat, ModalHelper, NumberFormat, PouchDbMixin, ProgressDialog) {

    'use strict';

    exports['default'] = Ember['default'].ArrayController.extend(DateFormat['default'], ModalHelper['default'], NumberFormat['default'], PouchDbMixin['default'], ProgressDialog['default'], {
        defaultErrorMessage: 'An error was encountered while generating the requested report.  Please let your system administrator know that you have encountered an error.',
        offset: 0,
        limit: 25,
        progressMessage: 'Please wait while your report is generated.',
        progressTitle: 'Generating Report',
        reportColumns: null,
        reportRows: [],
        reportTitle: null,
        reportType: null,
        reportTypes: null,    
        showFirstPageButton: true,
        showLastPageButton: true,
        showReportResults: false,
        
        /**
         * Add a row to the report using the selected columns to add the row.
         * @param {Array} row the row to add
         * @param {boolean} skipFormatting true if formatting should be skipped.
         * @param reportColumns {Object} the columns to display on the report; 
         * optional, if not set, the property reportColumns on the controller 
         * will be used. 
         * @param reportAction {Object} action to fire on row when row is clicked.     
         */
        _addReportRow: function(row, skipFormatting, reportColumns, rowAction) {
            var columnValue,
                reportRows = this.get('reportRows'),
                reportRow = [];
            if (Ember['default'].isEmpty(reportColumns)) {
                reportColumns = this.get('reportColumns');
            }
            for (var column in reportColumns) {
                if (reportColumns[column].include) {
                    columnValue = Ember['default'].get(row,reportColumns[column].property);
                    if (Ember['default'].isEmpty(columnValue)) {
                         reportRow.push('');
                    } else if (reportColumns[column].format === '_numberFormat') {
                        if (skipFormatting) {
                            reportRow.push(columnValue);
                        } else {
                            reportRow.push(this._numberFormat(columnValue));
                        }
                    } else if (!skipFormatting && reportColumns[column].format) {
                        reportRow.push(this[reportColumns[column].format](columnValue));
                    } else {
                        reportRow.push(columnValue);
                    }
                }
            }
            if (rowAction) {
                reportRows.addObject({
                    rowAction: rowAction,
                    row: reportRow
                });
            } else {
                reportRows.addObject(reportRow);
            }
        },
        
        /**
         * Finish up the report by setting headers, titles and export.
         * @param reportColumns {Object} the columns to display on the report; 
         * optional, if not set, the property reportColumns on the controller 
         * will be used. 
         */
        _finishReport: function(reportColumns) {
            this.set('showReportResults', true);
            this.set('offset', 0);
            this._setReportHeaders(reportColumns);
            this._setReportTitle();
            this._generateExport();
            this.closeProgressModal();
        },
        
        _generateExport: function() {
            var csvRows = [],
                reportHeaders = this.get('reportHeaders'),
                dataArray = [reportHeaders];
            dataArray.addObjects(this.get('reportRows'));
            dataArray.forEach(function(reportRow) { 
                var rowToAdd;            
                if (reportRow.row) {
                    rowToAdd = reportRow.row;
                    
                } else {
                    rowToAdd = reportRow;
                    
                }            
                rowToAdd = rowToAdd.map(function(column) {
                    if (!column) {
                        return '';
                    } else if (column.replace) {
                        return column.replace('"','""');
                    } else {
                        return column;
                    }
                    
                });
                csvRows.push('"'+rowToAdd.join('","')+'"');
            });
            var csvString = csvRows.join('\r\n');
            var uriContent = "data:application/csv;charset=utf-8," + encodeURIComponent(csvString);
            this.set('csvExport', uriContent);
        },
        
        _notifyReportError: function(errorMessage) {
            var alertMessage = 'An error was encountered while generating the requested report.  Please let your system administrator know that you have encountered an error.';
            this.closeProgressModal();
            this.displayAlert('Error Generating Report', alertMessage);
            throw new Error(errorMessage);
        },
        
        _setReportHeaders: function(reportColumns) {
            var reportHeaders = [];
            if (Ember['default'].isEmpty(reportColumns)) {
                reportColumns = this.get('reportColumns');
            }
            for (var column in reportColumns) {
                if (reportColumns[column].include) {
                    reportHeaders.push(reportColumns[column].label);
                }
            }
            this.set('reportHeaders', reportHeaders);
        },
        
        _setReportTitle: function() {
            var endDate = this.get('endDate'),
                formattedEndDate = '',
                formattedStartDate = '',
                reportType = this.get('reportType'),
                reportTypes = this.get('reportTypes'),
                startDate = this.get('startDate');
            if (!Ember['default'].isEmpty(endDate)) {
                formattedEndDate = moment(endDate).format('l');
            }
            
            var reportDesc = reportTypes.findBy('value', reportType);
            if (Ember['default'].isEmpty(startDate)) {
                this.set('reportTitle', '%@ Report %@'.fmt(reportDesc.name, formattedEndDate));
            } else {
                formattedStartDate = moment(startDate).format('l');
                this.set('reportTitle', '%@ Report %@ - %@'.fmt(reportDesc.name, formattedStartDate, formattedEndDate));
            }
        },
        
        actions: {
            firstPage: function() {
                this.set('offset', 0);
            },
            
            nextPage: function() {
                var limit = this.get('limit');
                this.incrementProperty('offset', limit);
            },
            
            previousPage: function() {
                var limit = this.get('limit');
                this.decrementProperty('offset', limit);    
            },
            
            lastPage: function() {
                var reportRowLength = this.get('reportRows.length'),
                    limit = this.get('limit'),
                    pages = parseInt(reportRowLength / limit);
                this.set('offset', (pages * limit));
            },

        },
        
        currentReportRows: function() {		
            var limit = this.get('limit'),
                offset = this.get('offset'),
                reportRows = this.get('reportRows');		
            return reportRows.slice(offset, offset+limit);		
        }.property('reportRows.@each', 'offset', 'limit'),    
        
        disablePreviousPage: function() {
            return (this.get('offset') === 0);
        }.property('offset'),
        
        disableNextPage: function() {
            var limit = this.get('limit'),
                length = this.get('reportRows.length'),
                offset = this.get('offset');
                return ((offset+limit) >= length);
        }.property('offset','limit','reportRows.length'),
        
        showPagination: function() {
            var length = this.get('reportRows.length'),
                limit = this.get('limit');
            return (length > limit);            
        }.property('reportRows.length')
        
    });

});
define('hospitalrun/controllers/application', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        needs: ['filesystem','pouchdb'],
        filesystem: Ember['default'].computed.alias('controllers.filesystem'),
        pouchdb: Ember['default'].computed.alias('controllers.pouchdb'),
        
        _setup: function() {
            var fileSystem = this.get('filesystem');
            fileSystem.setup();        
        }.on('init')
    });

});
define('hospitalrun/controllers/appointment-calendar', ['exports', 'ember', 'hospitalrun/views/appointment-event'], function (exports, Ember, AppointmentEvent) {

    'use strict';

    exports['default'] = Ember['default'].Calendar.CalendarController.extend({
        init: function() {
            //There probably is a better way to do this, but due to how ember-calendar is loading
            //the event view class, we need to add it to the window (Ember.lookup) so that ember-calendar
            //can find it.
            if (!Ember['default'].lookup.Hospitalrun.AppointmentEvent) {
                Ember['default'].lookup.Hospitalrun.AppointmentEvent = AppointmentEvent['default'];
            }
            this._super();
        },
        
        needs: 'appointments/index',
        
        parentModel: Ember['default'].computed.alias('controllers.appointments/index.model'),
        eventViewClass: 'Hospitalrun.AppointmentEvent',    
        states: ['day', 'week'], 
        initialState: 'week', 
        content: function () {
            var parentModel = this.get('parentModel');
            return parentModel.map(function(appointment) {
                var event = {
                    name: appointment.get('patient.displayName'),
                    appointment: appointment
                };
                if (appointment.get('allDay')) {
                    event.start = moment(appointment.get('startDate')).hour(8);
                    event.end = moment(appointment.get('startDate')).hour(9);
                } else {
                    event.start = moment(appointment.get('startDate'));
                    event.end = moment(appointment.get('endDate'));
                }
                return event;
            });
        }.property('controllers.appointments/index.model.@each.lastModified')
    });

});
define('hospitalrun/controllers/filesystem', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        needs: 'pouchdb',
        pouchdb: Ember['default'].computed.alias('controllers.pouchdb'),
        filer: null, //Injected via initializer
        fileSystemSize: (1024*1024*1024*8), //8GB max size for local filesystem;chrome only,
        
        _onError: function(e) {
            console.log('Filer filesystem error: '+e);
        },
        
        _downloadFiles: function() {
            this.store.find('photo').then(function(photos) {
                photos.forEach(function(photo) {
                    this.downloadIfNeeded(photo);
                }.bind(this));
            }.bind(this));
        },
        
        /**
         * Downloads the file from the server and saves it to the local filesystem.
         * @param {Object} fileRecord Record to use to download the file.
         */
        _downloadFileFromServer: function(fileRecord) {
            var fileName = Ember['default'].get(fileRecord, 'fileName'),
                pouchDbId = Ember['default'].get(fileRecord, 'id'),
                url = Ember['default'].get(fileRecord, 'url'),
                xhr = new XMLHttpRequest();
            if (!Ember['default'].isEmpty(url)) {
                xhr.open('GET', url, true);
                xhr.responseType = 'blob';
                xhr.onload = function() {  
                    var file = new Blob([xhr.response]);
                    this.addFile(file, fileName, pouchDbId);
                }.bind(this);
                xhr.send();
            }
        },    
        
        setup: function() {
            var size = this.get('fileSystemSize'),
                filer = new Filer();
            filer.init({persistent: true, size: size}, function() {            
                this.set('filer', filer);
            }.bind(this));     
        },

        /**
         * Add the specified file to the local filesystem
         * @param {File} file the file to save.
         * @param {String} path the file path to save the file to.
         * @param {String} pouchDbId database id that the file is associated with.
         * The pouch DB ids are prefixed with the type of record (eg patient record is 
         * prefixed by 'patient_'.
         * @returns {Promise} returns a Promise that resolves once the file is saved.
         */
        addFile: function(file, path, pouchDbId) {
            return new Ember['default'].RSVP.Promise(function(resolve, reject){
                var currentDate = new Date(),
                    filer = this.get('filer'),
                    fileName = file.name || currentDate.getTime(),
                    newFileName = path+fileName,
                    pouchdb = this.get('pouchdb');            
                if (path.indexOf('.') > -1) {
                    newFileName = path;
                    //If a full file path was provided, figure out the path and file name.
                    var pathParts = path.split('/');
                    fileName = pathParts.pop();
                    path = pathParts.join('/');
                    path += '/';
                }
                
                if (newFileName.indexOf('.') === -1) {
                    if (file.type) {
                        var typeParts = file.type.split('/');
                        newFileName += '.' + typeParts.pop();
                    } else {
                        //Default to png extension
                        newFileName += '.png';                    
                    }
                }
                
                this.fileExists(newFileName).then(function(exists) {
                    if (exists) {
                        //Make sure a unique name is used.
                        newFileName = path+currentDate.getTime()+fileName;
                    }
                    if (Ember['default'].isEmpty(filer)) {
                        reject('Local filesystem unavailable, please use Google Chrome browser');
                    }
                    if (Ember['default'].isEmpty(fileName) && !Ember['default'].isEmpty(file.type)) {
                        var typeParts = file.type.split('/');
                        if (typeParts.length > 1) {
                            newFileName += '.'+ typeParts[1];
                        }
                    }
                    filer.mkdir(path, false, function() {
                        filer.write(newFileName, {data: file, type: file.type}, function(fileEntry) {                    
                            pouchdb.saveFileLink(newFileName, pouchDbId);
                            resolve(fileEntry);
                        }, function(e) {
                            reject(e);
                        });
                    }, function(e) {
                        reject(e);
                    });
                }.bind(this));
            }.bind(this));    
        },
        
        /** 
         * Delete the specified file
         * @param {String} filePath path of file to delete.
         * @param {String} pouchId database id that the file is associated with.
         * The pouch DB ids are prefixed with the type of record (eg patient record is 
         * prefixed by 'patient_'.
         * @returns {Promise} returns a Promise that resolves once the file is deleted.
         */
        deleteFile: function(filePath, pouchDbId) {
            return new Ember['default'].RSVP.Promise(function(resolve, reject){
                var filer = this.get('filer'),
                    pouchdb = this.get('pouchdb');
                try {
                    filer.rm(filePath, function() {
                        pouchdb.removeFileLink(pouchDbId);
                        resolve();
                    }, reject);
                } catch(ex) {
                    reject(ex);
                }
            }.bind(this));
        },
            
        downloadIfNeeded: function(fileRecord) {
            var fileName = Ember['default'].get(fileRecord, 'fileName');
            this.fileExists(fileName).then(function(exists) {
                if (!exists) {
                    this._downloadFileFromServer(fileRecord);
                }
            }.bind(this));
        },
        
        /**
         * Determine if specified file exists
         * @param {String} the path of the file to determine if it exists.
         * @returns {Promise} returns a Promise that resolves with a boolean indicating
         * if the file exists.
         */    
        fileExists: function(filePath) {
            return new Ember['default'].RSVP.Promise(function(resolve){
                var filer = this.get('filer');
                filer.fs.root.getFile(filePath, {}, function() {
                    resolve(true);
                }, function() {
                    //if ls errs, file doesn't exist.
                    resolve(false);
                });        
            }.bind(this));
        },
        
        /**
         * Convert specified file to a data url
         * @param {File} file to convert
         * @returns {Promise} returns a Promise that resolves with the data url 
         * for the file.
         */
        fileToDataURL: function(file) {
            return new Ember['default'].RSVP.Promise(function(resolve){
                var reader = new FileReader();
                reader.onloadend = function (e) {
                    resolve(e.target.result);
                };
                reader.readAsDataURL(file);        
            });        
        },
        
        /**
         * Property to to determine if file system API is available.
         */
        isFileSystemEnabled: function() {
            var filer = this.get('filer');
            return !(Ember['default'].isEmpty(filer));
        }.property('filer'),
        
        
        /**
         * Get filesystem url from specified path.
         * @param {String} the path of the file to get the url for.
         * @returns {Promise} returns a Promise that resolves with the file system 
         * url or null if the file doesn't exist.
         */
        pathToFileSystemURL: function(path) {
            return new Ember['default'].RSVP.Promise(function(resolve){
                var filer = this.get('filer');
                filer.fs.root.getFile(path, {}, function(fileEntry) {
                    resolve(fileEntry.toURL());
                }, function() {
                    //if ls errs, just return empty, file doesn't exist.
                    resolve();
                });        
            }.bind(this));
        }
    });

});
define('hospitalrun/controllers/index', ['exports', 'ember', 'hospitalrun/mixins/user-session'], function (exports, Ember, UserSession) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend(UserSession['default'], {
        indexLinks: [
            'Appointments',
            'Labs',
            'Imaging',
            'Inventory',
            'Medication',
            'Patients',
            'Users'
        ],
        
        setupPermissions: function() {
            var permissions = this.get('defaultCapabilities');
            for(var capability in permissions) {
                if (this.currentUserCan(capability)) {
                    this.set('userCan_'+capability, true);
                }
            }
        }.on('init'),
        
        activeLinks: function() {
            var activeLinks = [],
                indexLinks = this.get('indexLinks');
            indexLinks.forEach(function(link) {
                var action = link.toLowerCase();
                if (this.currentUserCan(action)) {
                    activeLinks.push({
                        action: action,
                        text: link
                    });
                }
            }.bind(this));
            return activeLinks;
        }.property('indexLinks')

    });

});
define('hospitalrun/controllers/item-charge-controller', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend({
        canAddCharge: Ember['default'].computed.alias('parentController.canAddCharge'),    
        firstPricingType: Ember['default'].computed.alias('parentController.pricingTypeList.firstObject'),
        pricingList: Ember['default'].computed.alias('parentController.pricingList'),
        
        pricingListByType: function() {
            var parentController = this.get('parentController'),
                pricingList = this.get('pricingList'),
                pricingType = this.get('model'),
                rows = [];
            if (!Ember['default'].isEmpty(pricingList)) {
                pricingList = pricingList.filterBy('type', pricingType);
                pricingList = pricingList.map(function(pricingItem) {
                    var chargesForItem = parentController.findChargeForPricingItem(pricingItem);
                    if (chargesForItem) {
                        parentController.set(pricingItem._id, chargesForItem.get('quantity'));
                    }
                    return pricingItem;
                }.bind(this));
                var offset = 0,
                    length = pricingList.length;
                while (offset < length) {
                    rows.push(pricingList.slice(offset, offset+6));
                    offset += 6;
                }
                
            }
            return rows;
        }.property('model','pricingList'),
        
        activeClass: function() {
            var firstPricingType = this.get('firstPricingType'),
                pricingType = this.get('model');
            if (pricingType === firstPricingType) {
                return 'active';
            }        
        }.property(),
        
        tabId: function() {
            return this.get('model').toLowerCase().dasherize();
        }.property('model'),

        tabHref: function() {
            var tabId = this.get('tabId');
            return '#'+tabId;
        }.property('tabId')
    });

});
define('hospitalrun/controllers/login', ['exports', 'ember'], function (exports, Ember) {

     'use strict';

     var LoginController = Ember['default'].Controller.extend(Ember['default'].SimpleAuth.LoginControllerMixin, {
          authenticatorFactory: 'authenticators:custom',

          actions: {
              // display an error when logging in fails
              sessionAuthenticationFailed: function(message) {
                this.set('errorMessage', message);
              },

              // handle login success
              sessionAuthenticationSucceeded: function() {
                  this.set('errorMessage', "");
                  this.set('identification', "");
                  this.set('password', "");
                  this._super();
              }
          }
      }
     );

     exports['default'] = LoginController;

});
define('hospitalrun/controllers/navigation', ['exports', 'ember', 'hospitalrun/mixins/progress-dialog', 'hospitalrun/mixins/user-session', 'hospitalrun/mixins/navigation'], function (exports, Ember, ProgressDialog, UserSession, Navigation) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend(ProgressDialog['default'], UserSession['default'], Navigation['default'], {
        
        needs: 'application',
        allowSearch: false,
        currentSearchText: null,
        currentRouteName: Ember['default'].computed.alias('controllers.application.currentRouteName'),
        progressTitle: 'Searching',
        searchRoute: null,
        syncStatus: '',
        currentOpenNav: null,

        actions: {
            search: function() {
                if (this.allowSearch && this.searchRoute) {
                    var currentRouteName = this.get('currentRouteName'),
                        currentSearchText = this.get('currentSearchText'),
                        textToFind = this.get('searchText');
                    if (currentSearchText !== textToFind || currentRouteName.indexOf('.search') === -1) {
                        this.set('searchText','');
                        this.set('progressMessage','Searching for '+textToFind+'.  Please wait...');
                        this.showProgressModal();
                        this.transitionToRoute(this.searchRoute+"/"+textToFind);
                    }
                }
            },

            navAction: function(nav) {
                if (this.currentOpenNav && this.currentOpenNav.route !== nav.route) {
                    this.currentOpenNav.closeSubnav();
                }
                this.currentOpenNav = nav;
                this.transitionToRoute(nav.route);
                this.set('isShowingSettings', false);
            },

            toggleSettings: function() {
                this.toggleProperty('isShowingSettings');
            },
            
            closeSettings: function() {
                this.set('isShowingSettings', false);
            }

        }
    });

});
define('hospitalrun/controllers/pouchdb', ['exports', 'ember', 'hospitalrun/utils/pouch-oauth-xhr', 'hospitalrun/utils/pouch-views', 'hospitalrun/mixins/pouch-adapter-utils'], function (exports, Ember, createPouchOauthXHR, createPouchViews, PouchAdapterUtils) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend(PouchAdapterUtils['default'], {
        needs: ['filesystem','navigation'],
        
        filesystem: Ember['default'].computed.alias('controllers.filesystem'),
        isFileSystemEnabled: Ember['default'].computed.alias('controllers.filesystem.isFileSystemEnabled'),
        mainDB: null, //Server DB
        configDB: null, //Initializer will set this up.
        
        /**
         * Get the file link information for the specifed recordId.
         * @param {String} recordId the id of the record to the find the file link for.
         * @returns {Promise} returns a Promise that resolves once the file link object is retrieved.  
         * The promise resolves with the file link object if found;otherwise it resolves with null.     
         */
        _getFileLink: function(recordId) {
            return new Ember['default'].RSVP.Promise(function(resolve){
                var configDB = this.get('configDB');
                configDB.get('file-link_'+recordId, function(err, doc){
                    resolve(doc);
                });
            }.bind(this));
        },
        
        /**
         * Handler called when handler to sever main DB is created.
         */
        _gotServerMainDB: function(err, db) {
            if (err) {
                console.log("Error creating main pouchDB",err);
                throw err;
            } else {
                this.set('mainDB', db);
                //this._setupSync();
            }
        },
        
        getDocFromMainDB: function(docId) {
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                var mainDB = this.get('mainDB');
                mainDB.get(docId, function(err, doc) {
                    if (err) {
                        this._pouchError(reject)(err);
                    } else {
                        resolve(doc);
                    }                 
                }.bind(this));
            }.bind(this));
        },

        removeFileLink: function(pouchDbId) {
             var configDB = this.get('configDB');
            this._getFileLink(pouchDbId).then(function(fileLink) {
                configDB.remove(fileLink);
            });
        },
        
        saveFileLink: function(newFileName, recordId) {
            var configDB = this.get('configDB');
            configDB.put({
                fileName: newFileName
            }, 'file-link_'+recordId);
        },
        
        queryMainDB: function(queryParams, mapReduce) {
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                var mainDB = this.get('mainDB');
                if (mapReduce) { 
                    mainDB.query(mapReduce, queryParams, function(err, response) {
                        if (err) {
                            this._pouchError(reject)(err);
                        } else {
                            resolve(response);
                        }                
                    }.bind(this));
                } else {
                    mainDB.allDocs(queryParams, function(err, response) {
                        if (err) {
                            this._pouchError(reject)(err);
                        } else {
                            resolve(response);
                        }                
                    }.bind(this));
                }
            }.bind(this));
        },
        
        setupMainDB: function(configs) {
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                var pouchOptions = {};
                if (configs.config_use_google_auth) {
                    //If we don't have the proper credentials don't sync.
                    if (Ember['default'].isEmpty(configs.config_consumer_key) || 
                        Ember['default'].isEmpty(configs.config_consumer_secret) ||
                        Ember['default'].isEmpty(configs.config_oauth_token) || 
                        Ember['default'].isEmpty(configs.config_token_secret)) {
                        reject();
                    }
                    pouchOptions.ajax = {
                        xhr: createPouchOauthXHR['default'](configs),
                        timeout: 30000
                    };
                }
                var dbUrl =  document.location.protocol+'//'+document.location.host+'/db/main';
                new PouchDB(dbUrl, pouchOptions, function(err, db) {                
                    if (err) {
                        Ember['default'].run.later(this, function() {
                            this.get('session').invalidate();
                        });
                        reject(err);            
                    } else {
                        createPouchViews['default'](db);
                        this._gotServerMainDB(err, db);
                        this.get('applicationAdapter').set('db', db);
                        resolve({
                            mainDB: db, 
                            //localDB: localMainDB
                        });
                    }
                }.bind(this));
            }.bind(this));
        }
    });

});
define('hospitalrun/dialog/controller', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend({
        showUpdateButton: true,
        isUpdateDisabled: false,

        actions: {
            cancel: function() {
                this.send('closeModal');
            },
            
            confirm: function() {
                var confirmAction = this.getWithDefault('confirmAction', 'confirm');
                this.send(confirmAction, this.get('model'));
                this.send('closeModal');
            }, 
            
            ok: function() {
                var okAction = this.get('okAction');
                if (!Ember['default'].isEmpty(okAction)) {
                    this.send(okAction, this.get('model'));
                }
                this.send('closeModal');
            }
        }
    });

});
define('hospitalrun/dialog/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <div class=\"progress\">\n        <div class=\"progress-bar progress-bar-striped active\" role=\"progressbar\" ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'aria-valuenow': ("progressBarValue")
    },hashTypes:{'aria-valuenow': "STRING"},hashContexts:{'aria-valuenow': depth0},contexts:[],types:[],data:data})));
    data.buffer.push("\n             aria-valuemin=\"0\" aria-valuemax=\"100\" ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'style': ("progressBarStyle")
    },hashTypes:{'style': "STRING"},hashContexts:{'style': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(">\n            <span class=\"sr-only\">");
    stack1 = helpers._triageMustache.call(depth0, "progressBarValue", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("% Complete</span>\n        </div>\n    </div>\n");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "showProgress", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    stack1 = helpers._triageMustache.call(depth0, "message", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    return buffer;
    
  });

});
define('hospitalrun/dialog/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/finishgauth/route', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend({    
        oauth_config_keys: [
            'consumer_key',
            'consumer_secret',
            'oauth_token',
            'token_secret'
        ],
        
        _get_oauth_configs: function() {
            return new Ember['default'].RSVP.Promise(function(resolve, reject){
                var configKeys = this.get('oauth_config_keys');
                this.store.find('config',{exactKeys: configKeys}).then(function(records) {
                    Ember['default'].run(null, resolve, records);
                },function(error){
                    Ember['default'].run(null, reject, error);
                });
            }.bind(this));
        },
        
        _save_oauth_config: function(queryParams) {                        
            this._get_oauth_configs().then(function(records) {
                var configKeys = this.get('oauth_config_keys');
                configKeys.forEach(function(key) {
                    var configRecord,
                        configValue;
                    switch (key) {
                        case 'consumer_key': {
                            configValue = queryParams.k;
                            break;
                        }
                        case 'consumer_secret': {
                            configValue = queryParams.s1;
                            break;
                        }
                        case 'oauth_token': {
                            configValue = queryParams.t;
                            break;
                        }
                        case 'token_secret': {
                            configValue = queryParams.s2;
                            break;
                        }
                    }

                    configRecord = records.findBy('id', key);
                    if (!configRecord) {
                        configRecord = this.store.createRecord('config', {
                            id: key,
                            value: configValue
                        });
                    } else {
                        configRecord.set('value', configValue);
                    }
                    configRecord.save();
                }.bind(this));
            }.bind(this));
        },    

        model: function(params) {
            if (params.k && params.s1 && params.s2 && params.t) {
                this.get('session').authenticate('authenticators:custom', {
                    google_auth: true,
                    params: params,
                });
                this._save_oauth_config(params);
                this.controllerFor('pouchdb').setupMainDB({
                    config_consumer_key: params.k,
                    config_consumer_secret: params.s1,
                    config_oauth_token: params.t,
                    config_token_secret:  params.s2,
                    config_use_google_auth: true
                });
            } 
        }
    });

});
define('hospitalrun/helpers/date-format', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Handlebars.makeBoundHelper(function(date, options) {
        if (!Ember['default'].isEmpty(date)) {
            var dateFormat = 'l';
            if (options && options.hash.format) {
                dateFormat = options.hash.format;
            }
            return moment(date).format(dateFormat);
        }
    });

});
define('hospitalrun/helpers/number-format', ['exports', 'ember', 'hospitalrun/mixins/number-format'], function (exports, Ember, NumberFormat) {

    'use strict';

    var NumberHandler = Ember['default'].Object.extend(NumberFormat['default']);
    exports['default'] = Ember['default'].Handlebars.makeBoundHelper(function(number) {
        var numberHandler = new NumberHandler();     
        return numberHandler._numberFormat(number);
    });

});
define('hospitalrun/imaging/charge/controller', ['exports', 'hospitalrun/procedures/charge/controller', 'ember'], function (exports, ProcedureChargeController, Ember) {

    'use strict';

    exports['default'] = ProcedureChargeController['default'].extend({
        needs: ['imaging/edit'],
        cancelAction: 'closeModal',
        newPricingItem: false,
        requestingController: Ember['default'].computed.alias('controllers.imaging/edit'),
        pricingList: Ember['default'].computed.alias('controllers.imaging/edit.chargesPricingList')    
    });

});
define('hospitalrun/imaging/charge/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "procedures/charge", options) : helperMissing.call(depth0, "partial", "procedures/charge", options))));
    
  });

});
define('hospitalrun/imaging/charge/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/imaging/completed/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, AbstractPagedController) {

    'use strict';

    exports['default'] = AbstractPagedController['default'].extend({
        startKey: [],
        showActions: false
    });

});
define('hospitalrun/imaging/completed/route', ['exports', 'hospitalrun/imaging/index/route'], function (exports, ImagingIndexRoute) {

    'use strict';

    exports['default'] = ImagingIndexRoute['default'].extend({
        pageTitle: 'Completed Imaging',
        searchStatus: 'Completed'
    });

});
define('hospitalrun/imaging/completed/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <table class=\"table\">\n        <tr class=\"table-header\">\n            <th>Date Requested</th>\n            <th>Date Completed</th>\n            <th>Patient</th>\n            <th>Imaging Type</th>\n            <th>Results</th>\n            <th>Notes</th>\n        </tr>\n            ");
    stack1 = helpers.each.call(depth0, {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[],types:[],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </table>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                <tr>\n                    <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "requestedDate", options) : helperMissing.call(depth0, "date-format", "requestedDate", options))));
    data.buffer.push("</td>\n                    <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "imagingDate", options) : helperMissing.call(depth0, "date-format", "imagingDate", options))));
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "patient.displayName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "imagingType.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "result", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "notes", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                </tr>\n            ");
    return buffer;
    }

  function program4(depth0,data) {
    
    
    data.buffer.push("\n    <div class=\"alert alert-info\">\n        <p>No completed items found.</p>\n    </div>\n");
    }

    stack1 = helpers['if'].call(depth0, "model", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/imaging/completed/view', ['exports', 'hospitalrun/views/item-listing'], function (exports, ItemListingView) {

	'use strict';

	exports['default'] = ItemListingView['default'].extend();

});
define('hospitalrun/imaging/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'hospitalrun/mixins/patient-submodule'], function (exports, AbstractDeleteController, PatientSubmodule) {

    'use strict';

    exports['default'] = AbstractDeleteController['default'].extend(PatientSubmodule['default'], {
        title: 'Delete Request',
        
        actions: {
            delete: function() {
                this.removeChildFromVisit(this.get('model'), 'imaging').then(function() {
                    this.get('model').destroyRecord().then(function() {
                        this.send('closeModal');
                    }.bind(this));
                }.bind(this));
            }
        }
    });

});
define('hospitalrun/imaging/delete/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    


    data.buffer.push("<div class=\"alert alert-danger\">\n    <span class=\"glyphicon glyphicon-warning-sign\"></span> \n    Are you sure you wish to delete this imaging request?\n</div>");
    
  });

});
define('hospitalrun/imaging/delete/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/imaging/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/charge-actions', 'ember', 'hospitalrun/mixins/patient-submodule'], function (exports, AbstractEditController, ChargeActions, Ember, PatientSubmodule) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend(ChargeActions['default'], PatientSubmodule['default'], {
        needs: ['imaging','pouchdb'],
        chargePricingCategory: 'Imaging',
        chargeRoute: 'imaging.charge',
        
        canComplete: function() {
            var imagingTypeName = this.get('selectedImagingType');
            if (Ember['default'].isArray(imagingTypeName) && imagingTypeName.length >1) {
                return false;
            } else {
                return this.currentUserCan('complete_imaging');
            }
        }.property('selectedImagingType.[]'),
        
        actions: {
            completeImaging: function() {
                this.set('status', 'Completed');
                this.get('model').validate();
                if (this.get('isValid')) {
                    this.set('imagingDate', new Date());
                    this.send('update');
                }
            },

            /**
             * Save the imaging request(s), creating multiples when user selects multiple imaging tests.
             */
            update: function() {
                if (this.get('isNew')) {
                    var newImaging = this.get('model'),
                        selectedImagingType = this.get('selectedImagingType');
                        if (Ember['default'].isEmpty(this.get('status'))) {
                            this.set('status', 'Requested');
                        }
                        this.set('requestedBy', newImaging.getUserName());
                        this.set('requestedDate', new Date());
                    if (Ember['default'].isEmpty(selectedImagingType)) {
                        this.saveNewPricing(this.get('imagingTypeName'), 'Imaging','imagingType').then(function() {
                            this.addChildToVisit(newImaging, 'imaging', 'Imaging').then(function() {
                                this.saveModel();
                            }.bind(this));
                        }.bind(this));
                    } else {
                        this.getSelectedPricing('selectedImagingType').then(function(pricingRecords) {
                            if (Ember['default'].isArray(pricingRecords)) {
                                this.createMultipleRequests(pricingRecords, 'imagingType','imaging', 'Imaging');
                            } else {
                                this.set('imagingType', pricingRecords);
                                this.addChildToVisit(newImaging, 'imaging', 'Imaging').then(function() {
                                    this.saveModel();
                                }.bind(this));
                            }
                        }.bind(this));
                    }
                } else {
                   this.saveModel();
                }
            } 
        },
        
        additionalButtons: function() {
            var canComplete = this.get('canComplete'),
                isValid = this.get('isValid');
            if (isValid && canComplete) {
                return [{
                    buttonAction: 'completeImaging',
                    buttonIcon: 'glyphicon glyphicon-ok',
                    class: 'btn btn-primary on-white',
                    buttonText: 'Complete'
                }];
            }
        }.property('canComplete', 'isValid'),
        
        lookupListsToUpdate: [{
            name: 'radiologistList',
            property: 'radiologist',
            id: 'radiologists'
        }],
        
        pricingTypeForObjectType: 'Imaging Procedure',
        pricingTypes: Ember['default'].computed.alias('controllers.imaging.imagingPricingTypes'),
        
        pricingList: null, //This gets filled in by the route
        
        radiologistList: Ember['default'].computed.alias('controllers.imaging.radiologistList'),
        
        updateCapability: 'add_imaging',    
        
        afterUpdate: function(saveResponse, multipleRecords) {
            this.updateLookupLists();
            var afterDialogAction,
                alertTitle,
                alertMessage;
            if (this.get('status') === 'Completed') {
                alertTitle = 'Imaging Request Completed';
                alertMessage = 'The imaging request has been completed.';
            } else {
                alertTitle = 'Imaging Request Saved';
                alertMessage = 'The imaging request has been saved.';
            }
            if (multipleRecords) {
                afterDialogAction = 'allItems';
            }
            this.saveVisitIfNeeded(alertTitle, alertMessage, afterDialogAction);
            this.set('selectPatient', false);
        }
        
    });

});
define('hospitalrun/imaging/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'hospitalrun/mixins/charge-route', 'ember', 'hospitalrun/mixins/patient-list-route'], function (exports, AbstractEditRoute, ChargeRoute, Ember, PatientListRoute) {

    'use strict';

    exports['default'] = AbstractEditRoute['default'].extend(ChargeRoute['default'], PatientListRoute['default'], {
        editTitle: 'Edit Imaging Request',
        modelName: 'imaging',
        newTitle: 'New Imaging Request',
        pricingCategory: 'Imaging',
        
        getNewData: function() {
            return Ember['default'].RSVP.resolve({
                selectPatient: true,
                requestDate: moment().startOf('day').toDate()
            });
        }
    });

});
define('hospitalrun/imaging/edit/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    ");
    stack1 = helpers['if'].call(depth0, "selectPatient", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("    \n    ");
    stack1 = helpers['if'].call(depth0, "isNew", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    ");
    stack1 = helpers['if'].call(depth0, "canComplete", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-text'] || (depth0 && depth0['em-text']),options={hash:{
      'property': ("notes"),
      'label': ("Notes"),
      'rows': (3)
    },hashTypes:{'property': "STRING",'label': "STRING",'rows': "INTEGER"},hashContexts:{'property': depth0,'label': depth0,'rows': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-text", options))));
    data.buffer.push("\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['patient-typeahead'] || (depth0 && depth0['patient-typeahead']),options={hash:{
      'property': ("patientTypeAhead"),
      'label': ("Patient"),
      'content': ("patientList"),
      'selection': ("selectedPatient"),
      'class': ("required")
    },hashTypes:{'property': "STRING",'label': "STRING",'content': "ID",'selection': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'content': depth0,'selection': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "patient-typeahead", options))));
    data.buffer.push("\n    ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['patient-summary'] || (depth0 && depth0['patient-summary']),options={hash:{
      'patient': ("patient"),
      'returnTo': ("imaging.edit"),
      'returnToContext': ("id"),
      'disablePatientLink': ("isNew")
    },hashTypes:{'patient': "ID",'returnTo': "STRING",'returnToContext': "ID",'disablePatientLink': "ID"},hashContexts:{'patient': depth0,'returnTo': depth0,'returnToContext': depth0,'disablePatientLink': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "patient-summary", options))));
    data.buffer.push("\n    ");
    return buffer;
    }

  function program6(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        <div class=\"row\">\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-xs-3 required"),
      'label': ("Visit"),
      'property': ("visit"),
      'content': ("patientVisits"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content.visitDescription"),
      'prompt': ("--Add New Visit--"),
      'selected': ("visit")
    },hashTypes:{'class': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'prompt': "STRING",'selected': "ID"},hashContexts:{'class': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'prompt': depth0,'selected': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n        </div>\n        ");
    data.buffer.push(escapeExpression((helper = helpers['checkbox-or-typeahead'] || (depth0 && depth0['checkbox-or-typeahead']),options={hash:{
      'property': ("imagingTypeName"),
      'label': ("Imaging Type"),
      'list': ("objectTypeList"),
      'selection': ("selectedImagingType"),
      'optionLabelPath': ("content.name"),
      'typeAheadType': ("pricing"),
      'class': ("required"),
      'prompt': (" "),
      'model': ("model")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID",'optionLabelPath': "STRING",'typeAheadType': "STRING",'class': "STRING",'prompt': "STRING",'model': "ID"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0,'optionLabelPath': depth0,'typeAheadType': depth0,'class': depth0,'prompt': depth0,'model': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "checkbox-or-typeahead", options))));
    data.buffer.push("\n    ");
    return buffer;
    }

  function program8(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n        <div class=\"row\">\n            <div class=\"form-group col-xs-3\">\n                <label>Visit</label>\n                <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "visit.visitDate", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n            </div>\n            <div class=\"form-group col-xs-9\">\n                <label>Imaging Type</label>\n                <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "imagingType.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n            </div>\n        </div>\n    ");
    return buffer;
    }

  function program10(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("radiologist"),
      'label': ("Radiologist"),
      'list': ("radiologistList"),
      'prompt': (" ")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'prompt': "STRING"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'prompt': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("result"),
      'label': ("Result")
    },hashTypes:{'property': "STRING",'label': "STRING"},hashContexts:{'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    ");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/imaging/edit/view', ['exports', 'hospitalrun/views/panel'], function (exports, PanelView) {

	'use strict';

	exports['default'] = PanelView['default'].extend();

});
define('hospitalrun/imaging/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, AbstractPagedController, UserSession) {

    'use strict';

    exports['default'] = AbstractPagedController['default'].extend(UserSession['default'], {
        startKey: [],
        addPermission: 'add_imaging'
    });

});
define('hospitalrun/imaging/index/route', ['exports', 'hospitalrun/routes/abstract-index-route'], function (exports, AbstractIndexRoute) {

    'use strict';

    exports['default'] = AbstractIndexRoute['default'].extend({
        modelName: 'imaging',
        pageTitle: 'Imaging Requests',
        searchStatus: 'Requested',
        
        _getStartKeyFromItem: function(item) {
            var imagingDateAsTime = item.get('imagingDateAsTime'),
                keyPrefix = this.get('keyPrefix'),
                requestedDateAsTime = item.get('requestedDateAsTime'),
                searchStatus = this.get('searchStatus');
            return [searchStatus, requestedDateAsTime, imagingDateAsTime, keyPrefix+item.get('id')];
        },
        
        _modelQueryParams: function() {
            var keyPrefix = this.get('keyPrefix'),
                maxValue = this.get('maxValue'),
                searchStatus = this.get('searchStatus');
            return {
                options: {
                    startkey: [searchStatus, null, null, keyPrefix],
                    endkey: [searchStatus, maxValue, maxValue, keyPrefix+maxValue]
                },
                mapReduce: 'imaging_by_status'
            };
        },
        
        actions: {
            completeItem: function(item) {
                item.set('isCompleting', true);
                this.transitionTo('imaging.edit', item);
            }, 
        }
    });

});
define('hospitalrun/imaging/index/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <table class=\"table\">\n        <tr class=\"table-header\">\n            <th>Date Requested</th>\n            <th>Patient</th>\n            <th>Imaging Type</th>\n            <th>Notes</th>\n            ");
    stack1 = helpers['if'].call(depth0, "showActions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        </tr>\n        ");
    stack1 = helpers['with'].call(depth0, "", "as", "parentController", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </table>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    
    data.buffer.push("\n                <th>Actions</th>\n            ");
    }

  function program4(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            ");
    stack1 = helpers.each.call(depth0, {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[],types:[],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    return buffer;
    }
  function program5(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                <tr ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editItem", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                    <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "requestedDate", options) : helperMissing.call(depth0, "date-format", "requestedDate", options))));
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "patient.displayName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "imagingType.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "notes", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                     ");
    stack1 = helpers['if'].call(depth0, "parentController.showActions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </tr>\n            ");
    return buffer;
    }
  function program6(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                        <td>\n                            ");
    stack1 = helpers['if'].call(depth0, "parentController.canEdit", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </td>\n                    ");
    return buffer;
    }
  function program7(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                <button class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editItem", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                            ");
    return buffer;
    }

  function program9(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <div class=\"alert alert-info\">\n        <p>No items found. ");
    stack1 = helpers['if'].call(depth0, "canAdd", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n    </div>\n");
    return buffer;
    }
  function program10(depth0,data) {
    
    var buffer = '';
    data.buffer.push(" <a href=\"#\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "newItem", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">Create a new record?</a>");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "hasRecords", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(9, program9, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/imaging/index/view', ['exports', 'hospitalrun/views/item-listing'], function (exports, ItemListingView) {

	'use strict';

	exports['default'] = ItemListingView['default'].extend();

});
define('hospitalrun/imaging/item-controller/controller', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend({
        actions: {
            editImaging: function(imaging) {
                if (this.get('canEdit')) {
                    this.parentController.send('editImaging', imaging);
                }
            }
        },
        
        canEdit: function() {
            var status = this.get('status');
            return (status === 'Requested');
        }.property('status')
    });

});
define('hospitalrun/imaging/route', ['exports', 'hospitalrun/routes/abstract-module-route'], function (exports, AbstractModuleRoute) {

    'use strict';

    exports['default'] = AbstractModuleRoute['default'].extend({
        addCapability: 'add_imaging',
        additionalModels: [{ 
            name: 'imagingPricingTypes',
            findArgs: ['lookup','imaging_pricing_types']
        }, {
            name: 'radiologistList',
            findArgs: ['lookup','radiologists'],
        }],
        allowSearch: false,
        moduleName: 'imaging',
        newButtonText: '+ new imaging',
        sectionTitle: 'Imaging',
        subActions: [{
            text: 'Requests',
            linkTo: 'imaging.index'
        }, {
            text: 'Completed',
            linkTo: 'imaging.completed'
        }],

    });

});
define('hospitalrun/initializers/authentication', ['exports', 'hospitalrun/utils/custom-auth', 'hospitalrun/utils/couch-serializer', 'ember'], function (exports, CustomAuth, CouchSerializer, Ember) {

    'use strict';

    exports['default'] = {
        name: 'authentication',
        
        initialize: function(container, application) {
            container.register('authenticators:custom', CustomAuth['default']);
            application.register('serializer:couchdb', CouchSerializer['default']);        
            Ember['default'].SimpleAuth.setup(container, application);
            container.injection('adapter', 'session', 'ember-simple-auth:session:current');
        }    
    };

});
define('hospitalrun/initializers/configdb', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    /* global List */
    exports['default'] = {
        after: 'authentication',
        name: 'configdb',    
        
        initialize: function(container, application) {
            var configDB;
            
            function _initCouchDB() {
                return new Ember['default'].RSVP.Promise(function(resolve, reject){
                    PouchDB.plugin(List);
                    configDB = new PouchDB('config', function(err, db){
                        if(err){
                            Ember['default'].run(null, reject, err);
                        } else {
                            var dbUrl =  document.location.protocol+'//'+document.location.host+'/db/';
                            var remoteDB = dbUrl + 'config';
                            db.replicate.from(remoteDB, {
                                complete: function() {
                                    Ember['default'].run(null, resolve, {success:true});                    
                                }
                            }, function(err) {
                                Ember['default'].run(null, resolve, {
                                    error: err,
                                    success: false                
                                });            
                            });                        
                        }
                    });                
                });
            }
            
            application.deferReadiness();
            _initCouchDB().then(function() {
                application.register('couchdb:configdb', configDB, {instantiate: false});
                application.inject('controller:pouchdb', 'configDB', 'couchdb:configdb');
                var customAuthenticator = container.lookup('authenticators:custom'),
                    pouchDBController = container.lookup('controller:pouchdb'),
                    applicationAdapter = container.lookup('adapter:application');
                customAuthenticator.set('pouchDBController', pouchDBController);
                pouchDBController.set('applicationAdapter', applicationAdapter);
                var options = {
                    include_docs: true,
                    keys: [
                        'config_consumer_key',
                        'config_consumer_secret',
                        'config_oauth_token',
                        'config_token_secret',
                        'config_use_google_auth'
                    ]
                };
                
                configDB.allDocs(options, function(err, response) { 
                    if (err) {
                        console.log('Could not get configDB configs:', err);
                        throw err;
                    } else {
                        var configs = {};
                        for (var i=0;i<response.rows.length;i++) {
                            if (!response.rows[i].error) {
                                configs[response.rows[i].id] = response.rows[i].doc.value;
                            }
                        }                    
                        pouchDBController.setupMainDB(configs).then(function() {                        
                            application.advanceReadiness();
                        }, function() {
                            application.advanceReadiness();
                        });                    
                    }
                }.bind(this));                                    
            });
        }
    };

});
define('hospitalrun/initializers/export-application-global', ['exports', 'ember', 'hospitalrun/config/environment'], function (exports, Ember, config) {

  'use strict';

  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (config['default'].exportApplicationGlobal !== false) {
      var value = config['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = Ember['default'].String.classify(config['default'].modulePrefix);
      }

      if (!window[globalName]) {
        window[globalName] = application;

        application.reopen({
          willDestroy: function(){
            this._super.apply(this, arguments);
            delete window[globalName];
          }
        });
      }
    }
  };

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };

});
define('hospitalrun/initializers/linkto-data-attrs', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = {
        name: 'linkto-data-attr',
        
        initialize: function() {
            Ember['default'].LinkView.reopen({
                init: function() {
                    this._super();
                    var self = this;
                    Ember['default'].keys(this).forEach(function(key) {
                        if (key.substr(0, 5) === 'data-') {
                            self.get('attributeBindings').pushObject(key);
                        }
                    });
                }
            });
        }
    };

});
define('hospitalrun/inventory/adjust/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/inventory-adjustment-types', 'ember'], function (exports, AbstractEditController, AdjustmentTypes, Ember) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend(AdjustmentTypes['default'], {
        needs: 'inventory',    
            
        expenseAccountList: Ember['default'].computed.alias('controllers.inventory.expenseAccountList'),

        title: 'Adjustment',
        
        transactionTypeChanged: function() {
            Ember['default'].run.once(this, function(){
                this.get('model').validate();
            });
        }.observes('transactionType'),
        
        updateButtonText: function() {
            return this.get('transactionType');
        }.property('transactionType'),
        
        updateButtonAction: 'adjust',
        
        updateCapability: 'adjust_inventory_location',
        
        actions: {
            cancel: function() {
                this.send('closeModal');
            },
            
            adjust: function() {
                this.send('adjustItems', this.get('model'), true);
            }
        }
    });

});
define('hospitalrun/inventory/adjust/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    <div class=\"form-group\">\n        <label class=\"control-label\">Item</label>\n        <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "adjustmentItem.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>        \n    </div>\n    <div class=\"form-group\">\n        <label class=\"control-label\">Adjustment For</label>\n        <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "locationName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>        \n    </div>\n    <div class=\"form-group\">\n        <label class=\"control-label\">Current Quantity</label>\n        <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "quantity", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n    </div>\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-sm-4"),
      'label': ("Adjustment Type"),
      'property': ("transactionType"),
      'content': ("adjustmentTypes"),
      'optionValuePath': ("content.type"),
      'optionLabelPath': ("content.name")
    },hashTypes:{'class': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING"},hashContexts:{'class': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("adjustmentQuantity"),
      'label': ("Quantity"),
      'class': ("col-sm-3")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    </div>\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-text'] || (depth0 && depth0['em-text']),options={hash:{
      'label': ("Reason"),
      'property': ("reason"),
      'rows': (3)
    },hashTypes:{'label': "STRING",'property': "STRING",'rows': "INTEGER"},hashContexts:{'label': depth0,'property': depth0,'rows': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-text", options))));
    data.buffer.push("\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("dateCompleted"),
      'label': ("Adjustment Date"),
      'class': ("col-sm-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("expenseAccount"),
      'label': ("Expense To"),
      'list': ("expenseAccountList"),
      'selection': ("expenseAccount"),
      'class': ("col-sm-8")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n    </div>\n");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/inventory/adjust/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/inventory/barcode/controller', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend({
        barcodeUri: function() {
            var id = this.get('id'),
                name = this.get('name');
            return Ember['default'].$(document).JsBarcode(id,{
                width:1,
                height:20,
                fontSize: 10,
                displayValue: name,
                returnUri: true
            });
        }.property('id', 'name'),
        
        printers: function() {    
            return dymo.label.framework.getTapePrinters();
        }.property(),
        
        havePrinters: function() {
            var printers = this.get('printers');
            if (printers.length > 0) {
                return true;
            } else {
                return false;
            }
        }.property('printers'),
        
        singlePrinter: function() {
            var printers = this.get('printers');
            if (printers.length === 1) {
                return true;
            } else {
                return false;
            }
        }.property('printers'),

        
        actions: {
            print: function() {
                var barcodeUri = this.get('barcodeUri'),
                    selectedPrinter = this.get('selectedPrinter');
                if (!selectedPrinter) {
                    selectedPrinter = this.get('printers')[0].name;
                }
                Ember['default'].$.get("/dymo/BarcodeAsImage.label", function(labelXml) {
                    var barcodeAsImageLabel = dymo.label.framework.openLabelXml(labelXml);
                        var pngBase64 = barcodeUri.substr('data:image/png;base64,'.length);
                        barcodeAsImageLabel.setObjectText('Image', pngBase64);
                        barcodeAsImageLabel.print(selectedPrinter);
                }, "text");            
            }
        }

    });

});
define('hospitalrun/inventory/barcode/route', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend({
        model: function(params) {
            return this.store.find('inventory', params.inventory_id);
        }

    });

});
define('hospitalrun/inventory/barcode/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n<div class=\"panel panel-primary\">\n    <div class=\"panel-heading\">\n        <h3 class=\"panel-title\">Print Barcode</h3>\n    </div>    \n    <div class=\"panel-body\">\n        <div class=\"form-group\">            \n            ");
    stack1 = helpers.unless.call(depth0, "singlePrinter", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        </div>\n        <button class=\"btn btn-primary\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "print", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\" glyphicon glyphicon-print\"></span> Print</button>\n    </div>\n</div>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '';
    data.buffer.push("    \n                <label for=\"printerSelect\">Printer</label>\n                ");
    data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
      'viewName': ("select"),
      'content': ("printers"),
      'optionLabelPath': ("content.name"),
      'optionValuePath': ("content.name"),
      'value': ("selectedPrinter"),
      'id': ("printerSelect")
    },hashTypes:{'viewName': "STRING",'content': "ID",'optionLabelPath': "STRING",'optionValuePath': "STRING",'value': "ID",'id': "STRING"},hashContexts:{'viewName': depth0,'content': depth0,'optionLabelPath': depth0,'optionValuePath': depth0,'value': depth0,'id': depth0},contexts:[depth0],types:["ID"],data:data})));
    data.buffer.push("\n            ");
    return buffer;
    }

    data.buffer.push("<div class=\"panel panel-default\">\n  <div class=\"panel-body\">\n    <img ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'src': ("barcodeUri")
    },hashTypes:{'src': "ID"},hashContexts:{'src': depth0},contexts:[],types:[],data:data})));
    data.buffer.push("></img>\n  </div>\n</div>\n\n");
    stack1 = helpers['if'].call(depth0, "havePrinters", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n\n");
    return buffer;
    
  });

});
define('hospitalrun/inventory/batch/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/inventory-id', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/inventory-selection', 'ember'], function (exports, AbstractEditController, InventoryId, InventoryLocations, InventorySelection, Ember) {

   'use strict';

   exports['default'] = AbstractEditController['default'].extend(InventoryId['default'], InventoryLocations['default'], InventorySelection['default'], {    
       needs: ['inventory','pouchdb'],
      
       warehouseList: Ember['default'].computed.alias('controllers.inventory.warehouseList'),
       aisleLocationList: Ember['default'].computed.alias('controllers.inventory.aisleLocationList'),
       vendorList: Ember['default'].computed.alias('controllers.inventory.vendorList'),
       purchaseAttributes: [
           'expirationDate',
           'inventoryItem',
           'lotNumber',
           'purchaseCost',
           'quantity',
           'vendorItemNo'
       ],
       
       inventoryList: function() {
           var inventoryItems = this.get('inventoryItems');
           if (!Ember['default'].isEmpty(inventoryItems)) {
               var mappedItems = inventoryItems.map(function(item) {
                   return item.doc;
               });
               return mappedItems;
           }
       }.property('inventoryItems.[]'),
       
       lookupListsToUpdate: [{
           name: 'aisleLocationList', //Name of property containing lookup list
           property: 'aisleLocation', //Corresponding property on model that potentially contains a new value to add to the list
           id: 'aisle_location_list' //Id of the lookup list to update
       }, {
           name: 'vendorList', //Name of property containing lookup list
           property: 'vendor', //Corresponding property on model that potentially contains a new value to add to the list
           id: 'vendor_list' //Id of the lookup list to update
       }, {
           name: 'warehouseList', //Name of property containing lookup list
           property: 'location', //Corresponding property on model that potentially contains a new value to add to the list
           id: 'warehouse_list' //Id of the lookup list to update
       }],
       
       showDistributionUnit: function() {
           return this._haveValidInventoryItem();
       }.property('inventoryItemTypeAhead','inventoryItem'),
       
       showInvoiceItems: function() {
           var invoiceItems = this.get('invoiceItems');
           return !Ember['default'].isEmpty(invoiceItems);
       }.property('invoiceItems.@each'),
       
       totalReceived: function() {
           var invoiceItems = this.get('invoiceItems'),
               total = 0;
           if (!Ember['default'].isEmpty('invoiceItems')) {
               total = invoiceItems.reduce(function(previousValue, item) {
                   return previousValue + Number(item.get('purchaseCost'));
               }, total);
           }
           var purchaseCost = this.get('purchaseCost');
           if (this.get('isValid') && !Ember['default'].isEmpty(purchaseCost)) {
               total += Number(purchaseCost);
           }
           return total;
       }.property('invoiceItems@each.purchaseCost', 'isValid', 'purchaseCost'),
           
       updateButtonText: 'Save',
       
       updateCapability: 'add_inventory_item',
       
       _addNewInventoryItem: function() {        
           this.generateId().then(function(inventoryId) {
               var inventoryItem = this.store.createRecord('inventory', {
                   id: inventoryId,
                   name: this.get('inventoryItemTypeAhead'),
                   quantity: 0, //Needed for validation purposes
                   skipSavePurchase: true
               });
               this.send('openModal', 'inventory.quick-add', inventoryItem);        
           }.bind(this));
       },
       
       _addInventoryItem: function() {
           var model = this.get('model'),                
               inventoryItemTypeAhead = this.get('inventoryItemTypeAhead'),
               purchaseCost = this.get('purchaseCost'),
               quantity = this.get('quantity');
           model.validate();
           if (this.get('isValid') && !Ember['default'].isEmpty(inventoryItemTypeAhead) && !Ember['default'].isEmpty(quantity) && !Ember['default'].isEmpty(purchaseCost)) {
               if (this._haveValidInventoryItem()) {
                   this._addInvoiceItem();                    
               } else {                
                   this._addNewInventoryItem();
                   return true;                    
               }
           }
       },
       
       _addInvoiceItem: function() {
           var invoiceItems = this.get('invoiceItems'),
               itemProperties = this.getProperties(this.get('purchaseAttributes')),            
               invoiceItem = Ember['default'].Object.create(itemProperties);
           invoiceItems.addObject(invoiceItem);
           this.set('expirationDate');
           this.set('inventoryItem');
           this.set('inventoryItemTypeAhead');
           this.set('lotNumber');
           this.set('purchaseCost');
           this.set('quantity');
           this.set('selectedInventoryItem');
           this.set('vendorItemNo');
       },
       
       _findInventoryItem: function(purchase) {
           var invoiceItems = this.get('invoiceItems'),
               inventoryId = purchase.get('inventoryItem');
           if (!Ember['default'].isEmpty(inventoryId)) {
               inventoryId = inventoryId.substr(10);
               var invoiceItem = invoiceItems.find(function(item) {
                   return (item.get('inventoryItem.id') === inventoryId);
               }, this);
               if (!Ember['default'].isEmpty(invoiceItem)) {
                   return invoiceItem.get('inventoryItem');
               }
           }
       },

       _haveValidInventoryItem: function() {        
           var inventoryItemTypeAhead = this.get('inventoryItemTypeAhead'),
               inventoryItem = this.get('inventoryItem');
           if (Ember['default'].isEmpty(inventoryItemTypeAhead) || Ember['default'].isEmpty(inventoryItem)) {
               return false;
           } else {
               var inventoryItemName = inventoryItem.get('name'),
                   typeAheadName = inventoryItemTypeAhead.substr(0, inventoryItemName.length);
               if (typeAheadName !== inventoryItemName) {
                   return false;
               } else {
                   return true;
               }
           }
       },

       _savePurchases: function() {
           var purchaseDefaults = this.getProperties([
               'dateReceived',
               'vendor',
               'invoiceNo',
               'location',
               'aisleLocation',
               'giftInKind']),
               invoiceItems = this.get('invoiceItems'),
               inventoryPurchase,
               savePromises = [];
           invoiceItems.forEach(function(invoiceItem) {
               var inventoryItem = invoiceItem.get('inventoryItem'),                
                   quantity = invoiceItem.get('quantity');
               inventoryPurchase = this.store.createRecord('inv-purchase', purchaseDefaults);
               inventoryPurchase.setProperties(invoiceItem.getProperties(this.get('purchaseAttributes')));
               inventoryPurchase.setProperties({
                   distributionUnit: inventoryItem.get('distributionUnit'),
                   currentQuantity:  quantity,
                   originalQuantity: quantity,
                   inventoryItem: 'inventory_'+inventoryItem.get('id')
               });
               savePromises.push(inventoryPurchase.save());
           }.bind(this));
           Ember['default'].RSVP.all(savePromises).then(function(results) {
               var inventorySaves = [];
               results.forEach(function(newPurchase) {
                   var inventoryItem = this._findInventoryItem(newPurchase),
                       purchases = inventoryItem.get('purchases');
                   purchases.addObject(newPurchase);
                   this.newPurchaseAdded(inventoryItem, newPurchase); 
                   inventoryItem.updateQuantity();
                   inventorySaves.push(inventoryItem.save());
               }.bind(this));
               Ember['default'].RSVP.all(inventorySaves).then(function() {
                   this.updateLookupLists();
                   this.displayAlert('Inventory Purchases Saved', 'The inventory purchases have been successfully saved', 'allItems');
               }.bind(this));
           }.bind(this));
       },
       
       actions: {
           addInventoryItem: function() {
               this._addInventoryItem();
           },
           
           addedNewInventoryItem: function(inventoryItem) {
               this.set('inventoryItem', inventoryItem);
               this._addInvoiceItem();
               this.send('closeModal');
               if (this.get('doingUpdate')) {
                   this._savePurchases();
               }
           },        
           
           removeItem: function(removeInfo) {
               var invoiceItems = this.get('invoiceItems'),
                   item = removeInfo.itemToRemove;
               invoiceItems.removeObject(item);
               this.send('closeModal');
           },        
           
           showRemoveItem: function(item) {
              var message= 'Are you sure you want to remove this item from this invoice?',
                   model = Ember['default'].Object.create({
                       itemToRemove: item               
                   }),
                   title = 'Remove Item';
               this.displayConfirm(title, message, 'removeItem', model);            
           },
           
           /**
            * Update the model
            */
           update: function() {
               this.set('doingUpdate', true);
               var addingNewInventory = this._addInventoryItem();
               if (!addingNewInventory) {
                   this._savePurchases();
               }
           }
       }
   });

});
define('hospitalrun/inventory/batch/route', ['exports', 'hospitalrun/inventory/request/route', 'ember'], function (exports, InventoryRequestRoute, Ember) {

    'use strict';

    exports['default'] = InventoryRequestRoute['default'].extend({
        editTitle: 'Inventory Received',
        modelName: 'inventory-batch',
        newTitle: 'Inventory Received',
        getNewData: function() {
            return Ember['default'].RSVP.resolve({
                invoiceItems: [],
                dateReceived: new Date()
            });
        },
        
        actions: {
            addedNewInventoryItem: function(model) {
                this.controller.send('addedNewInventoryItem', model);
            }
        },
    });

});
define('hospitalrun/inventory/batch/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n<div class=\"row\">\n    ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("dateReceived"),
      'label': ("Date Received"),
      'class': ("col-sm-4 required")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("vendor"),
      'label': ("Vendor"),
      'list': ("vendorList"),
      'selection': ("vendor"),
      'class': ("col-sm-4 required")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("invoiceNo"),
      'label': ("Invoice Number"),
      'class': ("col-sm-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n</div>\n<div class=\"row\">    \n    ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("location"),
      'label': ("Location"),
      'list': ("warehouseList"),
      'selection': ("location"),
      'class': ("col-sm-5")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("aisleLocation"),
      'label': ("Aisle Location"),
      'list': ("aisleLocationList"),
      'selection': ("aisleLocation"),
      'class': ("col-sm-5")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n    <div class=\"form-group col-sm-2\">\n        <label class=\"control-label\">Gift In Kind</label>\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("Gift In Kind"),
      'property': ("giftInKind")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n    </div>\n</div>\n<div class=\"panel panel-primary\">\n    <div class=\"panel-heading\">\n        <h3 class=\"panel-title\">Invoice Line Item</h3>\n    </div>\n    <div class=\"panel-body\">\n        <div class=\"row\">\n            ");
    data.buffer.push(escapeExpression((helper = helpers['inventory-typeahead'] || (depth0 && depth0['inventory-typeahead']),options={hash:{
      'class': ("col-sm-7 required"),
      'property': ("inventoryItemTypeAhead"),
      'label': ("Inventory Item"),
      'content': ("inventoryList"),
      'selection': ("selectedInventoryItem"),
      'showQuantity': (false)
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING",'content': "ID",'selection': "ID",'showQuantity': "BOOLEAN"},hashContexts:{'class': depth0,'property': depth0,'label': depth0,'content': depth0,'selection': depth0,'showQuantity': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "inventory-typeahead", options))));
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("quantity"),
      'label': ("Quantity"),
      'class': ("col-sm-2 required")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("    \n             <div class=\"form-group col-sm-1\">\n                <label class=\"control-label\">Unit</label>\n                ");
    stack1 = helpers['if'].call(depth0, "showDistributionUnit", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("                 \n            </div>\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("purchaseCost"),
      'label': ("Purchase Cost"),
      'class': ("col-sm-2 required")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n        </div>\n        <div class=\"row\">\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("vendorItemNo"),
      'label': ("Vendor Item Number"),
      'class': ("col-sm-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("lotNumber"),
      'label': ("Serial/Lot Number"),
      'class': ("col-sm-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("expirationDate"),
      'label': ("Expiration Date"),
      'minDate': ("now"),
      'class': ("col-sm-2")
    },hashTypes:{'property': "STRING",'label': "STRING",'minDate': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'minDate': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n            <div class=\"form-group col-sm-2\">\n                <label class=\"control-label\">&nbsp;</label>\n                <p class=\"form-control-static\">\n                    <button class=\"btn btn-primary\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "addInventoryItem", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">\n                        <span class=\"octicon octicon-plus\"></span> Add\n                    </button>\n                </p>\n            </div>\n        </div>\n    </div>\n</div>\n");
    stack1 = helpers['if'].call(depth0, "invoiceItems", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        \n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                    <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "inventoryItem.distributionUnit", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n                ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <h3>Invoice Items</h3>\n    <table class=\"table\">\n        <tr class=\"table-header\">\n            <th>Name</th>\n            <th>Quantity</th>\n            <th>Cost</th>\n            <th>Item Number</th>\n            <th>Serial/Lot Number</th>        \n            <th>Expiration Date</th>\n            <th>Action</th>\n        </tr>\n        ");
    stack1 = helpers.each.call(depth0, "invoiceItems", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </table>\n    <h4>Total Received: ");
    stack1 = helpers._triageMustache.call(depth0, "totalReceived", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</h4>\n");
    return buffer;
    }
  function program5(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n            <tr>\n                <td class=\"col-sm-2\">\n                    ");
    stack1 = helpers._triageMustache.call(depth0, "inventoryItem.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </td>\n                <td class=\"col-sm-2\">\n                     <div class=\"input-group\">\n                        ");
    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
      'class': ("form-control"),
      'value': ("quantity")
    },hashTypes:{'class': "STRING",'value': "ID"},hashContexts:{'class': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
    data.buffer.push("\n                        <span class=\"input-group-addon\">\n                        ");
    stack1 = helpers._triageMustache.call(depth0, "inventoryItem.distributionUnit", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                         </span>\n                    </div>\n                </td>\n                <td class=\"col-sm-2\">\n                    <div class=\"form-group\">\n                        ");
    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
      'class': ("form-control"),
      'value': ("purchaseCost")
    },hashTypes:{'class': "STRING",'value': "ID"},hashContexts:{'class': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
    data.buffer.push("\n                    </div>\n                </td>\n                <td class=\"col-sm-2\">\n                    <div class=\"form-group\">\n                        ");
    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
      'class': ("form-control"),
      'value': ("vendorItemNo")
    },hashTypes:{'class': "STRING",'value': "ID"},hashContexts:{'class': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
    data.buffer.push("\n                    </div>\n                </td>\n                <td class=\"col-sm-2\">\n                    <div class=\"form-group\">\n                        ");
    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
      'class': ("form-control"),
      'value': ("lotNumber")
    },hashTypes:{'class': "STRING",'value': "ID"},hashContexts:{'class': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
    data.buffer.push("\n                    </div>\n                </td>                \n                <td class=\"col-sm-2\">\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("expirationDate"),
      'minDate': ("now"),
      'model': ("")
    },hashTypes:{'property': "STRING",'minDate': "STRING",'model': "ID"},hashContexts:{'property': depth0,'minDate': depth0,'model': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n                </td>\n                <td class=\"col-sm-1\">\n                    <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showRemoveItem", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                        <span class=\"octicon octicon-x\"></span>Remove\n                    </button>\n                </td>\n            </tr>\n        ");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/inventory/batch/view', ['exports', 'hospitalrun/views/panel'], function (exports, PanelView) {

	'use strict';

	exports['default'] = PanelView['default'].extend();

});
define('hospitalrun/inventory/completed-items/controller', ['exports', 'hospitalrun/mixins/inventory-adjustment-types', 'ember'], function (exports, AdjustmentTypes, Ember) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend(AdjustmentTypes['default'], {
        deliveryDetails: function() {
            var locationName = this.get('deliveryLocationName'),
                patient = this.get('patient');
            if (Ember['default'].isEmpty(patient)) {    
                return locationName;
            } else {
                return patient.get('displayName');
            }
        }.property('deliveryAisle', 'deliveryLocation','patient'),
        
        haveReason: function() {
            return !Ember['default'].isEmpty(this.get('reason'));
        }.property('reason'),

        isAdjustment: function() {
            var adjustmentTypes = this.get('adjustmentTypes'),
                transactionType = this.get('transactionType'),
                adjustmentType = adjustmentTypes.findBy('type', transactionType);            
            return !Ember['default'].isEmpty(adjustmentType);
        }.property('transactionType'),
        
        isFulfillment: function() {
            return this.get('transactionType') === 'Fulfillment';
        }.property('transactionType'),
        
        isTransfer: function() {
            return this.get('transactionType') === 'Transfer';
        }.property('transactionType'),
        
    });

});
define('hospitalrun/inventory/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, AbstractDeleteController) {

     'use strict';

     exports['default'] = AbstractDeleteController['default'].extend({
          title: 'Delete Item'
     });

});
define('hospitalrun/inventory/delete/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1;


    data.buffer.push("<div class=\"alert alert-danger\">\n    <span class=\"glyphicon glyphicon-warning-sign\"></span> \n    Are you sure you wish to delete ");
    stack1 = helpers._triageMustache.call(depth0, "name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("?\n</div>");
    return buffer;
    
  });

});
define('hospitalrun/inventory/delete/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/inventory/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/inventory-type-list', 'hospitalrun/mixins/return-to', 'hospitalrun/mixins/unit-types', 'hospitalrun/mixins/user-session'], function (exports, AbstractEditController, Ember, InventoryLocations, InventoryTypeList, ReturnTo, UnitTypes, UserSession) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend(InventoryLocations['default'], InventoryTypeList['default'], ReturnTo['default'], UnitTypes['default'], UserSession['default'], {
        needs: ['inventory','pouchdb'],
        
        canAddPurchase: function() {        
            return this.currentUserCan('add_inventory_purchase');
        }.property(),
        
        canAdjustLocation: function() {
            return this.currentUserCan('adjust_inventory_location');
        },    

        canDeletePurchase: function() {        
            return this.currentUserCan('delete_inventory_purchase');
        }.property(),    
        
        warehouseList: Ember['default'].computed.alias('controllers.inventory.warehouseList'),
        aisleLocationList: Ember['default'].computed.alias('controllers.inventory.aisleLocationList'),
        inventoryTypeList: Ember['default'].computed.alias('controllers.inventory.inventoryTypeList.value'),
        vendorList: Ember['default'].computed.alias('controllers.inventory.vendorList'),
        pouchdbController: Ember['default'].computed.alias('controllers.pouchdb'),
        
        lookupListsToUpdate: [{
            name: 'aisleLocationList', //Name of property containing lookup list
            property: 'aisleLocation', //Corresponding property on model that potentially contains a new value to add to the list
            id: 'aisle_location_list' //Id of the lookup list to update
        }, {
            name: 'vendorList', //Name of property containing lookup list
            property: 'vendor', //Corresponding property on model that potentially contains a new value to add to the list
            id: 'vendor_list' //Id of the lookup list to update
        }, {
            name: 'warehouseList', //Name of property containing lookup list
            property: 'location', //Corresponding property on model that potentially contains a new value to add to the list
            id: 'warehouse_list' //Id of the lookup list to update
        }],
        
        canEditQuantity: function() {		
            return (this.get('isNew'));		
        }.property('isNew'),
        
        haveTransactions: function() {
            var transactions = this.get('transactions');
            return transactions !== null;
        }.property('transactions.@each'),
        
        locationQuantityTotal: function() {
            var locations = this.get('locations');
            var total = locations.reduce(function(previousValue, location) {
                return previousValue + parseInt(location.get('quantity'));
            }, 0);
            return total;
        }.property('locations'),
        
        /**
         * Check to see if the total quantity by location matches the quantity calculated on the item
         * @return {boolean} true if there is a discrepency;otherwise false.
         */
        quantityDiscrepency: function() {
            var locationQuantityTotal = this.get('locationQuantityTotal'), 
                quantity = this.get('quantity');
            return (!Ember['default'].isEmpty(locationQuantityTotal) && !Ember['default'].isEmpty(quantity) && locationQuantityTotal !== quantity);
        }.property('locationQuantityTotal', 'quantity'),
        
        /**
         * Get the difference in quantity between the total quantity by location and the quantity on the item.
         * @return {int} the difference.
         */
        quantityDifferential: function() {
            var locationQuantityTotal = this.get('locationQuantityTotal'), 
                quantity = this.get('quantity');
            return Math.abs(locationQuantityTotal - quantity);
        }.property('locationQuantityTotal', 'quantity'),
        
        originalQuantityUpdated: function() {
            var isNew = this.get('isNew'),
                quantity = this.get('originalQuantity');
            if (isNew && !Ember['default'].isEmpty(quantity)) {
                this.set('quantity', quantity);
            }
        }.observes('originalQuantity'),
        
        showTransactions: function() {
            var transactions = this.get('transactions');
            return !Ember['default'].isEmpty(transactions);
        }.property('transactions.@each'),
        
        transactions: null,
        
        updateCapability: 'add_inventory_item',

        actions: {
            adjustItems: function(inventoryLocation) {
                var adjustmentQuantity = parseInt(inventoryLocation.get('adjustmentQuantity')),
                    inventoryItem = this.get('model'),                
                    transactionType = inventoryLocation.get('transactionType'),
                    request = this.get('store').createRecord('inv-request', {
                        adjustPurchases: true,
                        dateCompleted: inventoryLocation.get('dateCompleted'),
                        expenseAccount: inventoryLocation.get('expenseAccount'),
                        inventoryItem: inventoryItem,
                        quantity: adjustmentQuantity,
                        transactionType: transactionType,
                        reason: inventoryLocation.get('reason'),
                        deliveryAisle: inventoryLocation.get('aisleLocation'),
                        deliveryLocation: inventoryLocation.get('location')
                    });
                request.set('inventoryLocations',[inventoryLocation]);            
                var increment = false;
                if (transactionType === 'Adjustment (Add)' || transactionType === 'Return') {
                    increment = true;
                }
                request.set('markAsConsumed',true);
                //Make sure inventory item is resolved first.
                request.get('inventoryItem').then(function() {
                    this.send('fulfillRequest', request, true, increment, true);
                }.bind(this));            
            },        
            
            deletePurchase: function(purchase, deleteFromLocation, expire) {
                var purchases = this.get('purchases'),
                    quantityDeleted = purchase.get('currentQuantity');
                if (expire) {
                    purchase.set('expired', true);
                    purchase.save();
                } else {
                    purchases.removeObject(purchase);
                    purchase.destroyRecord();
                }
                if (!Ember['default'].isEmpty(deleteFromLocation)) {
                    deleteFromLocation.decrementProperty('quantity', quantityDeleted);
                    deleteFromLocation.save();
                }
                this.get('model').updateQuantity();
                this.send('update',true);
                this.send('closeModal');        
            },
            
            editNewItem: function() {
                this.send('editItem', this.get('id'));
            },
            
            showAdjustment: function(inventoryLocation) {
                inventoryLocation.setProperties({                
                    dateCompleted: new Date(),
                    adjustmentItem: this.get('model'),
                    adjustmentQuantity: '',
                    reason: '',
                    transferItem: null,
                    transactionType: 'Adjustment (Add)'
                });
                this.send('openModal', 'inventory.adjust', inventoryLocation);
            },

            showDeletePurchase: function(purchase) {
                this.send('openModal', 'inventory.purchase.delete', purchase);
            },
            
            showEditPurchase: function(purchase) {
                this.send('openModal', 'inventory.purchase.edit', purchase);
            },
            
            showExpirePurchase: function(purchase) {
                purchase.set('expire', true);
                this.send('openModal', 'inventory.purchase.delete', purchase);
            },
            
            showTransfer: function(inventoryLocation) {
                inventoryLocation.set('adjustmentQuantity');
                inventoryLocation.set('transferItem', this.get('model'));
                inventoryLocation.set('dateCompleted', new Date());            
                this.send('openModal', 'inventory.transfer', inventoryLocation);
            },
            
            transferItems: function(inventoryLocation) {
                var inventoryItem = this.get('model'),
                    request = this.get('store').createRecord('inv-request', {
                        adjustPurchases: false,
                        dateCompleted: inventoryLocation.get('dateCompleted'),
                        inventoryItem: inventoryItem,
                        quantity: inventoryLocation.get('adjustmentQuantity'),
                        deliveryAisle: inventoryLocation.get('transferAisleLocation'),
                        deliveryLocation: inventoryLocation.get('transferLocation'),
                        transactionType: 'Transfer'
                    });
                this.transferToLocation(inventoryItem, inventoryLocation);            
                inventoryLocation.setProperties({
                    transferItem: null,
                    transferLocation: null,
                    transferAisleLocation: null,
                    adjustmentQuantity: null
                });
                request.set('locationsAffected',[{
                    name: inventoryLocation.get('locationName'),
                    quantity: request.get('quantity')
                }]);
                request.get('inventoryItem').then(function() {
                    //Make sure relationships are resolved before saving
                    this._saveRequest(request);                
                }.bind(this));            
            },
            
            updatePurchase: function(purchase, updateQuantity) {
                if (updateQuantity) {
                    this.get('model').updateQuantity();
                    this.send('update',true);
                }
                this.send('closeModal');            
            },
        },
        
        _completeBeforeUpdate: function(sequence, resolve, reject) {
            var sequenceValue = null,
                friendlyId = sequence.get('prefix'),
                promises = [],
                newPurchase = this.getProperties('aisleLocation', 'dateReceived',
                'purchaseCost', 'lotNumber', 'expirationDate', 'giftInKind', 
                'location', 'vendor', 'vendorItemNo'),
                quantity = this.get('quantity');
            if (!Ember['default'].isEmpty(quantity)) {
                newPurchase.originalQuantity = quantity;
                newPurchase.currentQuantity = quantity;
                newPurchase.inventoryItem = 'inventory_'+this.get('model.id');
                var purchase = this.get('store').createRecord('inv-purchase', newPurchase);
                promises.push(purchase.save());
                this.get('purchases').addObject(purchase);
                this.newPurchaseAdded(this.get('model'), purchase);
            }
            sequence.incrementProperty('value',1);
            sequenceValue = sequence.get('value');
            if (sequenceValue < 100000) {
                friendlyId += String('00000' + sequenceValue).slice(-5);
            } else {
                friendlyId += sequenceValue;
            }
            this.set('friendlyId', friendlyId);
            promises.push(sequence.save());
            Ember['default'].RSVP.all(promises,'All before update done for inventory item').then(function(){
                resolve();
            }, function(error) {
                reject(error);
            });
        },

        _findSequence: function(type, resolve, reject) {
            var sequenceFinder = new Ember['default'].RSVP.Promise(function(resolve){
                this._checkNextSequence(resolve, type, 0);
            }.bind(this));
            sequenceFinder.then(function(prefixChars) {
                var newSequence = this.get('store').push('sequence',{
                    id: 'inventory_'+type,
                    prefix: type.toLowerCase().substr(0,prefixChars),
                    value: 0
                });
                this._completeBeforeUpdate(newSequence, resolve, reject);
            }.bind(this));
        },
        
        _findSequenceByPrefix: function(type, prefixChars) {  
            var pouchdbController = this.get('pouchdbController');
            var sequenceQuery = {
                key:  type.toLowerCase().substr(0,prefixChars)            
            };
            return pouchdbController.queryMainDB(sequenceQuery, 'sequence_by_prefix');
        },    
        
        _checkNextSequence: function(resolve, type, prefixChars) {
            prefixChars++;
            this._findSequenceByPrefix(type, prefixChars).then(function(records) {
                if (Ember['default'].isEmpty(records.rows)) {
                    resolve(prefixChars);
                } else {
                    this._checkNextSequence(resolve, type, prefixChars);
                }
            }.bind(this), function() {
                resolve(prefixChars);
            });        
        },
        
        
        /**
         * Saves the specified request, then updates the inventory item and closes the modal.
         */
        _saveRequest: function(request) {
            request.set('status', 'Completed');
            request.set('completedBy',request.getUserName());
            request.save().then(function() {
                this.send('update',true);
                this.send('closeModal');
                this.getTransactions();
            }.bind(this));
        },
        
        getTransactions: function() {        
            var inventoryId = 'inventory_'+this.get('id');
            this.set('transactions',null);
            this.store.find('inv-request', {
                options: {
                    endkey: [inventoryId, 'Completed', 0],
                    startkey: [inventoryId, 'Completed', 9999999999999],
                    descending: true                
                },
                mapReduce: 'inventory_request_by_item'
            }).then(function(transactions) {
                this.set('transactions', transactions);
            }.bind(this));    
        },
        
        beforeUpdate: function() {
            if (this.get('isNew')) {
                var model = this.get('model'),
                    type = this.get('type');                
                return new Ember['default'].RSVP.Promise(function(resolve, reject){
                    model.validate().then(function() {
                        if (model.get('isValid')) {
                            this.set('savingNewItem', true);
                            this.store.find('sequence', 'inventory_'+type).then(function(sequence) {
                                this._completeBeforeUpdate(sequence, resolve, reject);
                            }.bind(this), function() {
                                this._findSequence(type, resolve, reject);
                            }.bind(this));                        
                        } else {
                            this.send('showDisabledDialog');
                            reject('invalid model');                        
                        }
                    }.bind(this)).catch(function() {
                        this.send('showDisabledDialog');
                    }.bind(this));                
                }.bind(this));
            } else {
                return Ember['default'].RSVP.Promise.resolve();
            }
        },
        
        afterUpdate: function() {
            var afterUpdateAction = null;
            if (this.get('savingNewItem')) {
                afterUpdateAction = 'editNewItem';
                this.set('savingNewItem', false);
            }
            this.displayAlert('Inventory Item Saved','The inventory item has been saved.',afterUpdateAction);
        }
    });

});
define('hospitalrun/inventory/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'hospitalrun/mixins/inventory-id'], function (exports, AbstractEditRoute, Ember, InventoryId) {

    'use strict';

    exports['default'] = AbstractEditRoute['default'].extend(InventoryId['default'], {
        editTitle: 'Edit Item',
        modelName: 'inventory',
        newTitle: 'New Item',
        
        actions: {        
            adjustItems: function(inventoryLocation) {
                this.controller.send('adjustItems',inventoryLocation);
            },
            
            doneFulfillRequest: function() {
                this.controller.getTransactions();           
            },        
            
            deletePurchase: function(purchase, deleteFromLocation) {
                this.controller.send('deletePurchase', purchase, deleteFromLocation);
            },
            
            editNewItem: function() {
                this.controller.send('editNewItem');
            },
            
            expirePurchase: function(purchase, deleteFromLocation) {
                this.controller.send('deletePurchase', purchase, deleteFromLocation, true);
            },
            
            transferItems: function(inventoryLocation) {
                this.controller.send('transferItems',inventoryLocation);
            },        
            
            updatePurchase: function(purchase, updateQuantity) {
                this.controller.send('updatePurchase', purchase, updateQuantity);
            }                        
        },
        
        getNewData: function() {
            return Ember['default'].RSVP.resolve({
                dateReceived: new Date()
            });
        },
        
        setupController: function(controller, model) {
            this._super(controller, model);
            controller.getTransactions();
        }
    });

});
define('hospitalrun/inventory/edit/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "inventory-basic", options) : helperMissing.call(depth0, "partial", "inventory-basic", options))));
    data.buffer.push("\n    ");
    stack1 = helpers['if'].call(depth0, "isNew", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    ");
    stack1 = helpers.unless.call(depth0, "isNew", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(14, program14, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        <h3>Purchase information</h3>\n        ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "inv-purchase", options) : helperMissing.call(depth0, "partial", "inv-purchase", options))));
    data.buffer.push("\n    ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            ");
    stack1 = helpers['if'].call(depth0, "quantityDiscrepency", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            <h3>\n                Purchases \n                ");
    stack1 = helpers['if'].call(depth0, "canAddPurchase", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </h3>\n            <table class=\"table\">\n                <tr class=\"table-header\">\n                    <th>Date Received</th>\n                    <th>Purchase Cost</th>\n                    <th>Cost Per Unit</th>\n                    <th>Original Quantity</th>\n                    <th>Current Quantity</th>\n                    <th>Gift In Kind</th>\n                    <th>Serial/Lot Number</th>\n                    <th>Expiration Date</th>\n                    <th>Vendor</th>\n                    <th>Invoice Number</th>\n                </tr>\n                ");
    stack1 = helpers.each.call(depth0, "purchases", {hash:{
      'itemController': ("inventory/purchase/item-controller")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </table>\n    ");
    return buffer;
    }
  function program5(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                <div class=\"alert alert-danger alert-dismissible\" role=\"alert\">\n                    <button type=\"button\" class=\"close\" data-dismiss=\"alert\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>\n                    <p>\n                        <span class=\"glyphicon glyphicon-warning-sign\"></span>\n                        The total quantity <strong>(");
    stack1 = helpers._triageMustache.call(depth0, "quantity", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(")</strong>, does not match the total quantity in the locations <strong>(");
    stack1 = helpers._triageMustache.call(depth0, "locationQuantityTotal", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(")</strong>.\n                    </p>\n                    <p>Please adjust the quantities on the appropriate location(s) to account for the difference of ");
    stack1 = helpers._triageMustache.call(depth0, "quantityDifferential", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(".</p>\n                </div>\n            ");
    return buffer;
    }

  function program7(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                    <button class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showAddPurchase", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span> Add Purchase</button>\n                ");
    return buffer;
    }

  function program9(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                    <tr ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'class': ("rowClass")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(">\n                        <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "dateReceived", options) : helperMissing.call(depth0, "date-format", "dateReceived", options))));
    data.buffer.push("</td>\n                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "purchaseCost", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "costPerUnit", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "originalQuantity", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "currentQuantity", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                        <td>\n                            ");
    stack1 = helpers['if'].call(depth0, "giftInKind", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(12, program12, data),fn:self.program(10, program10, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </td>\n                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "lotNumber", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>                \n                        <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "expirationDate", options) : helperMissing.call(depth0, "date-format", "expirationDate", options))));
    data.buffer.push("</td>\n                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "vendor", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "invoiceNo", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    </tr>\n                ");
    return buffer;
    }
  function program10(depth0,data) {
    
    
    data.buffer.push("Y");
    }

  function program12(depth0,data) {
    
    
    data.buffer.push("N");
    }

  function program14(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n        <h3>Locations</h3>    \n        <table class=\"table\">\n            <tr class=\"table-header\">\n                <th>Location</th>\n                <th>Aisle Location</th>\n                <th>Quantity</th>\n                ");
    stack1 = helpers['if'].call(depth0, "canAdjustLocation", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(15, program15, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </tr>\n            ");
    stack1 = helpers.each.call(depth0, "locations", {hash:{
      'itemController': ("inventory/location-item")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(17, program17, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        </table>\n        ");
    stack1 = helpers['if'].call(depth0, "showTransactions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(21, program21, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    ");
    return buffer;
    }
  function program15(depth0,data) {
    
    
    data.buffer.push("\n                    <th>Action</th>\n                ");
    }

  function program17(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                ");
    stack1 = helpers['if'].call(depth0, "haveItems", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(18, program18, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            ");
    return buffer;
    }
  function program18(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                    <tr>\n                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "location", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "aisleLocation", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "quantity", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                        ");
    stack1 = helpers['if'].call(depth0, "parentController.canAdjustLocation", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(19, program19, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    </tr>\n                ");
    return buffer;
    }
  function program19(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                            <td>\n                                <button class=\"btn btn-primary neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showAdjustment", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Adjust</button>\n                                <button class=\"btn btn-primary neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showTransfer", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Transfer</button>\n                            </td>\n                        ");
    return buffer;
    }

  function program21(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            <h3>Transactions</h3>\n            <table class=\"table\">\n                <tr class=\"table-header\">\n                    <th>Date Completed</th>\n                    <th>Quantity</th>\n                    <th>Transaction</th>\n                    <th>Expense To</th>\n                    <th>Details</th>\n                </tr>\n                ");
    stack1 = helpers['if'].call(depth0, "haveTransactions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(36, program36, data),fn:self.program(22, program22, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </table>\n        ");
    return buffer;
    }
  function program22(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                    ");
    stack1 = helpers.each.call(depth0, "transactions", {hash:{
      'itemController': ("inventory/completed-items")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(23, program23, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                ");
    return buffer;
    }
  function program23(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                        <tr>\n                            <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "dateCompleted", options) : helperMissing.call(depth0, "date-format", "dateCompleted", options))));
    data.buffer.push("</td>                    \n                            <td>");
    stack1 = helpers._triageMustache.call(depth0, "quantity", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                            <td>");
    stack1 = helpers._triageMustache.call(depth0, "transactionType", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                            <td>");
    stack1 = helpers._triageMustache.call(depth0, "expenseAccount", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                            <td>\n                                ");
    stack1 = helpers['if'].call(depth0, "isAdjustment", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(24, program24, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                ");
    stack1 = helpers['if'].call(depth0, "isFulfillment", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(27, program27, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                ");
    stack1 = helpers['if'].call(depth0, "isTransfer", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(34, program34, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                            </td>\n                        </tr>            \n                    ");
    return buffer;
    }
  function program24(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                    ");
    stack1 = helpers['if'].call(depth0, "haveReason", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(25, program25, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                    <strong>Location Adjusted:</strong> ");
    stack1 = helpers._triageMustache.call(depth0, "deliveryDetails", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                ");
    return buffer;
    }
  function program25(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                        <strong>Reason:</strong> ");
    stack1 = helpers._triageMustache.call(depth0, "reason", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("<br/>\n                                    ");
    return buffer;
    }

  function program27(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                    <strong>Cost Per Unit:</strong> ");
    stack1 = helpers._triageMustache.call(depth0, "costPerUnit", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("<br/>\n                                    <strong>Quantity At Completion:</strong> ");
    stack1 = helpers._triageMustache.call(depth0, "quantityAtCompletion", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("<br/>\n                                    <strong>Pulled From:</strong>\n                                    ");
    stack1 = helpers.each.call(depth0, "locationsAffected", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(28, program28, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                    ");
    stack1 = helpers['if'].call(depth0, "patient", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(32, program32, data),fn:self.program(30, program30, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                ");
    return buffer;
    }
  function program28(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                        ");
    stack1 = helpers._triageMustache.call(depth0, "name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("<br/>\n                                    ");
    return buffer;
    }

  function program30(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                        <strong>Prescription For: </strong> ");
    stack1 = helpers._triageMustache.call(depth0, "deliveryDetails", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                    ");
    return buffer;
    }

  function program32(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                        <strong>Delivered To: </strong> ");
    stack1 = helpers._triageMustache.call(depth0, "deliveryDetails", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                    ");
    return buffer;
    }

  function program34(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                    <strong>Transferred From:</strong>\n                                    ");
    stack1 = helpers.each.call(depth0, "locationsAffected", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(28, program28, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                    <strong>Transferred To: </strong> ");
    stack1 = helpers._triageMustache.call(depth0, "deliveryDetails", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                ");
    return buffer;
    }

  function program36(depth0,data) {
    
    
    data.buffer.push("\n                    <tr>\n                        <td colspan=\"4\"><span class=\"glyphicon glyphicon-refresh glyphicon-refresh-animate\"></span> Loading transactions....</td>\n                    </tr>\n                ");
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/inventory/edit/view', ['exports', 'hospitalrun/views/panel'], function (exports, PanelView) {

	'use strict';

	exports['default'] = PanelView['default'].extend();

});
define('hospitalrun/inventory/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, AbstractPagedController, UserSession) {

    'use strict';

    exports['default'] = AbstractPagedController['default'].extend(UserSession['default'], {
        startKey: [],
        canAdd: function() {        
            return this.currentUserCan('add_inventory_request');
        }.property(),    
        
        canFulfill: function() {
            return this.currentUserCan('fulfill_inventory');
        }.property() 
    });

});
define('hospitalrun/inventory/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'hospitalrun/mixins/user-session'], function (exports, AbstractIndexRoute, UserSession) {

    'use strict';

    exports['default'] = AbstractIndexRoute['default'].extend(UserSession['default'], {
        modelName: 'inv-request',
        newButtonAction: function() {
            if (this.currentUserCan('add_inventory_request')) {
                return 'newRequest';
            } else {
                return null;
            }
        }.property(),
        newButtonText: '+ new request',
        pageTitle: 'Requests',
        
        _getStartKeyFromItem: function(item) {
            return ['Requested',null,'inv-request_'+item.get('id')];
        },
        
        _modelQueryParams: function() {
            var maxValue = this.get('maxValue');
            return {
                options: {
                    startkey: ['Requested', null, null],
                    endkey: ['Requested', maxValue, maxValue]
                },
                mapReduce: 'inventory_request_by_status'
            };
        },    
        
        actions: {
            fulfill: function(item) {
                item.set('dateCompleted', new Date());
                this.transitionTo('inventory.request', item);
            }
        }
    });

});
define('hospitalrun/inventory/index/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <table class=\"table\">\n        <tr class=\"table-header\">\n            <th>Name</th>\n            <th>Quantity</th>\n            <th>Requested On</th>\n            <th>Requested By</th>\n            ");
    stack1 = helpers['if'].call(depth0, "canFulfill", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        </tr>\n        ");
    stack1 = helpers['with'].call(depth0, "canFulfill", "as", "canFulfill", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </table>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    
    data.buffer.push("\n                <th>Actions</th>\n            ");
    }

  function program4(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            ");
    stack1 = helpers.each.call(depth0, {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[],types:[],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    return buffer;
    }
  function program5(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                <tr>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "inventoryItem.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "quantity", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "dateRequested", options) : helperMissing.call(depth0, "date-format", "dateRequested", options))));
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "requestedBy", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    ");
    stack1 = helpers['if'].call(depth0, "canFulfill", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </tr>\n            ");
    return buffer;
    }
  function program6(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                        <td>\n                            <button class=\"btn btn-primary\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "fulfill", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Fulfill</button>\n                        </td>\n                    ");
    return buffer;
    }

  function program8(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <div class=\"alert alert-info\">\n        <p>No requests found. ");
    stack1 = helpers['if'].call(depth0, "canAdd", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n    </div>\n");
    return buffer;
    }
  function program9(depth0,data) {
    
    var buffer = '';
    data.buffer.push("<a href=\"#\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "newRequest", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">Create a new request?</a>");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "hasRecords", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(8, program8, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/inventory/index/view', ['exports', 'hospitalrun/views/item-listing'], function (exports, ItemListingView) {

	'use strict';

	exports['default'] = ItemListingView['default'].extend();

});
define('hospitalrun/inventory/item-controller/controller', ['exports', 'ember', 'hospitalrun/mixins/location-name'], function (exports, Ember, LocationName) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend(LocationName['default'], {
        canDelete: function() {
            return this.parentController.get('canDeleteItem');
        }.property(),
        
        canEdit: function() {
            return this.parentController.get('canAddItem');
        }.property(),
        
        displayLocations: function() {
            var locations = this.get('availableLocations'),
                returnLocations = [];
            locations.forEach(function(currentLocation) {
                var aisleLocationName = currentLocation.get('aisleLocation'),
                    locationName = currentLocation.get('location'),
                    displayLocationName = this.formatLocationName(locationName, aisleLocationName);
                if (!Ember['default'].isEmpty(displayLocationName)) {
                    returnLocations.push(displayLocationName);
                }
            }.bind(this));
            return returnLocations.toString();
        }.property('availableLocations'),
        
        showAdd: function() {
            var canAddPurchase = this.parentController.get('canAddPurchase');
            return canAddPurchase;
        }.property('type')
    });

});
define('hospitalrun/inventory/listing/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, AbstractPagedController, UserSession) {

    'use strict';

    exports['default'] = AbstractPagedController['default'].extend(UserSession['default'], {
        canAddItem: function() {        
            return this.currentUserCan('add_inventory_item');
        }.property(),
        
        canAddPurchase: function() {        
            return this.currentUserCan('add_inventory_purchase');
        }.property(),    
        
        canDeleteItem: function() {        
            return this.currentUserCan('delete_inventory_item');
        }.property(),
        
        startKey: []
    });

});
define('hospitalrun/inventory/listing/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'hospitalrun/mixins/user-session'], function (exports, AbstractIndexRoute, UserSession) {

    'use strict';

    exports['default'] = AbstractIndexRoute['default'].extend(UserSession['default'], {
        modelName: 'inventory',
        newButtonAction: function() {
            if (this.currentUserCan('add_inventory_item')) {
                return 'newItem';
            } else {
                return null;
            }
        }.property(),    
        newButtonText: '+ new item',
        pageTitle: 'Items',
        
        _modelQueryParams: function() {
            return {
                mapReduce: 'inventory_by_name'
            };
        },
        
        _getStartKeyFromItem: function(item) {
            return [item.get('name'),'inventory_'+item.get('id')];
        }
            
    });

});
define('hospitalrun/inventory/listing/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    <table class=\"table\">\n        <tr class=\"table-header\">\n            ");
    stack1 = (helper = helpers['sortable-column'] || (depth0 && depth0['sortable-column']),options={hash:{
      'sortBy': ("friendlyId"),
      'sortDesc': ("sortDesc"),
      'sortKey': ("sortKey")
    },hashTypes:{'sortBy': "STRING",'sortDesc': "ID",'sortKey': "ID"},hashContexts:{'sortBy': depth0,'sortDesc': depth0,'sortKey': depth0},inverse:self.noop,fn:self.program(2, program2, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "sortable-column", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            ");
    stack1 = (helper = helpers['sortable-column'] || (depth0 && depth0['sortable-column']),options={hash:{
      'sortBy': ("name"),
      'sortDesc': ("sortDesc"),
      'sortKey': ("sortKey")
    },hashTypes:{'sortBy': "STRING",'sortDesc': "ID",'sortKey': "ID"},hashContexts:{'sortBy': depth0,'sortDesc': depth0,'sortKey': depth0},inverse:self.noop,fn:self.program(4, program4, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "sortable-column", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            ");
    stack1 = (helper = helpers['sortable-column'] || (depth0 && depth0['sortable-column']),options={hash:{
      'sortBy': ("type"),
      'sortDesc': ("sortDesc"),
      'sortKey': ("sortKey")
    },hashTypes:{'sortBy': "STRING",'sortDesc': "ID",'sortKey': "ID"},hashContexts:{'sortBy': depth0,'sortDesc': depth0,'sortKey': depth0},inverse:self.noop,fn:self.program(6, program6, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "sortable-column", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            ");
    stack1 = (helper = helpers['sortable-column'] || (depth0 && depth0['sortable-column']),options={hash:{
      'sortBy': ("quantity"),
      'sortDesc': ("sortDesc"),
      'sortKey': ("sortKey")
    },hashTypes:{'sortBy': "STRING",'sortDesc': "ID",'sortKey': "ID"},hashContexts:{'sortBy': depth0,'sortDesc': depth0,'sortKey': depth0},inverse:self.noop,fn:self.program(8, program8, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "sortable-column", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            <th>Location</th>        \n            ");
    stack1 = (helper = helpers['sortable-column'] || (depth0 && depth0['sortable-column']),options={hash:{
      'sortBy': ("crossReference"),
      'sortDesc': ("sortDesc"),
      'sortKey': ("sortKey")
    },hashTypes:{'sortBy': "STRING",'sortDesc': "ID",'sortKey': "ID"},hashContexts:{'sortBy': depth0,'sortDesc': depth0,'sortKey': depth0},inverse:self.noop,fn:self.program(10, program10, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "sortable-column", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            <th>Actions</th>\n        </tr>\n        ");
    stack1 = helpers.each.call(depth0, {hash:{
      'itemController': ("inventory/item-controller")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(12, program12, data),contexts:[],types:[],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </table>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    
    data.buffer.push("ID");
    }

  function program4(depth0,data) {
    
    
    data.buffer.push("Name");
    }

  function program6(depth0,data) {
    
    
    data.buffer.push("Type");
    }

  function program8(depth0,data) {
    
    
    data.buffer.push("Quantity");
    }

  function program10(depth0,data) {
    
    
    data.buffer.push("XRef");
    }

  function program12(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            ");
    stack1 = helpers.unless.call(depth0, "isNew", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(13, program13, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    return buffer;
    }
  function program13(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                <tr ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editItem", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "friendlyId", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "type", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "quantity", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(" ");
    stack1 = helpers._triageMustache.call(depth0, "distributionUnit", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "displayLocations", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "crossReference", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>\n                        ");
    stack1 = helpers['if'].call(depth0, "showAdd", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(14, program14, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        ");
    stack1 = helpers['if'].call(depth0, "canEdit", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(16, program16, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        ");
    stack1 = helpers['if'].call(depth0, "canDelete", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(18, program18, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        ");
    stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{
      'class': ("btn btn-default neutral"),
      'bubbles': (false)
    },hashTypes:{'class': "STRING",'bubbles': "BOOLEAN"},hashContexts:{'class': depth0,'bubbles': depth0},inverse:self.noop,fn:self.program(20, program20, data),contexts:[depth0,depth0],types:["STRING","ID"],data:data},helper ? helper.call(depth0, "inventory.barcode", "", options) : helperMissing.call(depth0, "link-to", "inventory.barcode", "", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    </td>\n                </tr>\n            ");
    return buffer;
    }
  function program14(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                            <button class=\"btn btn-default\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showAddPurchase", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Add</button>\n                        ");
    return buffer;
    }

  function program16(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                            <button class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editItem", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                        ");
    return buffer;
    }

  function program18(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                            <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "deleteItem", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span>Delete</button>\n                        ");
    return buffer;
    }

  function program20(depth0,data) {
    
    
    data.buffer.push("Barcode");
    }

  function program22(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <div class=\"alert alert-info\">\n        <p>No items found. ");
    stack1 = helpers['if'].call(depth0, "canAddItem", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(23, program23, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n    </div>\n");
    return buffer;
    }
  function program23(depth0,data) {
    
    var buffer = '';
    data.buffer.push(" <a href=\"#\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "newItem", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">Create a new record?</a>");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "hasRecords", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(22, program22, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/inventory/listing/view', ['exports', 'hospitalrun/views/item-listing'], function (exports, ItemListingView) {

	'use strict';

	exports['default'] = ItemListingView['default'].extend();

});
define('hospitalrun/inventory/location-item/controller', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend({
        haveItems: function() {
            var quantity = this.get('quantity');
            return (quantity > 0);
        }.property('quantity')
    });

});
define('hospitalrun/inventory/purchase/delete/controller', ['exports', 'ember', 'hospitalrun/mixins/inventory-locations'], function (exports, Ember, InventoryLocations) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend(InventoryLocations['default'], {
        needs: 'inventory/edit',
        
        locations: Ember['default'].computed.alias('controllers.inventory/edit.locations'),    
        
        deleteLocations: Ember['default'].computed.map('filteredLocations', function(location) {
            return {
                name: '%@ (%@ available)'.fmt(location.get('locationName'), location.get('quantity')),
                location: location
            };
        }),
        
        locationChanged: function() {
            var originalAisle = this.get('aisleLocation'),
                originalLocation = this.get('location'),
                locations = this.get('locations');        
            this.set('locationToFind', originalLocation);
            this.set('aisleToFind', originalAisle);
            var defaultLocation = locations.find(this.findLocation, this);
            this.set('deleteFromLocation', defaultLocation);
        }.observes('aisleLocation', 'location'),
        
        filteredLocations: function() {
            var currentQuantity = this.get('currentQuantity'),
                locations = this.get('locations');
            return locations.filter(function(location) {
                var locationQuantity = location.get('quantity');
                return (locationQuantity >= currentQuantity);
            });
        }.property('locations','currentQuantity'),
        
        showLocations: function() {
            var locations = this.get('locations');
            return (locations.get('length') > 0);
        }.property('locations'),

        updateButtonText: function() {
            var expire = this.get('expire');
            if (!Ember['default'].isEmpty(expire) && expire === true) {
                return 'Expire';
            } 
            return  'Delete';
        }.property('expire'),
        updateButtonAction: 'delete',
        isUpdateDisabled: false,
        showUpdateButton: true,
        title:  function() {
            var expire = this.get('expire');
            if (!Ember['default'].isEmpty(expire) && expire === true) {
                return 'Expire';
            }
            return 'Delete Purchase';
        }.property('expire'),
        
        actions: {
            cancel: function() {
                this.set('expire');
                this.send('closeModal');
            },
            
            delete: function() {
                var deleteFromLocation = this.get('deleteFromLocation'),
                    expire = this.get('expire');
                if (!Ember['default'].isEmpty(expire) && expire === true) {
                    this.send('expirePurchase', this.get('model'), deleteFromLocation);
                } else{
                    this.send('deletePurchase', this.get('model'), deleteFromLocation);
                }
            }
        }
    });

});
define('hospitalrun/inventory/purchase/delete/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    
    data.buffer.push("expire");
    }

  function program3(depth0,data) {
    
    
    data.buffer.push("delete");
    }

  function program5(depth0,data) {
    
    
    data.buffer.push("remove");
    }

  function program7(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    ");
    stack1 = helpers['if'].call(depth0, "showLocations", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    return buffer;
    }
  function program8(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'label': ("Remove From Location"),
      'prompt': ("Do Not Remove From A Location"),
      'property': ("deleteFromLocation"),
      'content': ("deleteLocations"),
      'optionValuePath': ("content.location"),
      'optionLabelPath': ("content.name")
    },hashTypes:{'label': "STRING",'prompt': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING"},hashContexts:{'label': depth0,'prompt': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n    ");
    return buffer;
    }

    data.buffer.push("<div class=\"alert alert-danger\">    \n    <p>\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\n        Are you sure you wish to ");
    stack1 = helpers['if'].call(depth0, "expire", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(" this purchase?\n    </p>\n    <p>Doing so will ");
    stack1 = helpers['if'].call(depth0, "expire", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(5, program5, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(" ");
    stack1 = helpers._triageMustache.call(depth0, "currentQuantity", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(" items.</p>\n</div>\n");
    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(7, program7, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    return buffer;
    
  });

});
define('hospitalrun/inventory/purchase/delete/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/inventory/purchase/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember'], function (exports, AbstractEditController, Ember) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend({
        needs: 'inventory',
        cancelAction: 'closeModal',
        
        canEditQuantity: function() {
            var originalQuantity = this.get('originalQuantity'),
                currentQuantity = this.get('currentQuantity');
            if (currentQuantity < originalQuantity) {
                return false;
            }
            return true;
        }.property('currentQuantity'),
        
        warehouseList: Ember['default'].computed.alias('controllers.inventory.warehouseList'),
        aisleLocationList: Ember['default'].computed.alias('controllers.inventory.aisleLocationList'),
        vendorList: Ember['default'].computed.alias('controllers.inventory.vendorList'),
        
        lookupListsToUpdate: [{
            name: 'aisleLocationList', //Name of property containing lookup list
            property: 'aisleLocation', //Corresponding property on model that potentially contains a new value to add to the list
            id: 'aisle_location_list' //Id of the lookup list to update
         }, {
            name: 'vendorList', //Name of property containing lookup list
            property: 'vendor', //Corresponding property on model that potentially contains a new value to add to the list
            id: 'vendor_list' //Id of the lookup list to update
        }, {
            name: 'warehouseList', //Name of property containing lookup list
            property: 'location', //Corresponding property on model that potentially contains a new value to add to the list
            id: 'warehouse_list' //Id of the lookup list to update
         }],
        
        newPurchase: false,
        
        updateQuantity: false,
        
        updateCapability: 'add_inventory_purchase',

        title: function() {
            var isNew = this.get('isNew');
            if (isNew) {
                return 'Add Purchase';
            }
            return 'Edit Purchase';
    	}.property('isNew'),
        
        beforeUpdate: function() {
            var isNew = this.get('isNew'),
                 changedAttributes = this.get('model').changedAttributes();
            if (changedAttributes.originalQuantity) {
                this.set('currentQuantity',this.get('originalQuantity'));
                if (!isNew) {
                    this.set('updateQuantity', true);                
                }
            }
            if (isNew) {
                this.set('newPurchase', true);         
            }
            return Ember['default'].RSVP.Promise.resolve();
        },
        
        afterUpdate: function(record) {
            if (this.get('newPurchase')) {            
                this.send('addPurchase', record);
            } else {
                this.send('updatePurchase', record, true);
            }
        }
    });

});
define('hospitalrun/inventory/purchase/edit/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "inventory/purchase", options) : helperMissing.call(depth0, "partial", "inventory/purchase", options))));
    data.buffer.push("\n");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/inventory/purchase/edit/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/inventory/purchase/item-controller/controller', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend({
        /**
         * Purchase can only be deleted if no items have been consumed from the purchase.
         */
        canDelete: function() {
            var canDeletePurchase = this.parentController.get('canDeletePurchase');
            if (!canDeletePurchase) {
                return false;
            }
            var currentQuantity = this.get('currentQuantity'),
                originalQuantity = this.get('originalQuantity');
            if (currentQuantity === originalQuantity) {
                return true;
            } else {
                return false;
            }
        }.property('originalQuantity', 'currentQuantity'),
        
        canEdit: function() {
            return this.parentController.get('canAddPurchase');
        }.property(),
        
        rowClass: function() {
            var expired = this.get('expired');
            if (expired) {
                return 'warning';
            } else {
                return '';
            }
        }.property('expired')
    });

});
define('hospitalrun/inventory/purchase/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "inv-purchase", options) : helperMissing.call(depth0, "partial", "inv-purchase", options))));
    data.buffer.push("\n");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/inventory/quick-add/controller', ['exports', 'hospitalrun/inventory/edit/controller'], function (exports, InventoryEditController) {

    'use strict';

    exports['default'] = InventoryEditController['default'].extend({
        title: 'New Inventory Item',
        
        updateCapability: 'add_inventory_item',
        
        actions: {
            cancel: function() {
                this.send('closeModal');
            }
        },
        
        beforeUpdate: function() {        
            if (this.get('skipSavePurchase')) {
                this.set('quantity', null);        
            }
            return this._super();
        },
        
        afterUpdate: function(record) {
            this.send('addedNewInventoryItem', record);
        }
    });

});
define('hospitalrun/inventory/quick-add/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "inventory-basic", options) : helperMissing.call(depth0, "partial", "inventory-basic", options))));
    data.buffer.push("\n");
    return buffer;
    }

    data.buffer.push("<div class=\"alert alert-warning\" role=\"alert\">The inventory item <strong>");
    stack1 = helpers._triageMustache.call(depth0, "name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</strong> could not be found.  If you would like to create a new inventory item, fill in the information below.  Otherwise press the Cancel button to return.</div>\n");
    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    return buffer;
    
  });

});
define('hospitalrun/inventory/quick-add/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/inventory/reports/controller', ['exports', 'hospitalrun/controllers/abstract-report-controller', 'ember', 'hospitalrun/mixins/location-name', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/number-format', 'hospitalrun/mixins/inventory-adjustment-types'], function (exports, AbstractReportController, Ember, LocationName, ModalHelper, NumberFormat, InventoryAdjustmentTypes) {

    'use strict';

    exports['default'] = AbstractReportController['default'].extend(LocationName['default'], ModalHelper['default'], NumberFormat['default'], InventoryAdjustmentTypes['default'], {
        needs: ['inventory','pouchdb'],
        effectiveDate: null,
        expenseCategories: ['Inventory Consumed', 'Gift In Kind Usage', 'Inventory Obsolence'],
        expenseMap: null,
        grandCost: 0,
        grandQuantity: 0,
        locationSummary: null,
        pouchdbController: Ember['default'].computed.alias('controllers.pouchdb'),
        warehouseList: Ember['default'].computed.alias('controllers.inventory.warehouseList'),
        reportColumns: {
            date: {
                label: 'Date',
                include: true,
                property: 'date'
            },
            id: {
                label: 'Id',
                include: true,
                property: 'inventoryItem.friendlyId'
            }, 
            name: {
                label: 'Name',
                include: true,
                property: 'inventoryItem.name'
            }, 
            transactionType: {
                label: 'Adjustment Type',
                include: false,
                property: 'transactionType'
            }, 
            expenseAccount: {
                label: 'Expense To',
                include: false,
                property: 'expenseAccount'
            }, 
            description: {
                label: 'Description',
                include: false,
                property: 'inventoryItem.description'
            },
            type: {        
                label: 'Type',
                include: true,
                property: 'inventoryItem.type'
            }, 
            xref: {
                label: 'Cross Reference',
                include: false,
                property: 'inventoryItem.crossReference'
            }, 
            reorder: {
                label: 'Reorder Point',
                include: false,
                property: 'inventoryItem.reorderPoint',
                format: '_numberFormat'
            }, 
            price: {
                label: 'Sale Price Per Unit',
                include: false,
                property: 'inventoryItem.price',
                format: '_numberFormat'
            }, 
            quantity: {
                label: 'Quantity', 
                include: true,
                property: 'quantity',
                format: '_numberFormat'
            },
            consumedPerDay: {
                label: 'Consumption Rate', 
                include: false,
                property: 'consumedPerDay'            
            },
            daysLeft: {
                label: 'Days Left', 
                include: false,
                property: 'daysLeft'
            },
            unit: {
                label: 'Distribution Unit', 
                include: true,
                property: 'inventoryItem.distributionUnit'
            },        
            unitcost: {
                label: 'Unit Cost',
                include: true,
                property: 'unitCost',
                format: '_numberFormat'
            },
            total: {
                label: 'Total Cost',
                include: true,
                property: 'totalCost',
                format: '_numberFormat'
            },         
            gift: {
                label: 'Gift In Kind',
                include: true,
                property: 'giftInKind'
            },
            locations: {
                label: 'Locations',
                include: true,
                property: 'locations',
                format: '_addLocationColumn'
            },
            aisle: {
                label: 'Aisle',
                include: false,
                property: 'locations',
                format: '_addAisleColumn'
            },
            vendor: {
                label: 'Vendor',
                include: false,
                property: 'vendors'
            }
        },
        reportTypes: [{
            name: 'Days Supply Left In Stock',
            value: 'daysLeft'
        }, {
            name: 'Detailed Adjustment',
            value: 'detailedAdjustment'
        }, {
            name: 'Detailed Purchase',
            value: 'detailedPurchase'
        }, {
            name: 'Detailed Stock Usage',
            value: 'detailedUsage'
        }, {
            name: 'Detailed Stock Transfer',
            value: 'detailedTransfer'
        }, {        
            name: 'Detailed Expenses',
            value: 'detailedExpense'
        },  {        
            name: 'Expiration Date',
            value: 'expiration'
        }, {
            name: 'Inventory By Location',
            value: 'byLocation'
        }, {
            name: 'Inventory Valuation',
            value: 'valuation'
        }, {        
            name: 'Summary Expenses',
            value: 'summaryExpense'
        }, {
            name: 'Summary Purchase',
            value: 'summaryPurchase'
        }, {
            name: 'Summary Stock Usage',
            value: 'summaryUsage'
        }, {
            name: 'Summary Stock Transfer',
            value: 'summaryTransfer'
        }, {        
            name: 'Finance Summary',
            value: 'summaryFinance'
        }],
        
        hideLocationFilter: function() {
            var reportType = this.get('reportType');
            return (reportType === 'summaryFinance');
        }.property('reportType'),

        
        includeDate: function() {
            var reportType = this.get('reportType');
            if (!Ember['default'].isEmpty(reportType) && reportType.indexOf('detailed') ===0) {
                this.set('reportColumns.date.include', true);                     
                return true;
            } else {
                this.set('reportColumns.date.include', false);
                return false;
            }
            
        }.property('reportType'),
        
        includeDaysLeft: function() {
            var reportType = this.get('reportType');
            if (reportType === 'daysLeft') {
                this.set('reportColumns.consumedPerDay.include', true);
                this.set('reportColumns.daysLeft.include', true);
                return true;
            } else {
                this.set('reportColumns.consumedPerDay.include', false);
                this.set('reportColumns.daysLeft.include', false);
                return false;
            }
            
        }.property('reportType'),    
        
        includeCostFields: function() {
            var reportType = this.get('reportType');
            if (reportType === 'detailedTransfer' || reportType === 'summaryTransfer' || reportType === 'daysLeft') {
                this.set('reportColumns.total.include', false);
                this.set('reportColumns.unitcost.include', false);
                return false;
            } else {
                this.set('reportColumns.total.include', true);
                this.set('reportColumns.unitcost.include', true);            
                return true;
            }
        }.property('reportType'),
            
        includeExpenseAccount: function() {    
            var reportType = this.get('reportType');
            switch (reportType) {
                case 'detailedAdjustment':
                case 'detailedTransfer':                            
                case 'detailedUsage': {
                    return true;
                }
                case 'detailedExpense': {
                    this.set('reportColumns.expenseAccount.include', true);
                    return true;
                }        
                default: {
                    this.set('reportColumns.expenseAccount.include', false);
                    return false;
                }
            }
        }.property('reportType'),
        
        includeTransactionType: function() {
            var reportType = this.get('reportType');
            if (reportType === 'detailedAdjustment') {
                this.set('reportColumns.transactionType.include', true);
                return true;
            } else {
                this.set('reportColumns.transactionType.include', false);
                return false;
            }        
        }.property('reportType'),

        showEffectiveDate: function() {
            var reportType = this.get('reportType');
            if (reportType === 'valuation' || reportType === 'byLocation') {
                this.set('startDate', null);
                if (Ember['default'].isEmpty(this.get('endDate'))) {
                    this.set('endDate', new Date());
                }
                return true;
            } else {
                if (Ember['default'].isEmpty(this.get('startDate'))) {
                    this.set('startDate', new Date());
                }    
                return false;
            }
        }.property('reportType'),
        
        useFieldPicker: function() {
            var reportType = this.get('reportType');
            return (reportType !== 'expiration' && reportType !== 'summaryFinance');
        }.property('reportType'),

        _addAisleColumn: function(locations) {
            if (!Ember['default'].isEmpty(locations)) {
                return locations.map(function(location) {
                    if (location.name.indexOf(':') > -1) {
                        return location.name.split(':')[1];
                    }
                });
            }
        },
        
        _addLocationColumn: function(locations) {
            if (!Ember['default'].isEmpty(locations)) {
                var returnLocations = [];
                locations.forEach(function(location) {
                    var formattedName;
                    if (location.name.indexOf('From:') === 0) {
                        formattedName = location.name;
                    } else {
                        formattedName = this._getWarehouseLocationName(location.name);
                    }
                    if (!returnLocations.contains(formattedName)) {
                        returnLocations.push(formattedName);
                    }
                }.bind(this));
                return returnLocations;
            }
        },
        
        _addReportRow: function(row, skipNumberFormatting, reportColumns, rowAction) {
            if (Ember['default'].isEmpty(rowAction) && !Ember['default'].isEmpty(row.inventoryItem) && !Ember['default'].isEmpty(row.inventoryItem._id)) {
                rowAction = {
                    action: 'viewInventory',
                    model: row.inventoryItem._id.substr(10)
                };
            }
            this._super(row, skipNumberFormatting, reportColumns, rowAction);
        },
        
        _addTotalsRow: function(label, summaryCost, summaryQuantity) {
            if (summaryQuantity > 0) {
                this._addReportRow({
                    totalCost: label +  this._numberFormat(summaryCost),
                    quantity: label + this._numberFormat(summaryQuantity),
                    unitCost: label + this._numberFormat(summaryCost/summaryQuantity)
                }, true);
            }        
        },
        
        /**
         * Adjust the specified location by the specified quantity
         * @param {array} locations the list of locations to adjust from
         * @param {string} locationName the name of the location to adjust
         * @param {integer} quantity the quantity to adjust.
         * @param {boolean} increment boolean indicating if the adjustment is an increment; or false if decrement.
         */
        _adjustLocation: function(locations, locationName, quantity, increment) {
            var locationToUpdate = locations.findBy('name', locationName);
            if (Ember['default'].isEmpty(locationToUpdate)) {
                locationToUpdate = {
                    name: locationName,
                    quantity: 0
                };
                locations.push(locationToUpdate);
            }
            if (increment) {
                locationToUpdate.quantity += quantity;
            } else {
                locationToUpdate.quantity -= quantity;
            }
        },
        
        /**
         * Adjust the specified purchase by the specified quantity.
         * @param {array} purchases the list of purchases to adjust from.
         * @param {string} purchaseId the id of the purchase to adjust.
         * @param {integer} quantity the quantity to adjust.
         * @param {boolean} increment boolean indicating if the adjustment is an increment; or false if decrement.
         */
        _adjustPurchase: function(purchases, purchaseId, quantity, increment) {
            var purchaseToAdjust = purchases.findBy('_id', 'inv-purchase_'+purchaseId);
            if (!Ember['default'].isEmpty(purchaseToAdjust)) {
                var calculatedQuantity = purchaseToAdjust.calculatedQuantity;
                if (increment) {
                    calculatedQuantity += quantity;
                } else {
                    calculatedQuantity -= quantity;
                }
                purchaseToAdjust.calculatedQuantity = calculatedQuantity;
            }        
        },
        
        _calculateCosts: function(inventoryPurchases, row) {
            //Calculate quantity and cost per unit for the row
            if (!Ember['default'].isEmpty(inventoryPurchases)) {
                inventoryPurchases.forEach(function(purchase) {
                    var costPerUnit = this._calculateCostPerUnit(purchase),
                        quantity = purchase.calculatedQuantity;                                    
                    row.quantity += purchase.calculatedQuantity;
                    row.totalCost += (quantity * costPerUnit);
                }.bind(this));
            }
            if (row.totalCost === 0 || row.quantity === 0) {
                row.unitCost = 0;
            } else {
                row.unitCost = (row.totalCost/row.quantity);
            }
            return row;
        },

        _calculateUsage: function(inventoryPurchases, row) {
            //Calculate quantity and cost per unit for the row
            if (!Ember['default'].isEmpty(inventoryPurchases)) {
                inventoryPurchases.forEach(function(purchase) {
                    var costPerUnit = this._calculateCostPerUnit(purchase),
                        quantity = purchase.calculatedQuantity;                                    
                    row.quantity -= purchase.calculatedQuantity;
                    row.totalCost -= (quantity * costPerUnit);
                }.bind(this));
            }
            if (row.totalCost === 0 || row.quantity === 0) {
                row.unitCost = 0;
            } else {
                row.unitCost = (row.totalCost/row.quantity);
            }
            return row;
        },
        
        _calculateCostPerUnit: function(purchase) {
            var purchaseCost = purchase.purchaseCost,
                quantity = parseInt(purchase.originalQuantity);
            if (Ember['default'].isEmpty(purchaseCost) || Ember['default'].isEmpty(quantity)) {
                return 0;
            }
            return Number((purchaseCost/quantity).toFixed(2));
        },
        
        _findInventoryItems: function(queryParams, view, inventoryList, childName) {
            if (Ember['default'].isEmpty(inventoryList)) {
                inventoryList = {};
            }
            var pouchdbController = this.get('pouchdbController');
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                pouchdbController.queryMainDB(queryParams, view).then(function(inventoryChildren) {
                    var inventoryKeys = Ember['default'].keys(inventoryList),
                        inventoryIds = [];
                    if (!Ember['default'].isEmpty(inventoryChildren.rows)) {
                        inventoryChildren.rows.forEach(function (child) {
                            if (child.doc.inventoryItem && !inventoryKeys.contains(child.doc.inventoryItem)) {
                                inventoryIds.push(child.doc.inventoryItem);
                                inventoryKeys.push(child.doc.inventoryItem);
                            }
                        });
                    }
                    this._getInventoryItems(inventoryIds, inventoryList).then(function(inventoryMap) {
                        //Link inventory children to inventory items
                        inventoryChildren.rows.forEach(function(child) {
                            var childItem = inventoryMap[child.doc.inventoryItem];
                            if (!Ember['default'].isEmpty(childItem)) {
                                var itemChildren = childItem[childName];
                                if (Ember['default'].isEmpty(itemChildren)) {
                                    itemChildren = [];
                                }
                                itemChildren.push(child.doc);
                                childItem[childName] = itemChildren;
                            }
                        });
                        resolve(inventoryMap);
                    }, reject);
                }.bind(this), reject);
            }.bind(this));
        },    
        
        _findInventoryItemsByPurchase: function(reportTimes, inventoryMap) {
            return this._findInventoryItems({
                startkey: [reportTimes.startTime,'inv-purchase_'],
                endkey: [reportTimes.endTime,'inv-purchase_\uffff'],
                include_docs: true,
            }, 'inventory_purchase_by_date_received', inventoryMap, 'purchaseObjects');
        },
        
        _findInventoryItemsByRequest: function(reportTimes, inventoryMap) {
            return this._findInventoryItems({
                startkey: ['Completed',reportTimes.startTime,'inv-request_'],            
                endkey: ['Completed',reportTimes.endTime,'inv-request_\uffff'],
                include_docs: true,
            }, 'inventory_request_by_status', inventoryMap, 'requestObjects');
        },    
        
        _finishExpenseReport: function(reportType) {
            var expenseCategories = this.get('expenseCategories'),
                expenseMap = this.get('expenseMap');            
            expenseCategories.forEach(function(category) {
                var categoryTotal = 0,
                    expenseAccountName,
                    totalLabel;
                this._addReportRow({
                    inventoryItem: {
                        name: 'Expenses for: '+category
                    }
                });
                expenseMap[category].expenseAccounts.forEach(function(expenseAccount) {
                    if (reportType === 'detailedExpense') {
                        expenseAccount.reportRows.forEach(function(row) {
                            this._addReportRow(row);
                        }.bind(this));
                    }
                    if (Ember['default'].isEmpty(expenseAccount.name)) {
                        expenseAccountName = '(No Account)';
                    } else {
                        expenseAccountName = expenseAccount.name;
                    }
                    totalLabel = 'Subtotal for %@: '.fmt(category+' - '+expenseAccountName);
                    this._addReportRow({
                        totalCost: totalLabel +  this._numberFormat(expenseAccount.total)
                    }, true);
                    categoryTotal += expenseAccount.total;
                }.bind(this));
               totalLabel = 'Total for %@: '.fmt(category);
                this._addReportRow({
                    totalCost: totalLabel +  this._numberFormat(categoryTotal)
                }, true);
                this.incrementProperty('grandCost', categoryTotal);
            }.bind(this));  
            this._addReportRow({
                totalCost: 'Total: ' +  this._numberFormat(this.get('grandCost'))
            }, true);
        },
        
        _finishLocationReport: function() {
            var currentLocation = '',
                locationCost = 0,
                locationSummary = this.get('locationSummary'),
                parentLocation = '',
                parentCount = 0;                    
            locationSummary = locationSummary.sortBy('name');
            locationSummary.forEach(function(location) {
                parentLocation = this._getWarehouseLocationName(location.name);
                if (currentLocation !== parentLocation) {
                    this._addTotalsRow('Total for %@: '.fmt(currentLocation), locationCost, parentCount);
                    parentCount = 0;
                    locationCost = 0;
                    currentLocation = parentLocation;
                }
                if (this._includeLocation(parentLocation)) {
                    for (var id in location.items) {
                        if (location.items[id].quantity > 0) {
                            this._addReportRow({
                                giftInKind: location.items[id].giftInKind,
                                inventoryItem: location.items[id].item,
                                quantity: location.items[id].quantity,
                                locations: [{
                                    name: location.name
                                }], 
                                totalCost: location.items[id].totalCost,
                                unitCost: location.items[id].unitCost
                            });
                            parentCount += this._getValidNumber(location.items[id].quantity);
                            locationCost += this._getValidNumber(location.items[id].totalCost);
                            this.incrementProperty('grandCost', this._getValidNumber(location.items[id].totalCost));
                            this.incrementProperty('grandQuantity', this._getValidNumber(location.items[id].quantity));
                        }
                    }
                }
            }.bind(this));
            if (parentCount > 0) {
                this._addTotalsRow('Total for %@: '.fmt(parentLocation), locationCost, parentCount);
            }
        },
        
        _generateExpirationReport: function() {
            var grandQuantity = 0,
                pouchdbController = this.get('pouchdbController'),
                reportRows = this.get('reportRows'),
                reportTimes = this._getDateQueryParams();
            pouchdbController.queryMainDB({
                startkey:  [reportTimes.startTime, 'inv-purchase_'],
                endkey: [reportTimes.endTime, 'inv-purchase_\uffff'], 
                include_docs: true,
            }, 'inventory_purchase_by_expiration_date').then(function(inventoryPurchases) {
                var purchaseDocs = [],
                    inventoryIds = [];
                
                inventoryPurchases.rows.forEach(function(purchase) {
                    if (purchase.doc.currentQuantity > 0 && !Ember['default'].isEmpty(purchase.doc.expirationDate)) {
                        purchaseDocs.push(purchase.doc);
                        inventoryIds.push(purchase.doc.inventoryItem);                    
                    }
                }.bind(this));
                this._getInventoryItems(inventoryIds).then(function(inventoryMap) {
                    purchaseDocs.forEach(function(purchase) {
                        var currentQuantity = purchase.currentQuantity,
                            expirationDate = new Date(purchase.expirationDate),
                            inventoryItem = inventoryMap[purchase.inventoryItem];
                        if (inventoryItem && this._includeLocation(purchase.location)) {
                            reportRows.addObject([
                                inventoryItem.friendlyId,
                                inventoryItem.name,
                                currentQuantity,
                                inventoryItem.distributionUnit,
                                moment(expirationDate).format('l'),
                                this.formatLocationName(purchase.location, purchase.aisleLocation)
                            ]);                    
                            grandQuantity += currentQuantity;
                        }
                    }.bind(this));
                    reportRows.addObject([
                        '','','Total: ' + grandQuantity, '', ''
                    ]);
                    this.set('showReportResults', true);
                    this.set('reportHeaders', ['Id','Name','Current Quantity','Distribution Unit','Expiration Date', 'Location']);
                    this._generateExport();
                    this._setReportTitle();
                    this.closeProgressModal();
                }.bind(this));
            }.bind(this));
            
        },
        
        _generateFinancialSummaryReport: function() {
            var reportTimes = this._getDateQueryParams();
            /*
            step 1: find the valuation as of start date, 
            meaning that we need to exchange the end date to be the start date and then tabulate the value
            */
            this._calculateBeginningBalance(reportTimes).then(function(beginningBalance) {
                this._generateSummaries(reportTimes).then(function(inventoryAdjustment) {
                    var i = this._numberFormat(beginningBalance+inventoryAdjustment);
                    if ((beginningBalance+inventoryAdjustment) < 0) {
                        this.get('reportRows').addObject(['Ending Balance', '', '('+i+')']);  
                    } else {
                        this.get('reportRows').addObject(['Ending Balance', '', i]);  
                    }
                    this.set('showReportResults', true);
                    this.set('reportHeaders', ['Category', 'Type', 'Total']);
                    this._generateExport();
                    this._setReportTitle();
                    this.closeProgressModal();
                }.bind(this), function(err) {
                    this._notifyReportError('Error in _generateFinancialSummaryReport:'+err);
                }.bind(this));
            }.bind(this));
        },
        
        _generateSummaries: function(reportTimes) {
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                var adjustedValue = 0;
                /*
                cycle through each purchase and request from the beginning of time until startTime 
                to determine the total value of inventory as of that date/time.
                */
                this._findInventoryItemsByRequest(reportTimes,{}).then(function(inventoryMap) {
                    this._findInventoryItemsByPurchase(reportTimes, inventoryMap).then(function(inventoryMap) {
                        var purchaseSummary = [],
                            consumed = [],
                            gikConsumed = [],
                            adjustments = [];
                        this.adjustmentTypes.forEach(function(adjustmentType) {
                            adjustments[adjustmentType.type] = [];
                        });
                        Ember['default'].keys(inventoryMap).forEach(function(key) {
                            if (Ember['default'].isEmpty(key) || Ember['default'].isEmpty(inventoryMap[key])) {
                                //If the inventory item has been deleted, ignore it.
                                return;
                            }
                            var item = inventoryMap[key];

                            if (!Ember['default'].isEmpty(item.purchaseObjects)) {
                                item.purchaseObjects.forEach(function(purchase) {
                                    purchaseSummary[item.type] = this._getValidNumber(purchaseSummary[item.type]) + this._getValidNumber(purchase.purchaseCost);
                                }.bind(this));
                            }
                            if (!Ember['default'].isEmpty(item.requestObjects)) {
                                item.requestObjects.forEach(function(request) {
                                    //we have three categories here: consumed, gik consumed, and adjustments
                                    if (request.adjustPurchases) {
                                        if (request.transactionType === 'Fulfillment') {
                                            if (request.giftInKind) {
                                                gikConsumed[item.type] = this._getValidNumber(gikConsumed[item.type]) + (this._getValidNumber(request.quantity * request.costPerUnit));
                                            } else {
                                                consumed[item.type] = this._getValidNumber(consumed[item.type]) + (this._getValidNumber(request.quantity * request.costPerUnit));
                                            }
                                        } else {
                                            adjustments[request.transactionType][item.type] = this._getValidNumber(adjustments[request.transactionType][item.type]) + (this._getValidNumber(request.quantity * request.costPerUnit));
                                        }
                                    }
                                }.bind(this));
                            }
                        }.bind(this));
                        //write the purchase rows
                        if (Object.keys(purchaseSummary).length > 0) {
                            var purchaseTotal = 0;
                            this.get('reportRows').addObject(['Purchases', '', '']);  
                            Ember['default'].keys(purchaseSummary).forEach(function(key) {
                                var i = this._getValidNumber( purchaseSummary[key]);
                                purchaseTotal += i;
                                this.get('reportRows').addObject(['', key, this._numberFormat(i)]);    
                            }.bind(this));
                            this.get('reportRows').addObject(['Total Purchases', '', this._numberFormat(purchaseTotal)]);  
                            adjustedValue += purchaseTotal;
                        } 
                        //write the consumed rows                    
                        if (Object.keys(consumed).length > 0 || Object.keys(gikConsumed).length > 0) {
                            this.get('reportRows').addObject(['Consumed', '', '']); 
                            var overallValue = 0;
                            if (Object.keys(consumed).length > 0) {
                                this.get('reportRows').addObject(['Purchases Consumed', '', '']);  
                                var consumedTotal = 0;
                                Ember['default'].keys(consumed).forEach(function(key) {
                                    var i = this._getValidNumber( consumed[key]);
                                    consumedTotal += i;
                                    this.get('reportRows').addObject(['', key, '('+ this._numberFormat(i)+')']);    
                                }.bind(this));
                                overallValue += consumedTotal;
                                this.get('reportRows').addObject(['Total Purchases Consumed', '', '('+ this._numberFormat(consumedTotal)+')']);
                            }
                            if (Object.keys(gikConsumed).length > 0) {
                                this.get('reportRows').addObject(['GIK Consumed', '', '']);  
                                var gikTotal = 0;
                                Ember['default'].keys(gikConsumed).forEach(function(key) {
                                    var i = this._getValidNumber( gikConsumed[key]);
                                    gikTotal += i;
                                    this.get('reportRows').addObject(['', key, '('+ this._numberFormat(i)+')']);    
                                }.bind(this));
                                overallValue += gikTotal;
                                this.get('reportRows').addObject(['Total GIK Consumed', '', '('+this._numberFormat(gikTotal)+')']);
                            }
                            this.get('reportRows').addObject(['Total Consumed', '', '('+this._numberFormat(overallValue)+')']);     
                            adjustedValue -= overallValue;
                        }
                        //write the adjustment rows
                        var adjustmentTotal = 0;
                        this.get('reportRows').addObject(['Adjustments', '', '']);  
                        Ember['default'].keys(adjustments).forEach(function(adjustmentT) {
                            if (Object.keys(adjustments[adjustmentT]).length > 0) {
                                this.get('reportRows').addObject([adjustmentT, '', '']);  
                                Ember['default'].keys(adjustments[adjustmentT]).forEach(function(key) {
                                    var i = this._getValidNumber( adjustments[adjustmentT][key]);
                                    if (adjustmentT === 'Adjustment (Add)' || adjustmentT === 'Return') {
                                        adjustmentTotal += i;
                                        this.get('reportRows').addObject(['', key, i]);    
                                    } else {
                                        adjustmentTotal -= i;
                                        this.get('reportRows').addObject(['', key, '('+this._numberFormat(i)+')']);    
                                    }                                
                                }.bind(this));
                            }
                        }.bind(this));
                        if (adjustmentTotal < 0) {
                            this.get('reportRows').addObject(['Total Adjustments', '', '('+this._numberFormat(adjustmentTotal)+')']);  
                        } else {
                            this.get('reportRows').addObject(['Total Adjustments', '', this._numberFormat(adjustmentTotal)]);  
                        }
                        
                        adjustedValue += adjustmentTotal;
                        resolve(adjustedValue);
                    }.bind(this), reject);
                }.bind(this), reject);  
            }.bind(this));
        },    

        _calculateBeginningBalance: function(reportTimes) {
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                
                var startingValueReportTimes = {
                        startTime: null,
                        endTime: reportTimes.startTime            
                    },
                    beginningBalance = 0;
                /*
                cycle through each purchase and request from the beginning of time until startTime 
                to determine the total value of inventory as of that date/time.
                */
                this._findInventoryItemsByRequest(startingValueReportTimes,{}).then(function(inventoryMap) {
                    this._findInventoryItemsByPurchase(startingValueReportTimes, inventoryMap).then(function(inventoryMap) {
                        Ember['default'].keys(inventoryMap).forEach(function(key) {
                            if (Ember['default'].isEmpty(key) || Ember['default'].isEmpty(inventoryMap[key])) {
                                //If the inventory item has been deleted, ignore it.
                                return;
                            }
                            var item = inventoryMap[key],
                                inventoryPurchases = item.purchaseObjects,
                                inventoryRequests = item.requestObjects,
                                row = {
                                    inventoryItem: item,
                                    quantity: 0,
                                    unitCost: 0,
                                    totalCost: 0
                                };
                            if (!Ember['default'].isEmpty(inventoryPurchases)) {
                                //Setup intial locations for an inventory item
                                inventoryPurchases.forEach(function(purchase) {
                                    var purchaseQuantity = purchase.originalQuantity;
                                    purchase.calculatedQuantity = purchaseQuantity;
                                });
                            }
                            if (!Ember['default'].isEmpty(inventoryRequests)) {
                                inventoryRequests.forEach(function(request) {
                                    var adjustPurchases = request.adjustPurchases,
                                        increment = false,
                                        purchases = request.purchasesAffected,
                                        transactionType = request.transactionType;
                                    increment = (transactionType === 'Adjustment (Add)' || transactionType === 'Return');
                                    if (adjustPurchases) {
                                        if (!Ember['default'].isEmpty(purchases) && !Ember['default'].isEmpty(inventoryPurchases)) {
                                            //Loop through purchase(s) on request and adjust corresponding inventory purchases
                                            purchases.forEach(function(purchaseInfo) {
                                                this._adjustPurchase(inventoryPurchases, purchaseInfo.id, purchaseInfo.quantity, increment);
                                            }.bind(this));
                                        }
                                    } 
                                }.bind(this));
                            }
                            if (!Ember['default'].isEmpty(inventoryPurchases)) {
                                row = this._calculateCosts(inventoryPurchases, row);   
                                beginningBalance += this._getValidNumber(row.totalCost);
                            }
                        }.bind(this));
                        if (beginningBalance < 0) {
                            this.get('reportRows').addObject(['Beginning Balance', '', '('+this._numberFormat(beginningBalance)+')']);  
                        } else {
                            this.get('reportRows').addObject(['Beginning Balance', '', this._numberFormat(beginningBalance)]);  
                        }
                        resolve(beginningBalance);
                    }.bind(this), reject);
                }.bind(this), reject);
            }.bind(this));
        },
        
        _generateInventoryReport: function() {
            this.set('grandCost', 0);
            this.set('grandQuantity', 0);
            this.set('locationSummary', []);
            var dateDiff,            
                locationSummary = this.get('locationSummary'),
                reportType = this.get('reportType'),
                reportTimes = this._getDateQueryParams();
            if (reportType === 'daysLeft') {
                var endDate = this.get('endDate'),
                    startDate = this.get('startDate');
                if (Ember['default'].isEmpty(endDate) || Ember['default'].isEmpty(startDate)) {
                    this.closeProgressModal();
                    return;
                } else {
                    dateDiff = moment(endDate).diff(startDate, 'days');
                }
            }
            this._findInventoryItemsByRequest(reportTimes,{}).then(function(inventoryMap) {
                this._findInventoryItemsByPurchase(reportTimes, inventoryMap).then(function(inventoryMap) {
                    //Loop through each inventory item, looking at the requests and purchases to determine
                    //state of inventory at effective date
                    Ember['default'].keys(inventoryMap).forEach(function(key) {
                        if (Ember['default'].isEmpty(inventoryMap[key])) {
                            //If the inventory item has been deleted, ignore it.
                            return;
                        }
                        var item = inventoryMap[key],
                            inventoryPurchases = item.purchaseObjects,
                            inventoryRequests = item.requestObjects,
                            row = {
                                giftInKind: 'N',
                                inventoryItem: item,
                                quantity: 0,
                                unitCost: 0,
                                totalCost: 0,
                                locations: [
                                ],
                                vendors: [
                                ]
                            };
                        if (!Ember['default'].isEmpty(inventoryPurchases)) {
                            //Setup intial locations for an inventory item
                            inventoryPurchases.forEach(function(purchase) {
                                var locationName = this.getDisplayLocationName(purchase.location, purchase.aisleLocation),
                                    purchaseQuantity = purchase.originalQuantity;
                                purchase.calculatedQuantity = purchaseQuantity;
                                if (purchase.giftInKind === true) {
                                    row.giftInKind = 'Y';
                                }
                                if (!Ember['default'].isEmpty(purchase.vendor)) {
                                    if (!row.vendors.contains(purchase.vendor)) {
                                        row.vendors.push(purchase.vendor);
                                    }
                                }
                                this._adjustLocation(row.locations, locationName, purchaseQuantity, true);
                            }.bind(this));
                        }

                        if(!Ember['default'].isEmpty(inventoryRequests)) {
                            inventoryRequests.forEach(function(request) {
                                var adjustPurchases = request.adjustPurchases,
                                    increment = false,
                                    locations = request.locationsAffected,
                                    purchases = request.purchasesAffected,
                                    transactionType = request.transactionType;


                                increment = (transactionType === 'Adjustment (Add)' || transactionType === 'Return');
                                if (adjustPurchases) {
                                    if (!Ember['default'].isEmpty(purchases) && !Ember['default'].isEmpty(inventoryPurchases)) {
                                        //Loop through purchase(s) on request and adjust corresponding inventory purchases
                                        purchases.forEach(function(purchaseInfo) {
                                            this._adjustPurchase(inventoryPurchases, purchaseInfo.id, purchaseInfo.quantity, increment);
                                        }.bind(this));
                                    }
                                } else if (transactionType === 'Transfer') {
                                    //Increment the delivery location
                                    var locationName = this.getDisplayLocationName(request.deliveryLocation, request.deliveryAisle);
                                    this._adjustLocation(row.locations,  locationName, request.quantity, true);
                                }
                                //Loop through locations to adjust location quantity
                                locations.forEach(function(locationInfo){
                                    this._adjustLocation(row.locations,  locationInfo.name, locationInfo.quantity, increment);
                                }.bind(this));
                            }.bind(this));
                        }

                        var summaryCost = 0,
                            summaryQuantity = 0;

                        switch(reportType) {
                            case 'byLocation': {
                                row.locations.forEach(function(location) {
                                    var locationToUpdate = locationSummary.findBy('name', location.name);
                                    if (Ember['default'].isEmpty(locationToUpdate)) {
                                        locationToUpdate = Ember['default'].copy(location);
                                        locationToUpdate.items = {};
                                        locationSummary.push(locationToUpdate);
                                    } else {
                                        locationToUpdate.quantity += this._getValidNumber(location.quantity);
                                    }
                                    var costData = this._calculateCosts(inventoryPurchases, {
                                        quantity: 0,
                                        totalCost: 0
                                    });
                                    locationToUpdate.items[item._id] = {
                                        item: item,
                                        quantity: this._getValidNumber(location.quantity),
                                        giftInKind: row.giftInKind,                                
                                        totalCost: (this._getValidNumber(costData.unitCost) * this._getValidNumber(location.quantity)),
                                        unitCost: this._getValidNumber(costData.unitCost)
                                    };
                                }.bind(this));
                                break;
                            }
                            case 'daysLeft': {
                                if (!Ember['default'].isEmpty(inventoryRequests) && this._hasIncludedLocation(row.locations)) {
                                    var consumedQuantity = inventoryRequests.reduce(function(previousValue, request) {
                                        if (request.transactionType === 'Fulfillment') {
                                            return previousValue += this._getValidNumber(request.quantity);
                                        } else {
                                            return previousValue;
                                        }
                                    }.bind(this), 0);
                                    row.quantity = this._getValidNumber(item.quantity);
                                    if (consumedQuantity > 0) {
                                        row.consumedPerDay = this._numberFormat((consumedQuantity/dateDiff), true);
                                        row.daysLeft = this._numberFormat(row.quantity/row.consumedPerDay);
                                    } else {
                                        if (consumedQuantity ===0) {
                                            row.consumedPerDay = '0';
                                        } else {
                                            row.consumedPerDay = '?'+consumedQuantity;                                        
                                        }
                                        row.daysLeft = '?';
                                    }
                                    this._addReportRow(row);
                                }
                                break;
                            }   
                            case 'detailedAdjustment': 
                            case 'detailedTransfer':                            
                            case 'detailedUsage': 
                            case 'detailedExpense': 
                            case 'summaryExpense': {
                                if (!Ember['default'].isEmpty(inventoryRequests)) {
                                    inventoryRequests.forEach(function(request) { 
                                        if (this._includeTransaction(reportType, request.transactionType) && this._hasIncludedLocation(request.locationsAffected)) {
                                            var deliveryLocation = this.getDisplayLocationName(request.deliveryLocation, request.deliveryAisle),
                                                locations = [],
                                                totalCost = (this._getValidNumber(request.quantity) * this._getValidNumber(request.costPerUnit)); 
                                            locations = request.locationsAffected.map(function(location) {
                                                if (reportType === 'detailedTransfer') {
                                                    return {
                                                        name: 'From: %@ To: %@'.fmt(location.name, deliveryLocation)
                                                    };
                                                } else {
                                                    return {
                                                        name: '%@ from %@'.fmt(this._getValidNumber(location.quantity), location.name)
                                                    };                                        
                                                }
                                            }.bind(this));
                                            var reportRow = {                                            
                                                date: moment(new Date(request.dateCompleted)).format('l'),
                                                expenseAccount: request.expenseAccount,
                                                giftInKind: row.giftInKind,
                                                inventoryItem: row.inventoryItem,
                                                quantity: request.quantity,
                                                transactionType: request.transactionType,
                                                locations: locations,
                                                unitCost: request.costPerUnit,
                                                totalCost: totalCost
                                            };                                        
                                            if (reportType === 'detailedExpense' || reportType === 'summaryExpense') {
                                                this._updateExpenseMap(request, reportRow);
                                            } else {
                                                this._addReportRow(reportRow);
                                                summaryQuantity += this._getValidNumber(request.quantity);
                                                summaryCost += this._getValidNumber(totalCost);
                                            }
                                        }
                                    }.bind(this));
                                    if (reportType !== 'detailedExpense' && reportType !== 'summaryExpense') {
                                        this._addTotalsRow('Subtotal: ', summaryCost, summaryQuantity);
                                        this.incrementProperty('grandCost', summaryCost);
                                        this.incrementProperty('grandQuantity', summaryQuantity);
                                    }
                                }
                                break;
                            }
                            case 'summaryTransfer':
                            case 'summaryUsage': {
                                if (!Ember['default'].isEmpty(inventoryRequests) && this._hasIncludedLocation(row.locations)) {
                                    row.quantity = inventoryRequests.reduce(function(previousValue, request) {
                                        if (this._includeTransaction(reportType, request.transactionType)) {
                                            var totalCost = (this._getValidNumber(request.quantity) * this._getValidNumber(request.costPerUnit)); 
                                            summaryCost += totalCost;
                                            return previousValue += this._getValidNumber(request.quantity);
                                        } else {
                                            return previousValue;
                                        }
                                    }.bind(this), 0);
                                    if (row.quantity > 0) {
                                        row.totalCost = summaryCost;
                                        row.unitCost = (summaryCost/row.quantity);
                                        this._addReportRow(row);
                                        this.incrementProperty('grandCost', summaryCost);
                                        this.incrementProperty('grandQuantity', row.quantity);
                                    }
                                }
                                break;
                            }
                            case 'detailedPurchase': {
                                if (!Ember['default'].isEmpty(inventoryPurchases)) {
                                    inventoryPurchases.forEach(function(purchase) {
                                        if (this._includeLocation(purchase.location)) {
                                            var giftInKind = 'N';
                                            if (purchase.giftInKind === true) {
                                                giftInKind = 'Y';
                                            }
                                            this._addReportRow({
                                                date: moment(new Date(purchase.dateReceived)).format('l'),
                                                giftInKind: giftInKind,
                                                inventoryItem: row.inventoryItem,
                                                quantity: purchase.originalQuantity,
                                                unitCost: purchase.costPerUnit,
                                                totalCost: purchase.purchaseCost,
                                                locations: [{
                                                    name: this.getDisplayLocationName(purchase.location, purchase.aisleLocation)
                                                }]
                                            });
                                            summaryCost += this._getValidNumber(purchase.purchaseCost);
                                            summaryQuantity += this._getValidNumber(purchase.originalQuantity);
                                        }
                                    }.bind(this));
                                    this._addTotalsRow('Subtotal: ',summaryCost, summaryQuantity);
                                    this.incrementProperty('grandCost', summaryCost);
                                    this.incrementProperty('grandQuantity', summaryQuantity);
                                }
                                break;
                            }
                            case 'summaryPurchase': {
                                if (!Ember['default'].isEmpty(inventoryPurchases)) {
                                    row.locations = [];
                                    row.quantity = inventoryPurchases.reduce(function(previousValue, purchase) {
                                        summaryCost += this._getValidNumber(purchase.purchaseCost);
                                        var locationName = this.getDisplayLocationName(purchase.location, purchase.aisleLocation);
                                        if (!row.locations.findBy('name', locationName)) {
                                            row.locations.push({
                                                name: this.getDisplayLocationName(purchase.location, purchase.aisleLocation)
                                            });
                                        }
                                        return previousValue += this._getValidNumber(purchase.originalQuantity);
                                    }.bind(this), 0);
                                    if (this._hasIncludedLocation(row.locations)) {
                                        row.unitCost = (summaryCost/row.quantity);
                                        row.totalCost = summaryCost;
                                        this._addReportRow(row);
                                        this.incrementProperty('grandCost', summaryCost);
                                        this.incrementProperty('grandQuantity', row.quantity);
                                    }
                                }
                                break;
                            }                                        
                            case 'valuation': {
                                if (!Ember['default'].isEmpty(inventoryPurchases) && this._hasIncludedLocation(row.locations)) {
                                    this._calculateCosts(inventoryPurchases, row);
                                    this.incrementProperty('grandCost', this._getValidNumber(row.totalCost));
                                    this.incrementProperty('grandQuantity', this._getValidNumber(row.quantity));
                                    this._addReportRow(row);
                                }
                                break;
                            }
                        }
                    }.bind(this));
                    switch (reportType) {                    
                        case 'detailedExpense': 
                        case 'summaryExpense': {
                            this._finishExpenseReport(reportType);
                            break;
                        }
                        case 'byLocation': {
                            this._finishLocationReport();
                            this._addTotalsRow('Total: ', this.get('grandCost'), this.get('grandQuantity'));
                            break;
                        }
                        default: {
                            this._addTotalsRow('Total: ', this.get('grandCost'), this.get('grandQuantity'));
                        }
                    }                 
                    this._finishReport();
                }.bind(this), function(err) {
                    this._notifyReportError('Error in _findInventoryItemsByPurchase:'+err);
                }.bind(this));
            }.bind(this), function(err) {
                this._notifyReportError('Error in _findInventoryItemsByRequest:'+err);
            }.bind(this));
        },
        
        _getDateQueryParams: function() {
            var endDate = this.get('endDate'),
                endTime = this.get('maxValue'),
                startDate = this.get('startDate'),
                startTime;  
            if (!Ember['default'].isEmpty(endDate)) {
                endTime = moment(endDate).endOf('day').toDate().getTime();
            }
            if (!Ember['default'].isEmpty(startDate)) {
                startTime = moment(startDate).startOf('day').toDate().getTime();
            }
            return {
                endTime: endTime,
                startTime: startTime            
            };
        },
        
        _getInventoryItems: function(inventoryIds, inventoryMap) {
            var pouchdbController = this.get('pouchdbController');
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                if (Ember['default'].isEmpty(inventoryMap)) {
                    inventoryMap = {};
                }
                pouchdbController.queryMainDB({
                    keys: inventoryIds,
                    include_docs: true
                }).then(function(inventoryItems) {
                    inventoryItems.rows.forEach(function(inventoryItem) {
                        inventoryMap[inventoryItem.id] = inventoryItem.doc;
                    });
                    resolve(inventoryMap);
                }, reject);
            });
        },
        
        /**
         * Pull the warehouse name out of a formatted location name that (may) include the aisle location
         * @param {string} locationName the formatted location name.
         * @return {string} the warehouse name.
         */
        _getWarehouseLocationName: function(locationName) {
            var returnLocation = '';
            if (locationName.indexOf(':') > -1) {
                returnLocation = locationName.split(':')[0].trim();
            } else {
                returnLocation = locationName;
            }
            return returnLocation;
        },
        
        /**
         * Determines if any of the passed in location objects match the currently filtered location
         * @param {array} locations list of location objects to check.
         * @return {boolean} true if any of the locations match the filter; otherwise false.
         */
        _hasIncludedLocation: function(locations) {
            var hasIncludedLocation = false;
            locations.forEach(function(location) {
                var locationName = this._getWarehouseLocationName(location.name);
                if (this._includeLocation(locationName)) {
                    hasIncludedLocation = true;
                }
            }.bind(this));
            return hasIncludedLocation;
        },
        
        
        /**
         * Determine if the specified location should be included in the report
         * @param {string} location the location to check for inclusion
         * @return {boolean} true if the location should be included.
         */
        _includeLocation: function(location) {
            var filterLocation = this.get('filterLocation');
            return Ember['default'].isEmpty(filterLocation) || location === filterLocation;        
        },
        
        /**
         * Given a report type and a transaction type determine if the transaction should 
         * be included in the report.
         * @param {string} reportType the report type
         * @param {string} transactionType the transaction type
         * @return {boolean} true if the transaction should be included.
         */
        _includeTransaction: function(reportType, transactionType) {
            var detailed = (reportType.indexOf('detailed') === 0),
                includeForReportType;
            if (reportType === 'detailedExpense' || reportType === 'summaryExpense') {
                return true;
            }
            switch (transactionType) {
                case 'Fulfillment': {
                    if (detailed) {
                        includeForReportType = 'detailedUsage';
                    } else {
                        includeForReportType = 'summaryUsage';
                    }
                    break;
                }
                case 'Transfer': {
                    if (detailed) {
                        includeForReportType = 'detailedTransfer';
                    } else {
                        includeForReportType = 'summaryTransfer';
                    }
                    break;                
                }
                default: {
                    if (detailed) {
                        includeForReportType = 'detailedAdjustment';
                    } else {
                        includeForReportType = 'summaryAdjustment';
                    }
                }
            }
            return (reportType === includeForReportType);
        },
        
        _updateExpenseMap: function(request, reportRow) {
            var categoryToUpdate,
                expenseAccountToUpdate,
                expenseMap = this.get('expenseMap'),
                isGiftInKind = (reportRow.giftInKind === 'Y'),
                increment = true,
                transactionValue;
                    
            switch (request.transactionType) {
                case 'Fulfillment': 
                case 'Return': {               
                    if (isGiftInKind) {
                        categoryToUpdate = expenseMap['Gift In Kind Usage'];
                    } else {
                        categoryToUpdate = expenseMap['Inventory Consumed'];
                    }
                    if (request.transactionType  === 'Return') {
                        increment = false;
                    }
                    break;
                    
                }
                case 'Adjustment (Add)': 
                case 'Adjustment (Remove)': 
                case 'Return To Vendor':
                case 'Write Off': {     
                    categoryToUpdate = expenseMap['Inventory Obsolence'];
                    if (request.transactionType === 'Adjustment (Add)') {
                        increment = false;
                    }
                    break;
                }           
            }
            if (!Ember['default'].isEmpty(categoryToUpdate)) {
                expenseAccountToUpdate = categoryToUpdate.expenseAccounts.findBy('name',request.expenseAccount);
                if (Ember['default'].isEmpty(expenseAccountToUpdate)) {                
                    expenseAccountToUpdate = {
                        name: request.expenseAccount,
                        total: 0,
                        reportRows: []
                    };
                    categoryToUpdate.expenseAccounts.push(expenseAccountToUpdate);
                }
                expenseAccountToUpdate.reportRows.push(reportRow);
                transactionValue = (this._getValidNumber(request.quantity) * this._getValidNumber(request.costPerUnit)); 
                if (increment) {
                    categoryToUpdate.total += transactionValue;                
                    expenseAccountToUpdate.total += transactionValue;                
                } else {
                    categoryToUpdate.total = categoryToUpdate.total - transactionValue; 
                    expenseAccountToUpdate.total = expenseAccountToUpdate.total - transactionValue;
                    reportRow.totalCost = (reportRow.totalCost * -1);
                }
                
                
            }
        },    
        
        actions: {
            generateReport: function() {
                var endDate = this.get('endDate'),
                    reportRows = this.get('reportRows'),
                    reportType = this.get('reportType'),
                    startDate = this.get('startDate');
                if (Ember['default'].isEmpty(startDate) && Ember['default'].isEmpty(endDate)) {
                    return;
                }
                reportRows.clear(); 
                this.showProgressModal();
                switch (reportType) {
                    case 'expiration': {
                        this._generateExpirationReport();
                        break;                    
                    }
                    case 'summaryFinance': {
                        this._generateFinancialSummaryReport();
                        break;
                    }
                    case 'detailedExpense':
                    case 'summaryExpense': {                    
                        var expenseCategories = this.get('expenseCategories'),
                            expenseMap = {};
                        expenseCategories.forEach(function(category) {
                            expenseMap[category] = {
                                total: 0,
                                expenseAccounts: []
                            };
                        });
                        this.set('expenseMap', expenseMap);                    
                        this._generateInventoryReport();
                        break;                    
                    }
                    default: {
                        this._generateInventoryReport();
                        break;
                    }
                }
            },
            
            viewInventory: function(id) {
                this.store.find('inventory', id).then(function(item) {
                    item.set('returnTo', 'inventory.reports');                
                    this.transitionToRoute('inventory.edit', item);
                }.bind(this));
            }
        }
    });

});
define('hospitalrun/inventory/reports/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember'], function (exports, AbstractIndexRoute, Ember) {

    'use strict';

    exports['default'] = AbstractIndexRoute['default'].extend({
        pageTitle: 'Inventory Report',

        //No model for reports; data gets retrieved when report is run.
        model: function() {
            return Ember['default'].RSVP.resolve();
        },

    });

});
define('hospitalrun/inventory/reports/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n            <div class=\"row\">\n                ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-xs-6"),
      'label': ("Report Type"),
      'property': ("reportType"),
      'content': ("reportTypes"),
      'optionValuePath': ("content.value"),
      'optionLabelPath': ("content.name"),
      'selected': ("reportType")
    },hashTypes:{'class': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'selected': "ID"},hashContexts:{'class': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'selected': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n                ");
    stack1 = helpers.unless.call(depth0, "hideLocationFilter", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </div>\n            <div class=\"row\">\n                ");
    stack1 = helpers['if'].call(depth0, "showEffectiveDate", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(6, program6, data),fn:self.program(4, program4, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </div>        \n            ");
    stack1 = helpers['if'].call(depth0, "useFieldPicker", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        \n        ");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-xs-6"),
      'label': ("Location"),
      'property': ("filterLocation"),
      'content': ("warehouseList.value"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content"),
      'prompt': (" ")
    },hashTypes:{'class': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'prompt': "STRING"},hashContexts:{'class': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'prompt': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n                ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("endDate"),
      'label': ("Effective Date"),
      'class': ("col-sm-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n                ");
    return buffer;
    }

  function program6(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("startDate"),
      'label': ("Start Date"),
      'class': ("col-sm-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("endDate"),
      'label': ("End Date"),
      'class': ("col-sm-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n                ");
    return buffer;
    }

  function program8(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                <h3>Fields to Include</h3>\n                <div class=\"row\">\n                    <div class=\"col-xs-1\"></div>\n                    ");
    stack1 = helpers['if'].call(depth0, "includeDate", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.id.label"),
      'property': ("reportColumns.id.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.name.label"),
      'property': ("reportColumns.name.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.description.label"),
      'property': ("reportColumns.description.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.type.label"),
      'property': ("reportColumns.type.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("                        \n                </div>\n                <div class=\"row\">\n                    <div class=\"col-xs-1\"></div>                \n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.quantity.label"),
      'property': ("reportColumns.quantity.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.unit.label"),
      'property': ("reportColumns.unit.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    stack1 = helpers['if'].call(depth0, "includeCostFields", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    ");
    stack1 = helpers['if'].call(depth0, "includeDaysLeft", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(13, program13, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.price.label"),
      'property': ("reportColumns.price.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-xs-1\"></div>\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.reorder.label"),
      'property': ("reportColumns.reorder.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.gift.label"),
      'property': ("reportColumns.gift.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.locations.label"),
      'property': ("reportColumns.locations.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.aisle.label"),
      'property': ("reportColumns.aisle.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.xref.label"),
      'property': ("reportColumns.xref.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    \n                </div>\n                <div class=\"row\">\n                    <div class=\"col-xs-1\"></div>        \n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.vendor.label"),
      'property': ("reportColumns.vendor.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    stack1 = helpers['if'].call(depth0, "includeExpenseAccount", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(15, program15, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    \n                    ");
    stack1 = helpers['if'].call(depth0, "includeTransactionType", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(17, program17, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </div>\n            ");
    return buffer;
    }
  function program9(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                        ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.date.label"),
      'property': ("reportColumns.date.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    return buffer;
    }

  function program11(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("                    \n                        ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.total.label"),
      'property': ("reportColumns.total.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                        ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.unitcost.label"),
      'property': ("reportColumns.unitcost.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    return buffer;
    }

  function program13(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                        ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.consumedPerDay.label"),
      'property': ("reportColumns.consumedPerDay.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                        ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.daysLeft.label"),
      'property': ("reportColumns.daysLeft.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("                    \n                    ");
    return buffer;
    }

  function program15(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                        ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.expenseAccount.label"),
      'property': ("reportColumns.expenseAccount.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    return buffer;
    }

  function program17(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                        ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.transactionType.label"),
      'property': ("reportColumns.transactionType.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    return buffer;
    }

  function program19(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    <div class=\"panel panel-primary\">\n        <div class=\"panel-heading\">\n            <h3 class=\"panel-title\">");
    stack1 = helpers._triageMustache.call(depth0, "reportTitle", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "paging", options) : helperMissing.call(depth0, "partial", "paging", options))));
    data.buffer.push("</h3>\n        </div>\n        <div class=\"panel-body\">\n            <table class=\"table\">\n                <tr class=\"table-header\">\n                    ");
    stack1 = helpers.each.call(depth0, "reportHeaders", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(20, program20, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </tr>\n                ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "report-rows", options) : helperMissing.call(depth0, "partial", "report-rows", options))));
    data.buffer.push("\n            </table>\n        </div>\n        <div class=\"panel-footer\">\n            <a ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'href': ("csvExport")
    },hashTypes:{'href': "STRING"},hashContexts:{'href': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(" target=\"_blank\" download=\"report.csv\" class=\"btn btn-default\">Export Report</a>\n\n        </div>    \n    </div>\n");
    return buffer;
    }
  function program20(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                        <th>\n                            ");
    stack1 = helpers._triageMustache.call(depth0, "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </th>\n                    ");
    return buffer;
    }

    data.buffer.push("<div class=\"panel panel-primary\">\n    <div class=\"panel-body\">\n        ");
    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </div>\n    <div class=\"panel-footer\">\n        <button class=\"btn btn-default\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "generateReport", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">Generate Report</button>\n    </div>\n</div>\n");
    stack1 = helpers['if'].call(depth0, "showReportResults", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(19, program19, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    return buffer;
    
  });

});
define('hospitalrun/inventory/request/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/fulfill-request', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/inventory-selection', 'ember'], function (exports, AbstractEditController, FulfillRequest, InventoryLocations, InventorySelection, Ember) {

   'use strict';

   exports['default'] = AbstractEditController['default'].extend(FulfillRequest['default'], InventoryLocations['default'], InventorySelection['default'], {    
       needs: ['inventory','pouchdb'],
       
       cancelAction: 'allRequests',
      
       warehouseList: Ember['default'].computed.alias('controllers.inventory.warehouseList'),
       aisleLocationList: Ember['default'].computed.alias('controllers.inventory.aisleLocationList'),
       expenseAccountList: Ember['default'].computed.alias('controllers.inventory.expenseAccountList'),
       
       inventoryList: function() {
           var inventoryItems = this.get('inventoryItems');
           if (!Ember['default'].isEmpty(inventoryItems)) {
               var mappedItems = inventoryItems.map(function(item) {
                   return item.doc;
               });
               return mappedItems;
           }
       }.property('inventoryItems.[]'),
       
       lookupListsToUpdate: [{
           name: 'expenseAccountList', //Name of property containing lookup list
           property: 'expenseAccount', //Corresponding property on model that potentially contains a new value to add to the list
           id: 'expense_account_list' //Id of the lookup list to update
        },{
           name: 'aisleLocationList', //Name of property containing lookup list
           property: 'deliveryAisle', //Corresponding property on model that potentially contains a new value to add to the list
           id: 'aisle_location_list' //Id of the lookup list to update
       }, {
           name: 'warehouseList', //Name of property containing lookup list
           property: 'deliveryLocation', //Corresponding property on model that potentially contains a new value to add to the list
           id: 'warehouse_list' //Id of the lookup list to update
       }],

       canFulfill: function() {
           var requestedItems = this.get('requestedItems');
           return Ember['default'].isEmpty(requestedItems) && this.currentUserCan('fulfill_inventory');
       }.property('requestedItems.@each'),

       isFulfilling: function() {
           var canFulfill = this.get('canFulfill'),
               isRequested = this.get('isRequested'),
               fulfillRequest = this.get('shouldFulfillRequest');
           return (canFulfill && (isRequested || fulfillRequest));
       }.property('isRequested', 'shouldFulfillRequest'),

       isRequested: function() {
           var status = this.get('status');
           return (status === 'Requested');
       }.property('status'),
       
       quantityLabel: function() {
           var selectedInventoryItem = this.get('selectedInventoryItem');
           if (Ember['default'].isEmpty(selectedInventoryItem)) {
               return 'Quantity';
           } else {
               return 'Quantity (%@)'.fmt(selectedInventoryItem.distributionUnit);
           }
       }.property('selectedInventoryItem'),
       
       showRequestedItems: function() {
           var requestedItems = this.get('requestedItems');
           return !Ember['default'].isEmpty(requestedItems);
       }.property('requestedItems.@each'),
       
       updateViaFulfillRequest: false,
       
       updateDateCompleted: function() {
           var isFulfilling = this.get('isFulfilling'),
               dateCompleted = this.get('dateCompleted');
           if (isFulfilling) {
               if (Ember['default'].isEmpty(dateCompleted)) {
                   this.set('dateCompleted', new Date());
               }
           } else if (!this.get('updateViaFulfillRequest')) {
               this.set('dateCompleted');
           }
       }.observes('isFulfilling'),

       updateButtonText: function() {
           if (this.get('isFulfilling')) {
               return 'Fulfill';
           } else if (this.get('isNew')) {
               return 'Add';
           } else {
               return 'Update';
           }
       }.property('isNew', 'isFulfilling'),
       
       updateCapability: 'add_inventory_request',
       
       actions: {
           addInventoryItem: function() {
               var inventoryItem = this.get('inventoryItem'),
                   model = this.get('model'),
                   requestedItems = this.get('requestedItems'),
                   quantity = this.get('quantity');
               model.validate();
               if (this.get('isValid') && !Ember['default'].isEmpty(inventoryItem) && !Ember['default'].isEmpty(quantity)) {
                   var requestedItem = Ember['default'].Object.create({
                       item: inventoryItem.get('content'),
                       quantity: quantity
                   });
                   requestedItems.addObject(requestedItem);
                   this.set('inventoryItem');
                   this.set('inventoryItemTypeAhead');
                   this.set('quantity');
                   this.set('selectedInventoryItem');
               }
           },
           
           allRequests: function() {
               this.transitionToRoute('inventory.index');
           },
           
           removeItem: function(removeInfo) {
               var requestedItems = this.get('requestedItems'),
                   item = removeInfo.itemToRemove;
               requestedItems.removeObject(item);
               this.send('closeModal');
           },        
           
           showRemoveItem: function(item) {
              var message= 'Are you sure you want to remove this item from this request?',
                   model = Ember['default'].Object.create({
                       itemToRemove: item               
                   }),
                   title = 'Remove Payment';
               this.displayConfirm(title, message, 'removeItem', model);            
           },
           
           /**
            * Update the model and perform the before update and after update
            * @param skipAfterUpdate boolean (optional) indicating whether or not 
            * to skip the afterUpdate call.
            */
           update: function(skipAfterUpdate) {
               this.beforeUpdate().then(function() {
                   var updateViaFulfillRequest = this.get('updateViaFulfillRequest');
                   if (updateViaFulfillRequest) {
                       this.updateLookupLists();
                       this.performFulfillRequest(this.get('model')).then(this.afterUpdate.bind(this));
                   } else {
                       var isNew = this.get('isNew'),
                           requestedItems = this.get('requestedItems');
                       if (isNew && !Ember['default'].isEmpty(requestedItems)) {
                           var baseModel = this.get('model'),
                               propertiesToCopy = baseModel.getProperties([
                                   'dateRequested',
                                   'deliveryAisle', 
                                   'deliveryLocation', 
                                   'expenseAccount',
                                   'requestedBy',
                                   'status'
                               ]),
                               inventoryPromises = [],
                               newModels = [],
                               savePromises = [];
                           if (!Ember['default'].isEmpty(this.get('inventoryItem')) && !Ember['default'].isEmpty(this.get('quantity'))) {
                               savePromises.push(baseModel.save());
                           }
                           requestedItems.forEach(function(requestedItem) {     
                               propertiesToCopy.inventoryItem = requestedItem.get('item');
                               propertiesToCopy.quantity = requestedItem.get('quantity');
                               var modelToSave = this.get('store').createRecord('inv-request', propertiesToCopy);
                               inventoryPromises.push(modelToSave.get('inventoryItem'));
                               newModels.push(modelToSave);
                           }.bind(this));
                           Ember['default'].RSVP.all(inventoryPromises,'Get inventory items for inventory requests').then(function(){
                               newModels.forEach(function(newModel) {
                                   savePromises.push(newModel.save());
                               });
                               Ember['default'].RSVP.all(savePromises,'Save batch inventory requests').then(function(){
                                   this.updateLookupLists();                            
                                   this.afterUpdate();                            
                               }.bind(this));
                           }.bind(this));
                       } else {
                           this.get('model').save().then(function(record){
                               this.updateLookupLists();
                               if (!skipAfterUpdate) {
                                   this.afterUpdate(record);
                               }
                           }.bind(this));
                       }
                   }
               }.bind(this));
           }
       },
       
       afterUpdate: function() {
           var updateViaFulfillRequest = this.get('updateViaFulfillRequest');
           if (updateViaFulfillRequest) {
               this.displayAlert('Request Fulfilled', 'The inventory request has been fulfilled.', 'allRequests');
           } else {
               this.displayAlert('Request Updated', 'The inventory request has been updated.');
           }
       }, 

       beforeUpdate: function() {
           if (this.get('isFulfilling')) {
               this.set('updateViaFulfillRequest', true);
           } else {
               this.set('updateViaFulfillRequest', false);
           }
           if (this.get('isNew')) {
               this.set('dateRequested', new Date());
               this.set('requestedBy', this.get('model').getUserName());
               if (!this.get('isFulfilling')) {
                   this.set('status', 'Requested');
               }
           }
           return Ember['default'].RSVP.resolve();        
       }
   });

});
define('hospitalrun/inventory/request/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember'], function (exports, AbstractEditRoute, Ember) {

    'use strict';

    exports['default'] = AbstractEditRoute['default'].extend({
        editTitle: 'Edit Request',
        modelName: 'inv-request',
        newTitle: 'New Request',
        getNewData: function() {
            return Ember['default'].RSVP.resolve({
                transactionType: 'Request'
            });
        },
        
        actions: {
            allRequests: function(model) {
                this.controller.send('allRequests', model);
            },
            
            removeItem: function(model) {
                this.controller.send('removeItem', model);
            }
        },
        
        /**
         * Lazily load inventory items so that it doesn't impact performance.
         */
        setupController: function(controller, model) {
            this._super(controller, model);
            var inventoryQuery = {
                startkey:  'inventory_',
                endkey: 'inventory_\uffff',
                include_docs: true,
            };
            this.controllerFor('pouchdb').queryMainDB(inventoryQuery).then(function(result) {            
                controller.set('inventoryItems', result.rows);
            });        
        }
    });

});
define('hospitalrun/inventory/request/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    ");
    stack1 = helpers['if'].call(depth0, "isRequested", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n\n    ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("deliveryLocation"),
      'label': ("Delivery Location"),
      'list': ("warehouseList"),
      'selection': ("deliveryLocation")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("deliveryAisle"),
      'label': ("Delivery Aisle"),
      'list': ("aisleLocationList"),
      'selection': ("deliveryAisle")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("expenseAccount"),
      'label': ("Bill To"),
      'list': ("expenseAccountList"),
      'selection': ("expenseAccount")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n\n    ");
    stack1 = helpers['if'].call(depth0, "isFulfilling", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n        <div class=\"form-group\">\n            <label class=\"control-label\">Item</label>\n            <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "inventoryItem.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>        \n        </div>\n        <div class=\"form-group\">\n            <label class=\"control-label\">Quantity Requested</label>\n            <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "quantity", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>        \n        </div>\n        <div class=\"form-group\">\n            <label class=\"control-label\">Quantity on Hand</label>\n            <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "inventoryItem.quantity", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>        \n        </div>\n    ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n        <div class=\"row\">\n            ");
    data.buffer.push(escapeExpression((helper = helpers['inventory-typeahead'] || (depth0 && depth0['inventory-typeahead']),options={hash:{
      'class': ("col-sm-8"),
      'property': ("inventoryItemTypeAhead"),
      'label': ("Inventory Item"),
      'content': ("inventoryList"),
      'selection': ("selectedInventoryItem")
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING",'content': "ID",'selection': "ID"},hashContexts:{'class': depth0,'property': depth0,'label': depth0,'content': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "inventory-typeahead", options))));
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("quantity"),
      'label': ("quantityLabel"),
      'class': ("col-sm-3")
    },hashTypes:{'property': "STRING",'label': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n            <div class=\"form-group col-sm-1\">\n                <label class=\"control-label\"></label>\n                <h4 class=\"form-control-static\">                    \n                    <span class=\"glyphicon glyphicon-plus\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "addInventoryItem", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("></span>                    \n                </h4>\n            </div>\n        </div>\n        ");
    stack1 = helpers['if'].call(depth0, "showRequestedItems", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    stack1 = helpers['if'].call(depth0, "canFulfill", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    ");
    return buffer;
    }
  function program5(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            <h3>Requested Items</h3>\n            <table class=\"table\">\n                <tr class=\"table-header\">\n                    <th>Name</th>\n                    <th>Quantity</th>\n                    <th>Action</th>\n                </tr>\n                ");
    stack1 = helpers.each.call(depth0, "requestedItems", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </table>\n        ");
    return buffer;
    }
  function program6(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                    <tr>\n                        <td>\n                            ");
    stack1 = helpers._triageMustache.call(depth0, "item.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </td>\n                        <td class=\"col-xs-2\">\n                            <div class=\"input-group\">                            \n                                ");
    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
      'class': ("form-control"),
      'value': ("quantity")
    },hashTypes:{'class': "STRING",'value': "ID"},hashContexts:{'class': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
    data.buffer.push("\n                                <div class=\"input-group-addon\">");
    stack1 = helpers._triageMustache.call(depth0, "item.distributionUnit", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</div>\n                            </div>\n                        </td>\n                        <td>\n                            <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showRemoveItem", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                                <span class=\"octicon octicon-x\"></span>Remove\n                            </button>\n                        </td>\n                    </tr>\n                ");
    return buffer;
    }

  function program8(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n            <div class=\"form-group\">            \n                <label class=\"control-label\">Fulfill Request</label>\n            </div>\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("Fulfill Request Now"),
      'property': ("shouldFulfillRequest")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("        \n        ");
    return buffer;
    }

  function program10(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        <div class=\"row\">\n            ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("dateCompleted"),
      'label': ("Date Completed"),
      'class': ("col-sm-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n        </div>\n        ");
    data.buffer.push(escapeExpression((helper = helpers['inventory-location-picker'] || (depth0 && depth0['inventory-location-picker']),options={hash:{
      'label': ("Pull From"),
      'quantityRequested': ("quantity"),
      'locationList': ("inventoryItem.availableLocations"),
      'selectedLocations': ("inventoryLocations")
    },hashTypes:{'label': "STRING",'quantityRequested': "ID",'locationList': "ID",'selectedLocations': "ID"},hashContexts:{'label': depth0,'quantityRequested': depth0,'locationList': depth0,'selectedLocations': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "inventory-location-picker", options))));
    data.buffer.push("\n         <div class=\"form-group\">            \n            <label class=\"control-label\">Consume Purchases</label>\n         </div>\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("Mark As Consumed"),
      'property': ("markAsConsumed")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n    ");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/inventory/request/view', ['exports', 'hospitalrun/views/panel'], function (exports, PanelView) {

	'use strict';

	exports['default'] = PanelView['default'].extend();

});
define('hospitalrun/inventory/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'hospitalrun/mixins/fulfill-request', 'hospitalrun/mixins/inventory-id', 'hospitalrun/mixins/inventory-locations'], function (exports, AbstractModuleRoute, FulfillRequest, InventoryId, InventoryLocations) {

    'use strict';

    exports['default'] = AbstractModuleRoute['default'].extend(FulfillRequest['default'], InventoryId['default'], InventoryLocations['default'], {
        addCapability: 'add_inventory_item',
        additionalButtons: function() {
            if (this.currentUserCan(this.get('addCapability'))) {
                return [{
                    buttonAction: 'newInventoryBatch',
                    buttonText: '+ inventory received',
                    class: 'btn btn-primary'
                }];
            }
        }.property(),
        
        additionalModels: [{ 
            name: 'aisleLocationList',
            findArgs: ['lookup','aisle_location_list']
        }, {
            name: 'expenseAccountList',
            findArgs: ['lookup','expense_account_list']
        }, {
            name: 'inventoryTypeList',
            findArgs: ['lookup','inventory_types']
        }, {
            name: 'warehouseList',
            findArgs: ['lookup','warehouse_list']
        }, {
            name: 'vendorList',
            findArgs: ['lookup','vendor_list']
        }],
        
        currentItem: null,
        moduleName: 'inventory',
        
        newButtonText: '+ new request',
        subActions: [{
            text: 'Requests',
            linkTo: 'inventory.index'
        }, {
            text: 'Items',
            linkTo: 'inventory.listing'
        }, {
            text: 'Reports',
            linkTo: 'inventory.reports'
        }],
        sectionTitle: 'Inventory',
        
        actions: {
            addPurchase: function(newPurchase) {
                var currentItem = this.get('currentItem'),
                    purchases = currentItem.get('purchases');
                purchases.addObject(newPurchase);
                this.newPurchaseAdded(currentItem, newPurchase); 
                currentItem.updateQuantity();
                currentItem.save();
                this.send('closeModal');
            },
            
            newInventoryBatch: function() {
                if (this.currentUserCan(this.get('addCapability'))) {
                    this.transitionTo('inventory.batch', 'new');
                }
            },
            
            newRequest: function() {
                var item = this.get('store').createRecord('inv-request', {
                    transactionType: 'Request',
                    requestedItems: []
                });            
                this.transitionTo('inventory.request', item);
            },    
            
            allItems: function() {
                this.transitionTo('inventory.listing');
            },
            
            showAddPurchase: function(inventoryItem) {
                var newPurchase = this.get('store').createRecord('inv-purchase', {
                    dateReceived: new Date(),
                    distributionUnit: inventoryItem.get('distributionUnit'),
                    inventoryItem: 'inventory_'+inventoryItem.get('id')
                });            
                this.set('currentItem', inventoryItem);
                this.send('openModal', 'inventory.purchase.edit', newPurchase);
            }        
        }
    });

});
define('hospitalrun/inventory/search/controller', ['exports', 'hospitalrun/inventory/listing/controller'], function (exports, InventoryListingController) {

	'use strict';

	exports['default'] = InventoryListingController['default'].extend();

});
define('hospitalrun/inventory/search/route', ['exports', 'hospitalrun/routes/abstract-search-route', 'hospitalrun/utils/inventory-search'], function (exports, AbstractSearchRoute, InventorySearch) {

    'use strict';

    exports['default'] = AbstractSearchRoute['default'].extend({
        moduleName: 'inventory',
        searchKeys: [
            'crossReference',
            'description',
            'friendlyId',
            'name'
        ],
        searchIndex: InventorySearch['default'],
        searchModel: 'inventory'
    });

});
define('hospitalrun/inventory/search/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "inventory/listing", options) : helperMissing.call(depth0, "partial", "inventory/listing", options))));
    data.buffer.push("\n");
    return buffer;
    }

    stack1 = helpers.view.call(depth0, "search-listing", {hash:{
      'newButtonText': ("New Item"),
      'allButtonText': ("All Inventory")
    },hashTypes:{'newButtonText': "STRING",'allButtonText': "STRING"},hashContexts:{'newButtonText': depth0,'allButtonText': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/inventory/transfer/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember'], function (exports, AbstractEditController, Ember) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend({
        needs: 'inventory',
        
        warehouseList: Ember['default'].computed.alias('controllers.inventory.warehouseList'),
        aisleLocationList: Ember['default'].computed.alias('controllers.inventory.aisleLocationList'),
        
        lookupListsToUpdate: [{
            name: 'aisleLocationList', //Name of property containing lookup list
            property: 'transferAisleLocation', //Corresponding property on model that potentially contains a new value to add to the list
            id: 'aisle_location_list' //Id of the lookup list to update
        }, {
            name: 'warehouseList', //Name of property containing lookup list
            property: 'transferLocation', //Corresponding property on model that potentially contains a new value to add to the list
            id: 'warehouse_list' //Id of the lookup list to update
        }],
        
        title: 'Transfer Items',
        updateButtonText: 'Transfer',
        updateButtonAction: 'transfer',
        updateCapability: 'adjust_inventory_location',
        
        actions: {
            cancel: function() {
                this.send('closeModal');
            },
            
            transfer: function() {
                this.updateLookupLists();
                this.send('transferItems', this.get('model'), true);           
            }
        }
    });

});
define('hospitalrun/inventory/transfer/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    <div class=\"form-group\">\n        <label class=\"control-label\">Item</label>\n        <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "transferItem.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>        \n    </div>\n    <div class=\"form-group\">\n        <label class=\"control-label\">Transfer From</label>\n        <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "locationName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>        \n    </div>\n    <div class=\"form-group\">\n        <label class=\"control-label\">Quantity Available</label>\n        <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "quantity", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n    </div>\n    ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("transferLocation"),
      'label': ("Transfer To Location"),
      'list': ("warehouseList"),
      'selection': ("transferLocation")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("transferAisleLocation"),
      'label': ("Transfer To Aisle Location"),
      'list': ("aisleLocationList"),
      'selection': ("transferAisleLocation")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("adjustmentQuantity"),
      'label': ("Quantity"),
      'class': ("col-sm-3")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("        \n    </div>\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("dateCompleted"),
      'label': ("Date Transferred"),
      'class': ("col-sm-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n    </div>\n");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/inventory/transfer/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/invoices/add-line-item/controller', ['exports', 'hospitalrun/mixins/billing-categories', 'ember', 'hospitalrun/mixins/is-update-disabled'], function (exports, BillingCategories, Ember, IsUpdateDisabled) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend(BillingCategories['default'], IsUpdateDisabled['default'], {
        needs: ['invoices','invoices/edit'],
        
        billingCategoryList: Ember['default'].computed.alias('controllers.invoices.billingCategoryList'),
        editController: Ember['default'].computed.alias('controllers.invoices/edit'),    
        title: 'Add Line Item',
        updateButtonText: 'Add',
        updateButtonAction: 'add',
        showUpdateButton: true,
                
        actions: {
            cancel: function() {
                this.send('closeModal');
            },
            
            add: function() {
                this.get('model').save().then(function(record){
                    this.get('editController').send('addLineItem',record);
                }.bind(this));
            }
        },
        
        billingCategories: function() {
            var defaultBillingCategories = this.get('defaultBillingCategories'),
                billingCategoryList = this.get('billingCategoryList');
            if (Ember['default'].isEmpty(billingCategoryList)) {
                return Ember['default'].Object.create({value: defaultBillingCategories});
            } else {
                return billingCategoryList;
            }
        }.property('billingCategoryList', 'defaultBillingCategories'),    

    });

});
define('hospitalrun/invoices/add-line-item/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("name"),
      'label': ("Name"),
      'class': ("required")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("category"),
      'class': ("required"),
      'label': ("Category"),
      'list': ("billingCategories"),
      'selection': ("category")
    },hashTypes:{'property': "STRING",'class': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'property': depth0,'class': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/invoices/add-line-item/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/invoices/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, AbstractDeleteController) {

     'use strict';

     exports['default'] = AbstractDeleteController['default'].extend({
          title: 'Delete Invoice'
     });

});
define('hospitalrun/invoices/delete/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1;


    data.buffer.push("<div class=\"alert alert-danger\">\n    <span class=\"glyphicon glyphicon-warning-sign\"></span> \n    Are you sure you wish to delete <b>");
    stack1 = helpers._triageMustache.call(depth0, "displayInvoiceNumber", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</b>?\n</div>");
    return buffer;
    
  });

});
define('hospitalrun/invoices/delete/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/invoices/detail-item/controller', ['exports', 'ember', 'hospitalrun/mixins/number-format'], function (exports, Ember, NumberFormat) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend(NumberFormat['default'], {
        needs: 'invoices',
        
        expenseAccountList: Ember['default'].computed.alias('controllers.invoices.expenseAccountList.value'),
        
        canAddCharge: function() {
            return this.parentController.get('canAddCharge');
        }.property(),
            
        detailDiscountChanged: function() {
            var discount = this.get('discount');
            if (!Ember['default'].isEmpty(discount)) {
                this.set('discountPercentage');
            }    
        }.observes('discount')
    });

});
define('hospitalrun/invoices/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/number-format', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/mixins/publish-statuses'], function (exports, AbstractEditController, Ember, NumberFormat, PatientSubmodule, PublishStatuses) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend(NumberFormat['default'], PatientSubmodule['default'], PublishStatuses['default'], {
        needs: ['invoices','pouchdb'],
        expenseAccountList: Ember['default'].computed.alias('controllers.invoices.expenseAccountList.value'),
        patientList: Ember['default'].computed.alias('controllers.invoices.patientList'),
        pharmacyCharges: [],
        pricingProfiles: Ember['default'].computed.alias('controllers.invoices.pricingProfiles'),
        supplyCharges: [],
        updateCapability: 'add_invoice',
        wardCharges: [],
            
        additionalButtons: function() {
            var buttons = [],
                isValid = this.get('isValid'),
                status = this.get('status');
            if (isValid && status === 'Draft') {
                buttons.push({
                    class: 'btn btn-default default',
                    buttonAction: 'finalizeInvoice',
                    buttonIcon: 'glyphicon glyphicon-ok',
                    buttonText: 'Invoice Ready'
                });
            }
            buttons.push({
                class: 'btn btn-default neutral',
                buttonAction: 'printInvoice',
                buttonIcon: 'glyphicon glyphicon-print',
                buttonText: 'Print'
            });        
            return buttons;
            
        }.property('isValid','status'),
        
        canAddCharge: function() {        
            return this.currentUserCan('add_charge');
        }.property(),
        
        canAddPayment: function() {
            return this.currentUserCan('add_payment');
        }.property(),
        
            
        pharmacyExpenseAccount: function() {
            var expenseAccountList = this.get('expenseAccountList');
            var account = expenseAccountList.find(function(value) {
                if (value.toLowerCase().indexOf('pharmacy') > -1) {
                    return true;
                }
            });
            return account;
        }.property('expenseAccountList.value'),
        
        actions: {
            addLineItem: function(lineItem) {
                var lineItems = this.get('lineItems');
                lineItems.addObject(lineItem);
                this.send('update', true);
                this.send('closeModal');            
            },
            
            deleteCharge: function(deleteInfo) {
                deleteInfo.deleteFrom.removeObject(deleteInfo.itemToDelete);
                if (!deleteInfo.itemToDelete.get('isNew')) {
                    deleteInfo.itemToDelete.destroyRecord();
                }
                this.send('update', true);
                this.send('closeModal');
            },        
            
            deleteLineItem: function(deleteInfo) {
                var lineItems = this.get('lineItems');
                lineItems.removeObject(deleteInfo.itemToDelete);
                if (!deleteInfo.itemToDelete.get('isNew')) {
                    deleteInfo.itemToDelete.destroyRecord();
                }
                this.send('update', true);
                this.send('closeModal');
            },
            
            finalizeInvoice: function() {            
                var invoicePayments = this.get('payments'),
                    paymentsToSave = [];
                this.get('patient.payments').then(function(patientPayments) {
                    patientPayments.forEach(function(payment) {
                        var invoice = payment.get('invoice');
                        if (Ember['default'].isEmpty(invoice)) {
                            payment.set('invoice', invoice);
                            paymentsToSave.push(payment);
                            invoicePayments.addObject(payment);
                        }
                    }.bind(this));            
                    this.set('status', 'Billed');
                    this.send('update');
                }.bind(this));
            },
            
            printInvoice: function() {        
                this.transitionToRoute('print.invoice', this.get('model'));
            },
            
            removePayment: function(removeInfo) {
                var payments = this.get('payments'),
                    payment = removeInfo.itemToRemove;
                payment.set('invoice');
                payments.removeObject(removeInfo.itemToRemove);
                this.send('update', true);
                this.send('closeModal');
            },
            
            showAddLineItem: function() {
                var newLineItem = this.store.createRecord('billing-line-item', {});
                this.send('openModal','invoices.add-line-item', newLineItem);
            },
            
            showRemovePayment: function(payment) {
               var message= 'Are you sure you want to remove this payment from this invoice?',
                    model = Ember['default'].Object.create({
                        itemToRemove: payment               
                    }),
                    title = 'Remove Payment';
                this.displayConfirm(title, message, 'removePayment', model);
            }
        },
        
        changePaymentProfile: function() {
            var patient = this.get('patient'),
                paymentProfile = this.get('paymentProfile');
            if (!Ember['default'].isEmpty(patient) && Ember['default'].isEmpty(paymentProfile)){
                this.set('paymentProfile', patient.get('paymentProfile'));
            }
        }.observes('patient'),
        
        paymentProfileChanged: function() {
            var discountPercentage = this._getValidNumber(this.get('paymentProfile.discountPercentage')),
                originalPaymentProfileId = this.get('originalPaymentProfileId'),
                profileId = this.get('paymentProfile.id');
            if (profileId !== originalPaymentProfileId) {
                var lineItems = this.get('lineItems');
                lineItems.forEach(function(lineItem) {
                    var details = lineItem.get('details'),
                        lineDiscount = 0;
                    details.forEach(function(detail) {
                        var detailTotal = detail.get('total'),
                            overrodePrice = false,
                            pricingOverrides = detail.get('pricingItem.pricingOverrides');                        
                        if (!Ember['default'].isEmpty(pricingOverrides)) {
                            var pricingOverride = pricingOverrides.findBy('profile.id', profileId);
                            if (!Ember['default'].isEmpty(pricingOverride)) {
                                Ember['default'].set(detail, 'discount', this._numberFormat((detailTotal - pricingOverride.get('price')),true));
                                overrodePrice = true;
                            }
                        }
                        if (!overrodePrice && detailTotal > 0) {
                            Ember['default'].set(detail, 'discountPercentage', (discountPercentage / 100));
                            Ember['default'].set(detail, 'discount', this._numberFormat((discountPercentage / 100) * (detailTotal), true));
                        }
                        lineDiscount += this._getValidNumber(Ember['default'].get(detail,'discount'));
                    }.bind(this));
                    lineItem.set('discount', this._numberFormat(lineDiscount,true));
                }.bind(this));
                this.set('originalPaymentProfileId', profileId);
            }
        }.observes('paymentProfile'),
        
        visitChanged: function() {
            var visit = this.get('visit'),
                lineItems = this.get('lineItems');
            if (!Ember['default'].isEmpty(visit) && Ember['default'].isEmpty(lineItems)) {
                this.set('originalPaymentProfileId');
                var promises = this.resolveVisitChildren();            
                Ember['default'].RSVP.allSettled(promises, 'Resolved visit children before generating invoice').then(function(results) {
                    var chargePromises = this._resolveVisitDescendents(results, 'charges');
                    if (!Ember['default'].isEmpty(chargePromises)) {
                        var promiseLabel = 'Reloaded charges before generating invoice';
                        Ember['default'].RSVP.allSettled(chargePromises, promiseLabel).then(function(chargeResults) {
                            var pricingPromises = [];
                            chargeResults.forEach(function(result) {
                                if (!Ember['default'].isEmpty(result.value)) {                                
                                    var pricingItem = result.value.get('pricingItem');
                                    if (!Ember['default'].isEmpty(pricingItem)) {
                                        pricingPromises.push(pricingItem.reload());
                                    }
                                }
                            });
                            promiseLabel = 'Reloaded pricing items before generating invoice';
                            Ember['default'].RSVP.allSettled(pricingPromises, promiseLabel).then(function() {
                                this._generateLineItems(visit, results);
                                this.paymentProfileChanged();
                            }.bind(this));
                        }.bind(this));
                    } else {
                        this._generateLineItems(visit, results);
                        this.paymentProfileChanged();
                    }
                }.bind(this), function(err) {
                    console.log('Error resolving visit children', err);
                });
            }
        }.observes('visit'),
        
        _addPharmacyCharge: function(charge, medicationItemName) {
            var medicationItem = charge.get(medicationItemName),
                price = medicationItem.get('price'),
                quantity = charge.get('quantity'),
                pharmacyCharges = this.get('pharmacyCharges'),
                pharmacyExpenseAccount = this.get('pharmacyExpenseAccount'),
                pharmacyCharge = this.store.createRecord('line-item-detail', {
                    name: medicationItem.get('name'),
                    quantity: quantity,
                    price: price,
                    department: 'Pharmacy',
                    expenseAccount: pharmacyExpenseAccount
                });
            pharmacyCharges.addObject(pharmacyCharge);
        },
        
        _addSupplyCharge: function(charge, department) {
            var supplyCharges = this.get('supplyCharges'),
                supplyCharge = this._createChargeItem(charge, department);
            supplyCharges.addObject(supplyCharge);
        },
        
        _createChargeItem: function(charge, department) {
            var chargeItem = this.store.createRecord('line-item-detail', {
                    name: charge.get('pricingItem.name'),
                    expenseAccount: charge.get('pricingItem.expenseAccount'),
                    quantity: charge.get('quantity'),
                    price: charge.get('pricingItem.price'),
                    department: department,
                    pricingItem: charge.get('pricingItem')
                });
            return chargeItem;
        },
        
        _mapWardCharge: function(charge) {
            return this._createChargeItem(charge, 'Ward');
        },
        
        _completeBeforeUpdate: function(sequence, resolve, reject) {
            var invoiceId = 'inv',
                sequenceValue;
            sequence.incrementProperty('value',1);
            sequenceValue = sequence.get('value');
            if (sequenceValue < 100000) {
                invoiceId += String('00000' + sequenceValue).slice(-5);
            } else {
                invoiceId += sequenceValue;
            }
            this.set('id',invoiceId);
            sequence.save().then(resolve, reject);
        },
            
        _generateLineItems: function(visit, visitChildren) {
            var endDate = visit.get('endDate'),
                imaging = visitChildren[0].value,
                labs = visitChildren[1].value,
                lineDetail,
                lineItem,
                lineItems = this.get('lineItems'),
                medication = visitChildren[2].value,
                procedures = visitChildren[3].value,
                startDate = visit.get('startDate'),
                visitCharges = visit.get('charges');
            this.setProperties({
                pharmacyCharges: [],
                supplyCharges: [],
                wardCharges: []
            });
            if (!Ember['default'].isEmpty(endDate) && !Ember['default'].isEmpty(startDate)) {
                endDate = moment(endDate);
                startDate = moment(startDate);
                var stayDays = endDate.diff(startDate, 'days');
                if (stayDays > 1) {
                    lineDetail = this.store.createRecord('line-item-detail', {
                        name: 'Days',
                        quantity: stayDays                    
                    });
                    lineItem = this.store.createRecord('billing-line-item', {
                        category: 'Hospital Charges',
                        name: 'Room/Accomodation'
                    });
                    lineItem.get('details').addObject(lineDetail);
                    lineItems.addObject(lineItem);
                }
            }
            
            medication.forEach(function(medicationItem) {
                this._addPharmacyCharge(medicationItem, 'inventoryItem');
            }.bind(this));
     
            this.set('wardCharges', visitCharges.map(this._mapWardCharge.bind(this)));            
            
            procedures.forEach(function(procedure) {
                var charges = procedure.get('charges');
                charges.forEach(function(charge) {
                    if (charge.get('medicationCharge')) {
                        this._addPharmacyCharge(charge, 'medication');
                    } else {
                        this._addSupplyCharge(charge, 'O.R.');
                    }
                }.bind(this));
            }.bind(this));
            
            labs.forEach(function(lab) {
                if (!Ember['default'].isEmpty(imaging.get('labType'))) {
                    this._addSupplyCharge(Ember['default'].Object.create({
                        pricingItem: imaging.get('labType'),
                        quantity: 1
                    }), 'Lab');
                }
                lab.get('charges').forEach(function(charge) {                
                    this._addSupplyCharge(charge, 'Lab');
                }.bind(this));
            }.bind(this));
            
            imaging.forEach(function(imaging) {
                if (!Ember['default'].isEmpty(imaging.get('imagingType'))) {
                    this._addSupplyCharge(Ember['default'].Object.create({
                        pricingItem: imaging.get('imagingType'),
                        quantity: 1
                    }), 'Imaging');
                }
                imaging.get('charges').forEach(function(charge) {
                    this._addSupplyCharge(charge, 'Imaging');
                }.bind(this));
            }.bind(this));
            
            lineItem = this.store.createRecord('billing-line-item', {
                name: 'Pharmacy',
                category: 'Hospital Charges'
            });
            lineItem.get('details').addObjects(this.get('pharmacyCharges'));
            lineItems.addObject(lineItem);
            
            lineItem = this.store.createRecord('billing-line-item', {
                name: 'X-ray/Lab/Supplies',
                category: 'Hospital Charges'
            });
            lineItem.get('details').addObjects(this.get('supplyCharges'));
            lineItems.addObject(lineItem);
            
            lineItem = this.store.createRecord('billing-line-item', {
                name: 'Ward Items',
                category: 'Hospital Charges'
            });
            lineItem.get('details').addObjects(this.get('wardCharges'));
            lineItems.addObject(lineItem);

            lineItem = this.store.createRecord('billing-line-item', {
                name: 'Physical Therapy',
                category: 'Hospital Charges'
            });        
            lineItems.addObject(lineItem);
            
            lineItem = this.store.createRecord('billing-line-item', {
                name: 'Others/Misc',
                category: 'Hospital Charges'
            });        
            lineItems.addObject(lineItem);        
            
            
            this.send('update', true);
        },
        
        _resolveVisitDescendents: function(results, childNameToResolve) {
            var promises = [];        
            results.forEach(function(result) {
                if (!Ember['default'].isEmpty(result.value)) {
                    result.value.forEach(function(record) {
                        var children = record.get(childNameToResolve);
                        if (!Ember['default'].isEmpty(children)) {
                            children.forEach(function(child) {
                                //Make sure children are fully resolved
                                promises.push(child.reload());
                            });
                        }
                    });
                }
            });
            return promises;
        },
        
        beforeUpdate: function() {
            return new Ember['default'].RSVP.Promise(function(resolve, reject){
                var lineItems = this.get('lineItems'),
                    savePromises = [];
                lineItems.forEach(function(lineItem) {
                    lineItem.get('details').forEach(function(detail) {                
                        savePromises.push(detail.save());
                    }.bind(this));
                    savePromises.push(lineItem.save());
                }.bind(this));
                Ember['default'].RSVP.all(savePromises, 'Saved invoice children before saving invoice').then(function() {
                    if (this.get('isNew')) {
                        this.store.find('sequence', 'invoice').then(function(sequence) {
                            this._completeBeforeUpdate(sequence, resolve, reject);
                        }.bind(this), function() {
                            var newSequence = this.get('store').push('sequence',{
                                id: 'invoice',
                                value: 0
                            });
                            this._completeBeforeUpdate(newSequence, resolve, reject);
                        }.bind(this));
                    } else {
                        resolve();
                    }
                }.bind(this), reject);
            }.bind(this));
        },    

        afterUpdate: function(record) {
            var message =  'The invoice record has been saved.'.fmt(record.get('displayName'));
            this.displayAlert('Invoice Saved', message);        
        }
    });

});
define('hospitalrun/invoices/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember'], function (exports, AbstractEditRoute, Ember) {

    'use strict';

    exports['default'] = AbstractEditRoute['default'].extend({
        editTitle: 'Edit Invoice',
        modelName: 'invoice',
        newTitle: 'New Invoice',
        
        actions: {
            deleteCharge: function(model) {
                this.controller.send('deleteCharge', model);
            },
            
            deleteLineItem: function(model) {
                this.controller.send('deleteLineItem', model);
            },
            
            removePayment: function(model) {
                this.controller.send('removePayment', model);
            },
        },
        
        afterModel: function(model) {
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                var lineItems = model.get('lineItems'),
                    promises = [];
                lineItems.forEach(function(lineItem) {
                    promises.push(lineItem.reload());
                });
                Ember['default'].RSVP.all(promises, 'Reload billing line items for invoice').then(function(results) {
                    var detailPromises = [];
                    results.forEach(function(result) {
                        result.get('details').forEach(function(detail) {
                            detailPromises.push(detail.reload());                        
                        });
                    });
                    Ember['default'].RSVP.all(detailPromises, 'Reload billing line item details for invoice').then(resolve, reject);
                },reject);
            });
        },
        
        getNewData: function() {
            return Ember['default'].RSVP.resolve({
                billDate: new Date(),
                status: 'Draft'            
            });
        },
        
        setupController: function(controller, model) {
            model.set('originalPaymentProfileId', model.get('paymentProfile.id'));    
            this._super(controller, model);
            var lineItems = model.get('lineItems'),
                promises = [];
            lineItems.forEach(function(lineItem) {
                lineItem.get('details').forEach(function(detail) {
                    var pricingItem = detail.get('pricingItem');
                    if (!Ember['default'].isEmpty(pricingItem)) {
                        promises.push(pricingItem.reload());
                    }
                });
            });
        }
    });

});
define('hospitalrun/invoices/edit/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    ");
    stack1 = helpers.unless.call(depth0, "isNew", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    <div class=\"row\">\n        ");
    stack1 = helpers.unless.call(depth0, "isNew", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("billDate"),
      'label': ("Bill Date"),
      'class': ("col-xs-2")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n        ");
    stack1 = helpers['if'].call(depth0, "isNew", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </div>\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("externalInvoiceNumber"),
      'label': ("External Invoice #"),
      'class': ("col-xs-3")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'label': ("Payment Profile"),
      'property': ("paymentProfile"),
      'content': ("pricingProfiles"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content.name"),
      'class': ("col-xs-3"),
      'prompt': (" "),
      'selected': ("paymentProfile")
    },hashTypes:{'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'class': "STRING",'prompt': "STRING",'selected': "ID"},hashContexts:{'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'class': depth0,'prompt': depth0,'selected': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n    </div>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['patient-summary'] || (depth0 && depth0['patient-summary']),options={hash:{
      'patient': ("patient"),
      'returnTo': ("invoices.edit"),
      'returnToContext': ("id"),
      'disablePatientLink': ("isNew")
    },hashTypes:{'patient': "ID",'returnTo': "STRING",'returnToContext': "ID",'disablePatientLink': "ID"},hashContexts:{'patient': depth0,'returnTo': depth0,'returnToContext': depth0,'disablePatientLink': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "patient-summary", options))));
    data.buffer.push("\n    ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            <div class=\"form-group col-xs-2\">\n                <label>Invoice Id</label>\n                <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "id", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n            </div>        \n        ");
    return buffer;
    }

  function program6(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['patient-typeahead'] || (depth0 && depth0['patient-typeahead']),options={hash:{
      'property': ("patientTypeAhead"),
      'label': ("Patient"),
      'content': ("patientList"),
      'selection': ("selectedPatient"),
      'class': ("col-xs-4 required")
    },hashTypes:{'property': "STRING",'label': "STRING",'content': "ID",'selection': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'content': depth0,'selection': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "patient-typeahead", options))));
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-xs-4 required"),
      'label': ("Visit"),
      'property': ("visit"),
      'content': ("patientVisits"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content.visitDescription"),
      'selected': ("visit"),
      'prompt': ("Please select a visit")
    },hashTypes:{'class': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'selected': "ID",'prompt': "STRING"},hashContexts:{'class': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'selected': depth0,'prompt': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("                \n        ");
    return buffer;
    }

  function program8(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            <div class=\"form-group col-xs-3\">\n                <label>Visit</label>\n                <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "visit.visitDescription", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n            </div>        \n        ");
    return buffer;
    }

  function program10(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                    <button class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showAddLineItem", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span>Add Line Item</button>\n                ");
    return buffer;
    }

  function program12(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push(" \n                    <tr>\n                        <td colspan=\"7\">\n                            <strong>");
    stack1 = helpers._triageMustache.call(depth0, "category", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</strong>\n                        </td>\n                    </tr>\n                    ");
    stack1 = helpers.each.call(depth0, "items", {hash:{
      'itemController': ("invoices/line-item")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(13, program13, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    <tr>\n                        <td>\n                            <strong>Total ");
    stack1 = helpers._triageMustache.call(depth0, "category", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</strong>\n                        </td>\n                        <td class=\"text-right\">");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "total", options) : helperMissing.call(depth0, "number-format", "total", options))));
    data.buffer.push("</td>\n                        <td class=\"text-right\">");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "discount", options) : helperMissing.call(depth0, "number-format", "discount", options))));
    data.buffer.push("</td>\n                        <td class=\"text-right\">");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "nationalInsurance", options) : helperMissing.call(depth0, "number-format", "nationalInsurance", options))));
    data.buffer.push("</td>\n                        <td class=\"text-right\">");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "privateInsurance", options) : helperMissing.call(depth0, "number-format", "privateInsurance", options))));
    data.buffer.push("</td>\n                        <td class=\"text-right\">");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "amountOwed", options) : helperMissing.call(depth0, "number-format", "amountOwed", options))));
    data.buffer.push("</td>                            \n                        <td></td>\n                    </tr>\n                ");
    return buffer;
    }
  function program13(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                        <tr>\n                            <td class=\"col-xs-5\">\n                                <div class=\"form-group\">\n                                    <div class=\"input-group\">\n                                        <span ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'class': (":input-group-addon :glyphicon showDetails:glyphicon-minus:glyphicon-plus")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(" \n                                            ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleDetails", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("> </span>\n                                        <strong>");
    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
      'class': ("form-control"),
      'value': ("name")
    },hashTypes:{'class': "STRING",'value': "ID"},hashContexts:{'class': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
    data.buffer.push("</strong>\n                                    </div>\n                                </div>                                \n                            </td>\n                            <td class=\"col-xs-1\">\n                                <div class=\"form-group\">\n                                    ");
    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
      'class': ("form-control text-right"),
      'value': ("total")
    },hashTypes:{'class': "STRING",'value': "ID"},hashContexts:{'class': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
    data.buffer.push("\n                                </div>\n                            </td>\n                            <td class=\"col-xs-1\">\n                                <div class=\"form-group\">\n                                    ");
    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
      'class': ("form-control text-right"),
      'value': ("discount")
    },hashTypes:{'class': "STRING",'value': "ID"},hashContexts:{'class': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
    data.buffer.push("\n                                </div>\n                            </td>\n                            <td class=\"col-xs-1\">\n                                <div class=\"form-group\">\n                                    ");
    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
      'class': ("form-control text-right"),
      'value': ("nationalInsurance")
    },hashTypes:{'class': "STRING",'value': "ID"},hashContexts:{'class': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
    data.buffer.push("\n                                </div>\n                            </td>\n                            <td class=\"col-xs-1\">\n                                <div class=\"form-group\">\n                                    ");
    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
      'class': ("form-control text-right"),
      'value': ("privateInsurance")
    },hashTypes:{'class': "STRING",'value': "ID"},hashContexts:{'class': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
    data.buffer.push("\n                                </div>\n                            </td>\n                            <td class=\"col-xs-1 text-right\">");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "amountOwed", options) : helperMissing.call(depth0, "number-format", "amountOwed", options))));
    data.buffer.push("</td>\n                            <td class=\"col-xs-2\">\n                                ");
    stack1 = helpers['if'].call(depth0, "canAddCharge", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(14, program14, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                            </td>\n                        </tr>\n                        ");
    stack1 = helpers['if'].call(depth0, "showDetails", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(16, program16, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    ");
    return buffer;
    }
  function program14(depth0,data) {
    
    var buffer = '';
    data.buffer.push("     \n                                    <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showDeleteLineItem", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                                        <span class=\"octicon octicon-x\"></span>Delete\n                                    </button>\n                                ");
    return buffer;
    }

  function program16(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("                            \n                            <tr>\n                                <th>Name</th>\n                                <th>Quantity</th>\n                                <th>Price</th>\n                                <th>Discount</th>\n                                <th>Expense To</th>\n                                <th class=\"col-xs-1 text-right\">Total</th>\n                                <th>\n                                    ");
    stack1 = helpers['if'].call(depth0, "canAddCharge", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(17, program17, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                </th>\n                            </tr>\n                            ");
    stack1 = helpers.each.call(depth0, "details", {hash:{
      'itemController': ("invoices/detail-item")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(19, program19, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        ");
    return buffer;
    }
  function program17(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                        <button class=\"btn btn-primary\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "addCharge", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                                            <span class=\"octicon octicon-plus\"></span>Add Charge\n                                        </button>\n                                    ");
    return buffer;
    }

  function program19(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                                <tr>\n                                    <td class=\"col-xs-5\">\n                                        <div class=\"form-group\">\n                                            ");
    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
      'class': ("form-control"),
      'value': ("name")
    },hashTypes:{'class': "STRING",'value': "ID"},hashContexts:{'class': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
    data.buffer.push("\n                                        </div>\n                                    </td>                                \n                                    <td class=\"col-xs-1\">\n                                        <div class=\"form-group\">\n                                            ");
    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
      'class': ("form-control"),
      'value': ("quantity")
    },hashTypes:{'class': "STRING",'value': "ID"},hashContexts:{'class': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
    data.buffer.push("\n                                        </div>\n                                    </td>\n                                    <td class=\"col-xs-1\">\n                                        <div class=\"form-group\">\n                                            ");
    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
      'class': ("form-control"),
      'value': ("price")
    },hashTypes:{'class': "STRING",'value': "ID"},hashContexts:{'class': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
    data.buffer.push("\n                                        </div>\n                                    </td>\n                                    <td class=\"col-xs-1\">\n                                        <div class=\"form-group\">\n                                            ");
    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
      'class': ("form-control"),
      'value': ("discount")
    },hashTypes:{'class': "STRING",'value': "ID"},hashContexts:{'class': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
    data.buffer.push("\n                                        </div>\n                                    </td>\n                                    <td class=\"col-xs-1\">\n                                        <div class=\"form-group\">\n                                            ");
    data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
      'class': ("form-control"),
      'content': ("expenseAccountList"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content"),
      'value': ("expenseAccount")
    },hashTypes:{'class': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'value': "ID"},hashContexts:{'class': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'value': depth0},contexts:[depth0],types:["ID"],data:data})));
    data.buffer.push("\n                                        </div>\n                                    </td>\n                                    <td class=\"col-xs-1 text-right\">\n                                        ");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "amountOwed", options) : helperMissing.call(depth0, "number-format", "amountOwed", options))));
    data.buffer.push("\n                                    </td>\n                                    <td class=\"col-xs-3\">\n                                        ");
    stack1 = helpers['if'].call(depth0, "canAddCharge", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(20, program20, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                    </td>\n                                </tr>\n                            ");
    return buffer;
    }
  function program20(depth0,data) {
    
    var buffer = '';
    data.buffer.push("                            \n                                            <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showDeleteItem", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                                                <span class=\"octicon octicon-x\"></span>Delete\n                                            </button>\n                                        ");
    return buffer;
    }

  function program22(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                <button class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showAddPayment", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span>Add Payment</button>\n            ");
    return buffer;
    }

  function program24(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                <tr ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showEditPayment", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                    <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "datePaid", options) : helperMissing.call(depth0, "date-format", "datePaid", options))));
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "amount", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "type", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "notes", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    ");
    stack1 = helpers['if'].call(depth0, "parentController.canAddPayment", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(25, program25, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </tr>\n            ");
    return buffer;
    }
  function program25(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                        <td>\n                            <button class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showEditPayment", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                            ");
    stack1 = helpers['if'].call(depth0, "canRemovePayment", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(26, program26, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </td>\n                    ");
    return buffer;
    }
  function program26(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showRemovePayment", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                                    <span class=\"octicon octicon-x\"></span>Remove\n                                </button>\n                            ");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n<form class=\"form-inline\">\n    <div class=\"panel detail-section\">\n        <div class=\"panel-heading\">\n            <h3 class=\"panel-title\">\n                Line Items\n                ");
    stack1 = helpers['if'].call(depth0, "canAddCharge", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </h3>\n        </div>\n        <div class=\"panel-body detail-section-content\">\n            <table class=\"table\">\n                <tr class=\"table-header\">\n                    <th>Description</th>\n                    <th class=\"text-right\">Actual Charges</th>\n                    <th class=\"text-right\">Discount</th>\n                    <th class=\"text-right\">PhilHealth</th>\n                    <th class=\"text-right\">HMO/COM</th>\n                    <th class=\"text-right\">Excess</th>\n                    <th class=\"text-right\">Action</th>\n                </tr>\n                \n                ");
    stack1 = helpers.each.call(depth0, "lineItemsByCategory", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(12, program12, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                 <tr>\n                    <td>\n                        <strong>Total</strong>\n                    </td>\n                    <td class=\"text-right\">");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "total", options) : helperMissing.call(depth0, "number-format", "total", options))));
    data.buffer.push("</td>\n                    <td class=\"text-right\">");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "discount", options) : helperMissing.call(depth0, "number-format", "discount", options))));
    data.buffer.push("</td>\n                    <td class=\"text-right\">");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "ationalInsurance", options) : helperMissing.call(depth0, "number-format", "ationalInsurance", options))));
    data.buffer.push("</td>\n                    <td class=\"text-right\">");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "privateInsurance", options) : helperMissing.call(depth0, "number-format", "privateInsurance", options))));
    data.buffer.push("</td>\n                    <td class=\"text-right\">");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "patientResponsibility", options) : helperMissing.call(depth0, "number-format", "patientResponsibility", options))));
    data.buffer.push("</td>                            \n                    <td></td>\n                </tr>\n                <tr>\n                    <td>\n                        <strong>Payments/Deposits</strong>\n                    </td>\n                    <td colspan=\"4\"></td>\n                    <td class=\"text-right\">-");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "paidTotal", options) : helperMissing.call(depth0, "number-format", "paidTotal", options))));
    data.buffer.push("</td>                            \n                    <td></td>\n                </tr>\n                <tr>\n                    <td>\n                        <strong>Grand Total</strong>\n                    </td>\n                    <td colspan=\"4\"></td>\n                    <td class=\"text-right\">");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "remainingBalance", options) : helperMissing.call(depth0, "number-format", "remainingBalance", options))));
    data.buffer.push("</td>                            \n                    <td></td>\n                </tr>\n            </table>\n        </div>\n    </div>\n</form>\n<div class=\"panel detail-section\">\n    <div class=\"panel-heading\">\n        <h3 class=\"panel-title\">\n            Remarks            \n        </h3>\n    </div>\n    <div class=\"panel-body detail-section-content\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers.textarea || (depth0 && depth0.textarea),options={hash:{
      'class': ("form-control"),
      'value': ("remarks")
    },hashTypes:{'class': "STRING",'value': "ID"},hashContexts:{'class': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "textarea", options))));
    data.buffer.push("\n    </div>\n</div>\n<div class=\"panel detail-section\">\n    <div class=\"panel-heading\">\n        <h3 class=\"panel-title\">\n            Payments\n            ");
    stack1 = helpers['if'].call(depth0, "canAddPayment", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(22, program22, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        </h3>\n    </div>\n    <div class=\"panel-body detail-section-content\">\n        <table class=\"table\">\n            <tr class=\"table-header\">\n                <th>Date</th>\n                <th>Amount</th>\n                <th>Type</th>\n                <th>Notes</th>\n                <th>Action</th>\n            </tr>\n            ");
    stack1 = helpers.each.call(depth0, "payments", {hash:{
      'itemController': ("invoices/payment-item")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(24, program24, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        </table>\n    </div>\n</div>");
    return buffer;
    
  });

});
define('hospitalrun/invoices/edit/view', ['exports', 'hospitalrun/views/panel'], function (exports, PanelView) {

	'use strict';

	exports['default'] = PanelView['default'].extend();

});
define('hospitalrun/invoices/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, AbstractPagedController) {

    'use strict';

    exports['default'] = AbstractPagedController['default'].extend({
        addPermission: 'add_invoice',
        deletePermission: 'delete_invoice',    
        canAddPayment: function() {
            return this.currentUserCan('add_payment');
        }.property(),
        startKey: [],
        queryParams: ['startKey','status']
    });

});
define('hospitalrun/invoices/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember'], function (exports, AbstractIndexRoute, Ember) {

    'use strict';

    exports['default'] = AbstractIndexRoute['default'].extend({    
        modelName: 'invoice',
        pageTitle: 'Invoice Listing',
        
        _getStartKeyFromItem: function(item) {
            var billDateAsTime = item.get('labDateAsTime'),
                keyPrefix = this.get('keyPrefix'),            
                searchStatus = item.get('status');
            return [searchStatus, billDateAsTime, keyPrefix+item.get('id')];
        },
        
        _modelQueryParams: function(params) {
            var keyPrefix = this.get('keyPrefix'),
                queryParams,
                maxValue = this.get('maxValue'),            
                searchStatus = params.status;
            if (Ember['default'].isEmpty(searchStatus)) {
                searchStatus = 'Billed';
            }
            this.set('pageTitle', '%@ Invoices'.fmt(searchStatus));
            queryParams = {
                options: {
                    startkey: [searchStatus, null, keyPrefix],
                    endkey: [searchStatus, maxValue, keyPrefix+maxValue]
                },
                mapReduce: 'invoice_by_status'
            };
            
            if (searchStatus === 'All') {
                queryParams.options.startkey[0] = null;
                queryParams.options.endkey[0] = maxValue;
            }
            return queryParams;
            
        },
        
        queryParams: {
            startKey: {refreshModel: true},
            status: {refreshModel: true}
        },
    });

});
define('hospitalrun/invoices/index/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <table class=\"table\">\n        <tr class=\"table-header\">\n            <th>Number</th>\n            <th>Bill Date</th>\n            <th>Status</th>\n            <th>Patient</th>\n            <th>Total</th>\n            <th>Balance Due</th>\n            ");
    stack1 = helpers['if'].call(depth0, "showActions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        </tr>\n        ");
    stack1 = helpers.each.call(depth0, {hash:{
      'itemController': ("invoices/invoice-item")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(4, program4, data),contexts:[],types:[],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </table>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    
    data.buffer.push("\n                <th>Actions</th>\n            ");
    }

  function program4(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n            <tr ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editItem", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                <td>");
    stack1 = helpers._triageMustache.call(depth0, "displayInvoiceNumber", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "billDate", options) : helperMissing.call(depth0, "date-format", "billDate", options))));
    data.buffer.push("</td>\n                <td>");
    stack1 = helpers._triageMustache.call(depth0, "status", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                <td>");
    stack1 = helpers._triageMustache.call(depth0, "patient.displayName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(" - ");
    stack1 = helpers._triageMustache.call(depth0, "patient.displayPatientId", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(" <br>");
    stack1 = helpers._triageMustache.call(depth0, "visit.primaryDiagnosis", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                <td>");
    stack1 = helpers._triageMustache.call(depth0, "total", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                <td>");
    stack1 = helpers._triageMustache.call(depth0, "remainingBalance", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                <td>\n                    ");
    stack1 = helpers['if'].call(depth0, "showActions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </td>\n            </tr>\n        ");
    return buffer;
    }
  function program5(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                        ");
    stack1 = helpers['if'].call(depth0, "parentController.canAddPayment", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        ");
    stack1 = helpers['if'].call(depth0, "parentController.canAdd", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        ");
    stack1 = helpers['if'].call(depth0, "parentController.canDelete", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    ");
    return buffer;
    }
  function program6(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                            <button class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showAddPayment", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                                <span class=\"octicon octicon-plus\"></span> Add Payment\n                            </button>\n                        ");
    return buffer;
    }

  function program8(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                            <button class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editItem", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                        ");
    return buffer;
    }

  function program10(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                            <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "deleteItem", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span> Delete</button>\n                        ");
    return buffer;
    }

  function program12(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n    <div class=\"alert alert-info\">\n        <p>No invoices found. <a href=\"#\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "newItem", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">Create an invoice?</a></p>\n    </div>\n");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "hasRecords", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(12, program12, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/invoices/index/view', ['exports', 'hospitalrun/views/item-listing'], function (exports, ItemListingView) {

    'use strict';

    exports['default'] = ItemListingView['default'].extend({
        title: 'Invoice Listing',
        newButtonText: 'New Invoice'
    });

});
define('hospitalrun/invoices/invoice-item/controller', ['exports', 'ember', 'hospitalrun/mixins/number-format'], function (exports, Ember, NumberFormat) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend(NumberFormat['default'], {
        
        showActions: function() {
            var showActions = this.parentController.get('showActions');
            if (showActions) {
                var status = this.get('status');
                if (status === 'Paid') {
                    return false;
                }
                return true;
            }
        }.property('status')
    });

});
define('hospitalrun/invoices/line-item/controller', ['exports', 'ember', 'hospitalrun/mixins/number-format'], function (exports, Ember, NumberFormat) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend(NumberFormat['default'], {
        canAddCharge: function() {
            return this.parentController.get('canAddCharge');
        }.property(),
        
        actions: {
            addCharge: function() {
                var details = this.get('details');
                var detail = this.store.createRecord('line-item-detail');
                details.addObject(detail);
            },
            
            deleteCharge: function(deleteInfo) {
                var details = this.get('details');
                details.removeObject(deleteInfo.itemToDelete);
                this.send('update', true);
                this.send('closeModal');
            },        
            
            showDeleteItem: function(item) {             
                this.send('openModal', 'dialog', Ember['default'].Object.create({
                    confirmAction: 'deleteCharge',
                    deleteFrom: this.get('details'),
                    title: 'Delete Charge',
                    message: 'Are you sure you want to delete %@?'.fmt(item.name),
                    itemToDelete: item,
                    updateButtonAction: 'confirm',
                    updateButtonText: 'Ok'
                }));
            },        
            
            showDeleteLineItem: function(item) {             
                this.send('openModal', 'dialog', Ember['default'].Object.create({
                    confirmAction: 'deleteLineItem',
                    title: 'Delete Line Item',
                    message: 'Are you sure you want to delete %@?'.fmt(item.name),
                    itemToDelete: item,                
                    updateButtonAction: 'confirm',
                    updateButtonText: 'Ok'
                }));
            }, 
            toggleDetails: function() {
                this.toggleProperty('showDetails');
            }
        },
    });

});
define('hospitalrun/invoices/payment-item/controller', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend({
        canRemovePayment: function() {        
            return (this.get('type') === 'Deposit');
        }.property()
    });

});
define('hospitalrun/invoices/payment/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/patient-submodule'], function (exports, AbstractEditController, Ember, PatientSubmodule) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend(PatientSubmodule['default'], {
        cancelAction: 'closeModal',
        findPatientVisits: false,
        needs: ['invoices'],
        
        expenseAccountList: Ember['default'].computed.alias('controllers.invoices.expenseAccountList'),
        patientList: Ember['default'].computed.alias('controllers.invoices.patientList'),    
        
        _finishUpdate: function(message, title) {
            this.send('closeModal');    
            this.displayAlert(title, message); 
        },
        
        currentPatient: function() {
            var type = this.get('type');
            if (type === 'Deposit') {
                return this.get('patient');
            } else {
                return this.get('invoice.patient');
            }
        }.property('patient', 'type', 'invoice.patient'),
        
        title: function() {
            var isNew = this.get('isNew'),
                type = this.get('type');
            if (isNew) {    
                return 'Add %@'.fmt(type);
            } else {
                return 'Edit %@'.fmt(type);
            }
        }.property('isNew', 'type'),
        
        selectPatient: function() {
            var isNew = this.get('isNew'),
                type = this.get('type');
            return (isNew && type === 'Deposit');
        }.property('isNew', 'type'),    
            
        beforeUpdate: function() {
            if (this.get('isNew')) {
                this.set('newPayment', true);
            } else {
                this.set('newPayment', false);
            }
            var patient = this.get('currentPatient');
            this.set('charityPatient', patient.get('patientType') === 'Charity');
            return Ember['default'].RSVP.resolve();
        },

        afterUpdate: function() {
            this.get('model').save().then(function(record){
                if (this.get('newPayment')) {
                    var patient = this.get('currentPatient');
                    patient.get('payments').then(function(payments) {                    
                        payments.addObject(record);
                        patient.save().then(function() {
                            if (record.get('type') === 'Deposit') {
                                var message = 'A deposit of %@ was added for patient %@'.fmt(record.get('amount'), patient.get('displayName'));
                                this._finishUpdate(message, 'Deposit Added');
                            } else {          
                                var invoice = this.get('invoice');
                                invoice.addPayment(record);
                                invoice.save().then(function() {
                                    var message = 'A payment of %@ was added to invoice %@'.fmt(record.get('amount'), invoice.get('id'));
                                    this._finishUpdate(message, 'Payment Added');
                                }.bind(this));
                            }
                        }.bind(this));
                    }.bind(this));
                } else {
                    this.send('closeModal');
                }
            }.bind(this));
        }
    });

});
define('hospitalrun/invoices/payment/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    ");
    stack1 = helpers['if'].call(depth0, "isNew", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("amount"),
      'label': ("Amount"),
      'class': ("required")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("datePaid"),
      'label': ("Date Paid"),
      'maxDate': ("now"),
      'class': ("required")
    },hashTypes:{'property': "STRING",'label': "STRING",'maxDate': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'maxDate': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("expenseAccount"),
      'label': ("Credit To"),
      'list': ("expenseAccountList"),
      'selection': ("expenseAccount")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-text'] || (depth0 && depth0['em-text']),options={hash:{
      'property': ("notes"),
      'label': ("Notes")
    },hashTypes:{'property': "STRING",'label': "STRING"},hashContexts:{'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-text", options))));
    data.buffer.push("\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            ");
    stack1 = helpers['if'].call(depth0, "selectPatient", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(5, program5, data),fn:self.program(3, program3, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    ");
    return buffer;
    }
  function program3(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                ");
    data.buffer.push(escapeExpression((helper = helpers['patient-typeahead'] || (depth0 && depth0['patient-typeahead']),options={hash:{
      'property': ("patientTypeAhead"),
      'label': ("Patient"),
      'content': ("patientList"),
      'selection': ("selectedPatient"),
      'class': ("required")
    },hashTypes:{'property': "STRING",'label': "STRING",'content': "ID",'selection': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'content': depth0,'selection': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "patient-typeahead", options))));
    data.buffer.push("\n            ");
    return buffer;
    }

  function program5(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                <div class=\"form-group\">\n                    <label>Patient</label>\n                    <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "invoice.patient.displayName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n                </div>\n            ");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/invoices/payment/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/invoices/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/patient-list-route'], function (exports, AbstractModuleRoute, ModalHelper, PatientListRoute) {

    'use strict';

    exports['default'] = AbstractModuleRoute['default'].extend(ModalHelper['default'], PatientListRoute['default'], {
        addCapability: 'add_invoice',
        currentScreenTitle: 'Invoices',
        editTitle: 'Edit Invoice',    
        newTitle: 'New Invoice',
        moduleName: 'invoices',
        newButtonText: '+ new invoice',
        sectionTitle: 'Invoices',
        
        additionalButtons: function() {
            if (this.currentUserCan('add_payment')) {
                return [{
                    class: 'btn btn-default',
                    buttonText: '+ add deposit',
                    buttonAction: 'showAddDeposit'
                }];
            }
        }.property(),
        
        additionalModels: [{ 
            name: 'billingCategoryList',
            findArgs: ['lookup','billing_categories']
        }, {
            name: 'expenseAccountList',
            findArgs: ['lookup','expense_account_list']
        }, { 
            name: 'pricingProfiles',
            findArgs: ['price-profile']
        }],
        
            
        actions: {        
            showAddDeposit: function() {
                var payment = this.store.createRecord('payment', {
                    type: 'Deposit',
                    datePaid: new Date()
                });
                this.send('openModal','invoices.payment', payment);            
            },        
            
            showAddPayment: function(invoice) {
                var payment = this.store.createRecord('payment', {
                    invoice: invoice,
                    type: 'Payment',
                    datePaid: new Date()
                });
                this.send('openModal','invoices.payment', payment);            
            },
            
            showEditPayment: function(payment) {
                if (this.currentUserCan('add_payment')) {
                    this.send('openModal','invoices.payment', payment);
                }
            },
        },
        
        subActions: function() {
            var actions = [{
                text: 'Billed',
                linkTo: 'invoices.index',
                statusQuery: 'Billed'
            }];
            if (this.currentUserCan('add_invoice')) {
                actions.push({
                    text: 'Drafts',
                    linkTo: 'invoices.index',
                    statusQuery: 'Draft'
                });
                actions.push({
                    text: 'All Invoices',
                    linkTo: 'invoices.index',
                    statusQuery: 'All'
                });
            }
            actions.push({
                text: 'Paid',
                linkTo: 'invoices.index',
                statusQuery: 'Paid'
            });
            return actions;
        }.property()
        
    });

});
define('hospitalrun/invoices/search/route', ['exports', 'hospitalrun/routes/abstract-search-route', 'hospitalrun/utils/invoice-search'], function (exports, AbstractSearchRoute, InvoiceSearch) {

    'use strict';

    exports['default'] = AbstractSearchRoute['default'].extend({
        moduleName: 'invoices',
        searchKeys: [
            'externalInvoiceNumber',
            'patientInfo'        
        ],
        searchIndex: InvoiceSearch['default'],
        searchModel: 'invoice'
    });

});
define('hospitalrun/invoices/search/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "invoices/index", options) : helperMissing.call(depth0, "partial", "invoices/index", options))));
    data.buffer.push("\n");
    return buffer;
    }

    stack1 = helpers.view.call(depth0, "search-listing", {hash:{
      'newButtonText': ("New Invoice"),
      'allButtonText': ("All Invoices")
    },hashTypes:{'newButtonText': "STRING",'allButtonText': "STRING"},hashContexts:{'newButtonText': depth0,'allButtonText': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/labs/charge/controller', ['exports', 'hospitalrun/procedures/charge/controller', 'ember'], function (exports, ProcedureChargeController, Ember) {

    'use strict';

    exports['default'] = ProcedureChargeController['default'].extend({
        needs: ['labs/edit'],
        cancelAction: 'closeModal',
        newPricingItem: false,
        requestingController: Ember['default'].computed.alias('controllers.labs/edit'),
        pricingList: Ember['default'].computed.alias('controllers.labs/edit.chargesPricingList')
    });

});
define('hospitalrun/labs/charge/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "procedures/charge", options) : helperMissing.call(depth0, "partial", "procedures/charge", options))));
    
  });

});
define('hospitalrun/labs/charge/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/labs/completed/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, AbstractPagedController) {

    'use strict';

    exports['default'] = AbstractPagedController['default'].extend({
        startKey: [],
        showActions: false
    });

});
define('hospitalrun/labs/completed/route', ['exports', 'hospitalrun/labs/index/route'], function (exports, LabsIndexRoute) {

    'use strict';

    exports['default'] = LabsIndexRoute['default'].extend({
        pageTitle: 'Completed Labs',
        searchStatus: 'Completed'
    });

});
define('hospitalrun/labs/completed/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <table class=\"table\">\n        <tr class=\"table-header\">\n            <th>Date Requested</th>\n            <th>Date Completed</th>\n            <th>Patient</th>\n            <th>Lab Type</th>\n            <th>Results</th>\n            <th>Notes</th>\n        </tr>\n            ");
    stack1 = helpers.each.call(depth0, {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[],types:[],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </table>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                <tr>\n                    <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "requestedDate", options) : helperMissing.call(depth0, "date-format", "requestedDate", options))));
    data.buffer.push("</td>\n                    <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "labDate", options) : helperMissing.call(depth0, "date-format", "labDate", options))));
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "patient.displayName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "labType.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "result", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "notes", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                </tr>\n            ");
    return buffer;
    }

  function program4(depth0,data) {
    
    
    data.buffer.push("\n    <div class=\"alert alert-info\">\n        <p>No completed items found.</p>\n    </div>\n");
    }

    stack1 = helpers['if'].call(depth0, "model", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/labs/completed/view', ['exports', 'hospitalrun/views/item-listing'], function (exports, ItemListingView) {

	'use strict';

	exports['default'] = ItemListingView['default'].extend();

});
define('hospitalrun/labs/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'hospitalrun/mixins/patient-submodule'], function (exports, AbstractDeleteController, PatientSubmodule) {

    'use strict';

    exports['default'] = AbstractDeleteController['default'].extend(PatientSubmodule['default'], {
        title: 'Delete Request',
        
        actions: {
            delete: function() {
                this.removeChildFromVisit(this.get('model'), 'labs').then(function() {
                    this.get('model').destroyRecord().then(function() {
                        this.send('closeModal');
                    }.bind(this));
                }.bind(this));
            }
        }
    });

});
define('hospitalrun/labs/delete/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    


    data.buffer.push("<div class=\"alert alert-danger\">\n    <span class=\"glyphicon glyphicon-warning-sign\"></span> \n    Are you sure you wish to delete this lab request?\n</div>");
    
  });

});
define('hospitalrun/labs/delete/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/labs/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/charge-actions', 'ember', 'hospitalrun/mixins/patient-submodule'], function (exports, AbstractEditController, ChargeActions, Ember, PatientSubmodule) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend(ChargeActions['default'], PatientSubmodule['default'], {
        needs: ['labs','pouchdb'],
        chargePricingCategory: 'Lab',
        chargeRoute: 'labs.charge',

        
        canComplete: function() {
            var labTypeName = this.get('selectedLabType');
            if (Ember['default'].isArray(labTypeName) && labTypeName.length >1) {
                return false;
            } else {
                return this.currentUserCan('complete_lab');
            }
        }.property('selectedLabType.[]'),
        
        actions: {
            completeLab: function() {
                this.set('status', 'Completed');
                this.get('model').validate();
                if (this.get('isValid')) {
                    this.set('labDate', new Date());
                    this.send('update');
                }
            },
            
            /**
             * Update the model and perform the before update and after update
             */
            update: function() {
                if (this.get('isNew')) {
                    var newLab = this.get('model'),
                        selectedLabType = this.get('selectedLabType');
                        if (Ember['default'].isEmpty(this.get('status'))) {
                            this.set('status', 'Requested');
                        }
                        this.set('requestedBy', newLab.getUserName());
                        this.set('requestedDate', new Date());
                    if (Ember['default'].isEmpty(selectedLabType)) {
                        this.saveNewPricing(this.get('labTypeName'), 'Lab', 'labType').then(function() {
                            this.addChildToVisit(newLab, 'labs', 'Lab').then(function() {
                                this.saveModel();
                            }.bind(this));
                        }.bind(this));
                    } else {
                        this.getSelectedPricing('selectedLabType').then(function(pricingRecords) {
                            if (Ember['default'].isArray(pricingRecords)) {
                                this.createMultipleRequests(pricingRecords, 'labType','labs', 'Lab');
                            } else {
                                this.set('labType', pricingRecords);
                                this.addChildToVisit(newLab, 'labs', 'Lab').then(function() {
                                this.saveModel();
                            }.bind(this));
                            }
                        }.bind(this));
                    }
                } else {
                   this.saveModel();
                }
            }
        },
        
        additionalButtons: function() {
            var canComplete = this.get('canComplete'),
                isValid = this.get('isValid');
            if (isValid && canComplete) {
                return [{
                    buttonAction: 'completeLab',
                    buttonIcon: 'glyphicon glyphicon-ok',
                    class: 'btn btn-primary on-white',
                    buttonText: 'Complete'
                }];
            }
        }.property('canComplete', 'isValid'),

        pricingTypeForObjectType: 'Lab Procedure',
        pricingTypes: Ember['default'].computed.alias('controllers.labs.labPricingTypes'),
        
        pricingList: null, //This gets filled in by the route
        
        updateCapability: 'add_lab',
        
        afterUpdate: function(saveResponse, multipleRecords) {
            var afterDialogAction,
                alertMessage,
                alertTitle;            
            if (this.get('status') === 'Completed') {
                alertTitle = 'Lab Request Completed';
                alertMessage = 'The lab request has been completed.';
            } else {
                alertTitle = 'Lab Request Saved';
                alertMessage = 'The lab request has been saved.';
            }
            if (multipleRecords) {
                afterDialogAction = 'allItems';
            }
            this.saveVisitIfNeeded(alertTitle, alertMessage, afterDialogAction);
            this.set('selectPatient', false);
        }
        
    });

});
define('hospitalrun/labs/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'hospitalrun/mixins/charge-route', 'ember', 'hospitalrun/mixins/patient-list-route'], function (exports, AbstractEditRoute, ChargeRoute, Ember, PatientListRoute) {

    'use strict';

    exports['default'] = AbstractEditRoute['default'].extend(ChargeRoute['default'], PatientListRoute['default'], {
        editTitle: 'Edit Lab Request',
        modelName: 'lab',
        newTitle: 'New Lab Request',
        pricingCategory: 'Lab',
        
        getNewData: function() {
            return Ember['default'].RSVP.resolve({
                selectPatient: true,
                requestDate: moment().startOf('day').toDate()
            });
        }
    });

});
define('hospitalrun/labs/edit/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    ");
    stack1 = helpers['if'].call(depth0, "selectPatient", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    \n    ");
    stack1 = helpers['if'].call(depth0, "isNew", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n\n    ");
    stack1 = helpers['if'].call(depth0, "canComplete", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-text'] || (depth0 && depth0['em-text']),options={hash:{
      'property': ("notes"),
      'label': ("Notes"),
      'rows': (3)
    },hashTypes:{'property': "STRING",'label': "STRING",'rows': "INTEGER"},hashContexts:{'property': depth0,'label': depth0,'rows': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-text", options))));
    data.buffer.push("\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['patient-typeahead'] || (depth0 && depth0['patient-typeahead']),options={hash:{
      'property': ("patientTypeAhead"),
      'label': ("Patient"),
      'content': ("patientList"),
      'selection': ("selectedPatient"),
      'class': ("required")
    },hashTypes:{'property': "STRING",'label': "STRING",'content': "ID",'selection': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'content': depth0,'selection': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "patient-typeahead", options))));
    data.buffer.push("\n    ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['patient-summary'] || (depth0 && depth0['patient-summary']),options={hash:{
      'patient': ("patient"),
      'returnTo': ("labs.edit"),
      'returnToContext': ("id"),
      'disablePatientLink': ("isNew")
    },hashTypes:{'patient': "ID",'returnTo': "STRING",'returnToContext': "ID",'disablePatientLink': "ID"},hashContexts:{'patient': depth0,'returnTo': depth0,'returnToContext': depth0,'disablePatientLink': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "patient-summary", options))));
    data.buffer.push("\n    ");
    return buffer;
    }

  function program6(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        <div class=\"row\">\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-xs-3 required"),
      'label': ("Visit"),
      'property': ("visit"),
      'content': ("patientVisits"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content.visitDescription"),
      'prompt': ("--Add New Visit--"),
      'selected': ("visit")
    },hashTypes:{'class': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'prompt': "STRING",'selected': "ID"},hashContexts:{'class': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'prompt': depth0,'selected': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n        </div>\n        ");
    data.buffer.push(escapeExpression((helper = helpers['checkbox-or-typeahead'] || (depth0 && depth0['checkbox-or-typeahead']),options={hash:{
      'property': ("labTypeName"),
      'label': ("Lab Type"),
      'list': ("objectTypeList"),
      'selection': ("selectedLabType"),
      'optionLabelPath': ("content.name"),
      'typeAheadType': ("pricing"),
      'class': ("required"),
      'prompt': (" "),
      'model': ("model")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID",'optionLabelPath': "STRING",'typeAheadType': "STRING",'class': "STRING",'prompt': "STRING",'model': "ID"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0,'optionLabelPath': depth0,'typeAheadType': depth0,'class': depth0,'prompt': depth0,'model': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "checkbox-or-typeahead", options))));
    data.buffer.push("    \n    ");
    return buffer;
    }

  function program8(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("  \n        <div class=\"row\">\n            <div class=\"form-group col-xs-3\">\n                <label>Visit</label>\n                <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "visit.visitDate", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n            </div>\n            <div class=\"form-group col-xs-6\">\n                <label>Lab Type</label>\n                <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "labType.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n            </div>\n        </div>\n    ");
    return buffer;
    }

  function program10(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("result"),
      'label': ("Result")
    },hashTypes:{'property': "STRING",'label': "STRING"},hashContexts:{'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    ");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/labs/edit/view', ['exports', 'hospitalrun/views/panel'], function (exports, PanelView) {

	'use strict';

	exports['default'] = PanelView['default'].extend();

});
define('hospitalrun/labs/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, AbstractPagedController, UserSession) {

    'use strict';

    exports['default'] = AbstractPagedController['default'].extend(UserSession['default'], {
        startKey: [],
        addPermission: 'add_lab'
    });

});
define('hospitalrun/labs/index/route', ['exports', 'hospitalrun/routes/abstract-index-route'], function (exports, AbstractIndexRoute) {

    'use strict';

    exports['default'] = AbstractIndexRoute['default'].extend({
        modelName: 'lab',
        pageTitle: 'Lab Requests',
        searchStatus: 'Requested',
        
        _getStartKeyFromItem: function(item) {
            var labDateAsTime = item.get('labDateAsTime'),
                keyPrefix = this.get('keyPrefix'),
                requestedDateAsTime = item.get('requestedDateAsTime'),
                searchStatus = this.get('searchStatus');
            return [searchStatus, requestedDateAsTime, labDateAsTime, keyPrefix+item.get('id')];
        },
        
        _modelQueryParams: function() {
            var keyPrefix = this.get('keyPrefix'),
                maxValue = this.get('maxValue'),
                searchStatus = this.get('searchStatus');
            return {
                options: {
                    startkey: [searchStatus, null, null, keyPrefix],
                    endkey: [searchStatus, maxValue, maxValue, keyPrefix+maxValue]
                },
                mapReduce: 'lab_by_status'
            };
        },
        
        actions: {
            completeItem: function(item) {
                item.set('isCompleting', true);
                this.transitionTo('labs.edit', item);
            }, 
        }
    });

});
define('hospitalrun/labs/index/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <table class=\"table\">\n        <tr class=\"table-header\">\n            <th>Date Requested</th>\n            <th>Patient</th>\n            <th>Lab Type</th>\n            <th>Notes</th>\n            ");
    stack1 = helpers['if'].call(depth0, "showActions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        </tr>\n        ");
    stack1 = helpers['with'].call(depth0, "", "as", "parentController", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </table>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    
    data.buffer.push("\n                <th>Actions</th>\n            ");
    }

  function program4(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            ");
    stack1 = helpers.each.call(depth0, {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[],types:[],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    return buffer;
    }
  function program5(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                <tr ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editItem", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                    <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "requestedDate", options) : helperMissing.call(depth0, "date-format", "requestedDate", options))));
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "patient.displayName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "labType.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "notes", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                     ");
    stack1 = helpers['if'].call(depth0, "parentController.showActions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </tr>\n            ");
    return buffer;
    }
  function program6(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                        <td>\n                            ");
    stack1 = helpers['if'].call(depth0, "parentController.canEdit", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </td>\n                    ");
    return buffer;
    }
  function program7(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                <button class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editItem", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                            ");
    return buffer;
    }

  function program9(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <div class=\"alert alert-info\">\n        <p>No labs found. ");
    stack1 = helpers['if'].call(depth0, "canAdd", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n    </div>\n");
    return buffer;
    }
  function program10(depth0,data) {
    
    var buffer = '';
    data.buffer.push("<a href=\"#\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "newItem", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">Create a new record?</a>");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "hasRecords", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(9, program9, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/labs/index/view', ['exports', 'hospitalrun/views/item-listing'], function (exports, ItemListingView) {

	'use strict';

	exports['default'] = ItemListingView['default'].extend();

});
define('hospitalrun/labs/item-controller/controller', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend({
        actions: {
            editLab: function(lab) {
                if (this.get('canEdit')) {
                    this.parentController.send('editLab', lab);
                }
            }
        },
        
        canEdit: function() {
            var status = this.get('status');
            return (status === 'Requested');
        }.property('status')
    });

});
define('hospitalrun/labs/route', ['exports', 'hospitalrun/routes/abstract-module-route'], function (exports, AbstractModuleRoute) {

    'use strict';

    exports['default'] = AbstractModuleRoute['default'].extend({
        addCapability: 'add_lab',
        additionalModels: [{ 
            name: 'labPricingTypes',
            findArgs: ['lookup','lab_pricing_types']
        }],
        allowSearch: false,
        moduleName: 'labs',
        newButtonText: '+ new lab',
        sectionTitle: 'Labs',
        subActions: [{
            text: 'Requests',
            linkTo: 'labs.index'
        }, {
            text: 'Completed',
            linkTo: 'labs.completed'
        }]
    });

});
define('hospitalrun/medication/completed/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, AbstractPagedController) {

    'use strict';

    exports['default'] = AbstractPagedController['default'].extend({
        showActions: false,
        startKey: []
    });

});
define('hospitalrun/medication/completed/route', ['exports', 'hospitalrun/medication/index/route'], function (exports, MedicationIndexRoute) {

    'use strict';

    exports['default'] = MedicationIndexRoute['default'].extend({
        modelName: 'medication',
        pageTitle: 'Completed Medication',
        searchStatus: 'Fulfilled'
    });

});
define('hospitalrun/medication/completed/view', ['exports', 'hospitalrun/views/item-listing'], function (exports, ItemListingView) {

    'use strict';

    exports['default'] = ItemListingView['default'].extend({
        templateName: 'medication/index'
    });

});
define('hospitalrun/medication/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'hospitalrun/mixins/patient-submodule'], function (exports, AbstractDeleteController, PatientSubmodule) {

    'use strict';

    exports['default'] = AbstractDeleteController['default'].extend(PatientSubmodule['default'], {
        title: 'Delete Request',
        
        actions: {
            delete: function() {
                this.removeChildFromVisit(this.get('model'), 'medication').then(function() {
                    this.get('model').destroyRecord().then(function() {                    
                        this.send('closeModal');
                    }.bind(this));
                }.bind(this));
            }
        }
    });

});
define('hospitalrun/medication/delete/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    


    data.buffer.push("<div class=\"alert alert-danger\">\n    <span class=\"glyphicon glyphicon-warning-sign\"></span> \n    Are you sure you wish to delete this medication request?\n</div>");
    
  });

});
define('hospitalrun/medication/delete/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/medication/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/fulfill-request', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/inventory-selection', 'hospitalrun/mixins/patient-id', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/mixins/user-session'], function (exports, AbstractEditController, Ember, FulfillRequest, InventoryLocations, InventorySelection, PatientId, PatientSubmodule, UserSession) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend(InventorySelection['default'], FulfillRequest['default'], InventoryLocations['default'], PatientId['default'], PatientSubmodule['default'], UserSession['default'], {    
        needs: ['application','medication','pouchdb'],    
        
        applicationConfigs: Ember['default'].computed.alias('controllers.application.model'),
        expenseAccountList: Ember['default'].computed.alias('controllers.medication.expenseAccountList'),
        
        canFulfill: function() {
            return this.currentUserCan('fulfill_medication');
        }.property(),
        
        isFulfilled: function() {
            var status = this.get('status');
            return (status === 'Fulfilled');
        }.property('status'),
        
        isFulfilling: function() {
            var canFulfill = this.get('canFulfill'),
                isRequested = this.get('isRequested'),
                fulfillRequest = this.get('shouldFulfillRequest'),
                isFulfilling = canFulfill && (isRequested || fulfillRequest);
            this.get('model').set('isFulfilling', isFulfilling);
            return isFulfilling;
        }.property('canFulfill','isRequested', 'shouldFulfillRequest'),
        
        isFulfilledOrRequested: function() {
            return (this.get('isFulfilled') || this.get('isRequested'));
        }.property('isFulfilled','isRequested'),
        
        prescriptionClass: function() {
            var quantity = this.get('quantity');
            this.get('model').validate();
            if (Ember['default'].isEmpty(quantity)) {
                return 'required';
            }
        }.property('quantity'),
        
        quantityClass: function() {
            var prescription = this.get('prescription'),
                returnClass = 'col-xs-3',
                isFulfilling = this.get('isFulfilling');
            if (isFulfilling || Ember['default'].isEmpty(prescription)) {
                returnClass += ' required';
            }
            return returnClass;
        }.property('isFulfilling', 'prescription'),
        
        quantityLabel: function() {
            var returnLabel = "Quantity Requested",
                isFulfilled = this.get('isFulfilled'),
                isFulfilling = this.get('isFulfilling');
            if (isFulfilling) {
                returnLabel = "Quantity Dispensed";
            } else if (isFulfilled) {
                returnLabel = "Quantity Distributed";
            }
            return returnLabel;
        }.property('isFulfilled'),

        medicationList: [],
        updateCapability: 'add_medication',

        afterUpdate: function() {
            var alertTitle = 'Medication Request Saved',
                alertMessage = 'The medication record has been saved.',
                isFulfilled = this.get('isFulfilled');
            if (isFulfilled) {
                alertTitle = 'Medication Request Fulfilled';
                alertMessage = 'The medication request has been fulfilled.';
                this.set('selectPatient', false);
            } else {
                alertTitle = 'Medication Request Saved';
                alertMessage = 'The medication record has been saved.';
            }
            this.saveVisitIfNeeded(alertTitle, alertMessage);
        },
        
        _addNewPatient: function() {        
            this.displayAlert('Please Wait','A new patient needs to be created...Please wait..');
            this._getNewPatientId().then(function(friendlyId) {
                var patientTypeAhead = this.get('patientTypeAhead'),
                    nameParts = patientTypeAhead.split(' '),
                    patientDetails = {
                        friendlyId: friendlyId,
                        patientFullName: patientTypeAhead,
                        requestingController: this
                    },
                    patient;
                if (nameParts.length >= 3) {
                    patientDetails.firstName = nameParts[0];
                    patientDetails.middleName = nameParts[1];            
                    patientDetails.lastName = nameParts.splice(2, nameParts.length).join(' ');
                } else if (nameParts.length === 2) {
                    patientDetails.firstName = nameParts[0];
                    patientDetails.lastName = nameParts[1];                        
                } else {
                    patientDetails.firstName = patientTypeAhead;
                }
                patient = this.store.createRecord('patient', patientDetails);
                this.send('openModal', 'patients.quick-add', patient);        
            }.bind(this));
        },
        
        _getNewPatientId: function() {
            var newPatientId = this.get('newPatientId');
            if (Ember['default'].isEmpty(newPatientId)) {
                return new Ember['default'].RSVP.Promise(function(resolve, reject){
                    var configs = this.get('applicationConfigs');
                    this.generateFriendlyId(configs).then(function(friendlyId) {
                        this.set('newPatientId', friendlyId);
                        resolve(friendlyId);
                    }.bind(this), reject);    
                }.bind(this));
            } else {
                return Ember['default'].RSVP.resolve(newPatientId);
            }
        },
        
        beforeUpdate: function() {
            var isFulfilling = this.get('isFulfilling'),
                isNew = this.get('isNew');
            if (isNew || isFulfilling) {
                return new Ember['default'].RSVP.Promise(function(resolve, reject){
                    var newMedication = this.get('model');
                    newMedication.validate().then(function() {
                        if (newMedication.get('isValid')) {                        
                            if (isNew) {
                                if (Ember['default'].isEmpty(newMedication.get('patient'))) {
                                    this._addNewPatient();
                                    reject('creating new patient first');
                                } else {
                                    this.set('newMedication', true);
                                    this.set('status', 'Requested');
                                    this.set('requestedBy', newMedication.getUserName());
                                    this.set('requestedDate', new Date());
                                    this.addChildToVisit(newMedication, 'medication', 'Pharmacy').then(function() {        
                                        this.finishBeforeUpdate(isFulfilling,  resolve);
                                    }.bind(this), reject);
                                }
                            } else {
                                this.finishBeforeUpdate(isFulfilling,  resolve);
                            }                        
                        } else {
                            this.send('showDisabledDialog');
                            reject('invalid model');                        
                        }
                    }.bind(this)).catch(function() {
                        this.send('showDisabledDialog');
                        reject('invalid model');                    
                    }.bind(this));
                }.bind(this));
            } else {
                return Ember['default'].RSVP.resolve();
            }
        },
        
        finishBeforeUpdate: function(isFulfilling, resolve) {
            if (isFulfilling) {
                var inventoryLocations = this.get('inventoryLocations'),
                    inventoryRequest = this.get('store').createRecord('inv-request', {
                        expenseAccount: this.get('expenseAccount'),
                        dateCompleted: new Date(),
                        inventoryItem: this.get('inventoryItem'),
                        inventoryLocations: inventoryLocations,
                        quantity: this.get('quantity'),
                        transactionType: 'Fulfillment',
                        patient: this.get('patient'),
                        markAsConsumed: true
                    });
                this.performFulfillRequest(inventoryRequest, false, false, true).then(function() {                
                    this.set('status','Fulfilled');
                    resolve();
                }.bind(this));
            } else {
                resolve();
            }
        },
        
        showUpdateButton: function() {        
            var isFulfilled = this.get('isFulfilled');
            if (isFulfilled) {
                return false;
            } else {
                return this._super();
            }
        }.property('updateCapability', 'isFulfilled'),
        
        updateButtonText: function() {
            if (this.get('hideFulfillRequest')) {
                return 'Dispense';
            } else if (this.get('isFulfilling')) {
                return 'Fulfill';
            } else if (this.get('isNew')) {
                return 'Add';
            } else {
                return 'Update';
            }
        }.property('isNew', 'isFulfilling'),
        
        actions: {
            addedNewPatient: function(record) {
                this.send('closeModal');
                this.set('patient', record);
                this.set('newPatientId');
                this.send('update');
            }
        }

    });

});
define('hospitalrun/medication/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'hospitalrun/mixins/fulfill-request', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/patient-list-route'], function (exports, AbstractEditRoute, Ember, FulfillRequest, InventoryLocations, PatientListRoute) {

    'use strict';

    exports['default'] = AbstractEditRoute['default'].extend(FulfillRequest['default'], InventoryLocations['default'], PatientListRoute['default'], {
        editTitle: 'Edit Medication Request', 
        modelName: 'medication',
        newTitle: 'New Medication Request',
        getNewData: function(params) {
            var idParam = this.get('idParam'),
                newData = {
                    selectPatient: true,
                    prescriptionDate: moment().startOf('day').toDate()
                };
            if (params[idParam] === 'dispense') {
                newData.shouldFulfillRequest = true;
                newData.hideFulfillRequest = true;
            }
            return Ember['default'].RSVP.resolve(newData);
        },
        
        afterModel: function(model) {
            var inventoryItem = model.get('inventoryItem');
            if (!Ember['default'].isEmpty(inventoryItem)) {
                //Make sure inventory item is fully resolved.
                return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                    inventoryItem.reload().then(function(inventoryItem) {
                        model.set('inventoryItem', inventoryItem);
                        resolve();
                    }, reject);                
                }.bind(this));
            }
        },
        
        model: function(params) {
            var idParam = this.get('idParam');
            if (!Ember['default'].isEmpty(idParam) && params[idParam] === 'new' || params[idParam] === 'dispense') {
                return this._createNewRecord(params);
            } else {
                return this._super(params);
            }
        },
        
        setupController: function(controller, model) {
            this._super(controller, model);
            var inventoryQuery = {
                key:  'Medication',            
                include_docs: true,
            };
            var inventoryItem = model.get('inventoryItem'),
                patient = model.get('patient');
            if (Ember['default'].isEmpty(inventoryItem)) {
                this.controllerFor('pouchdb').queryMainDB(inventoryQuery, 'inventory_by_type').then(function(result) {
                    var medicationList = result.rows.map(function(medication) {
                        return medication.doc;
                    });
                    controller.set('medicationList', medicationList);
                });
            }
            if (Ember['default'].isEmpty(patient)) {
                this._fetchPatientList(controller);
            }        
        }
    });

});
define('hospitalrun/medication/edit/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    ");
    stack1 = helpers.unless.call(depth0, "selectPatient", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    <div class=\"row\">\n        ");
    stack1 = helpers['if'].call(depth0, "selectPatient", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    stack1 = helpers['if'].call(depth0, "isNew", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </div>\n    ");
    stack1 = helpers['if'].call(depth0, "isFulfilledOrRequested", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(12, program12, data),fn:self.program(10, program10, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    ");
    stack1 = helpers['if'].call(depth0, "isFulfilled", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(17, program17, data),fn:self.program(14, program14, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['patient-summary'] || (depth0 && depth0['patient-summary']),options={hash:{
      'patient': ("patient"),
      'returnTo': ("medication.edit"),
      'returnToContext': ("id"),
      'disablePatientLink': ("isNew")
    },hashTypes:{'patient': "ID",'returnTo': "STRING",'returnToContext': "ID",'disablePatientLink': "ID"},hashContexts:{'patient': depth0,'returnTo': depth0,'returnToContext': depth0,'disablePatientLink': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "patient-summary", options))));
    data.buffer.push("\n    ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['patient-typeahead'] || (depth0 && depth0['patient-typeahead']),options={hash:{
      'property': ("patientTypeAhead"),
      'label': ("Patient"),
      'content': ("patientList"),
      'selection': ("selectedPatient"),
      'class': ("col-xs-6 required")
    },hashTypes:{'property': "STRING",'label': "STRING",'content': "ID",'selection': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'content': depth0,'selection': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "patient-typeahead", options))));
    data.buffer.push("\n        ");
    return buffer;
    }

  function program6(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-xs-4 required"),
      'label': ("Visit"),
      'property': ("visit"),
      'content': ("patientVisits"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content.visitDescription"),
      'prompt': ("--Add New Outpatient Visit--"),
      'selected': ("visit")
    },hashTypes:{'class': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'prompt': "STRING",'selected': "ID"},hashContexts:{'class': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'prompt': depth0,'selected': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("        \n        ");
    return buffer;
    }

  function program8(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            <div class=\"form-group col-xs-3\">\n                <label>Visit</label>\n                <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "visit.visitDescription", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n            </div>\n        ");
    return buffer;
    }

  function program10(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n        <div class=\"form-group\">\n            <label class=\"control-label\">Medication</label>\n            <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "inventoryItem.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>        \n        </div>\n    ");
    return buffer;
    }

  function program12(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['inventory-typeahead'] || (depth0 && depth0['inventory-typeahead']),options={hash:{
      'property': ("inventoryItemTypeAhead"),
      'label': ("Medication"),
      'content': ("medicationList"),
      'selection': ("selectedInventoryItem"),
      'class': ("required")
    },hashTypes:{'property': "STRING",'label': "STRING",'content': "ID",'selection': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'content': depth0,'selection': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "inventory-typeahead", options))));
    data.buffer.push("\n    ");
    return buffer;
    }

  function program14(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['static-text'] || (depth0 && depth0['static-text']),options={hash:{
      'label': ("Prescription"),
      'value': ("prescription")
    },hashTypes:{'label': "STRING",'value': "ID"},hashContexts:{'label': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "static-text", options))));
    data.buffer.push("\n        <div class=\"row\">\n            ");
    stack1 = (helper = helpers['static-text'] || (depth0 && depth0['static-text']),options={hash:{
      'label': ("Prescription Date"),
      'class': ("col-xs-4")
    },hashTypes:{'label': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'class': depth0},inverse:self.noop,fn:self.program(15, program15, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "static-text", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['static-text'] || (depth0 && depth0['static-text']),options={hash:{
      'label': ("quantityLabel"),
      'class': ("col-xs-3"),
      'value': ("quantity")
    },hashTypes:{'label': "ID",'class': "STRING",'value': "ID"},hashContexts:{'label': depth0,'class': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "static-text", options))));
    data.buffer.push("            \n            ");
    data.buffer.push(escapeExpression((helper = helpers['static-text'] || (depth0 && depth0['static-text']),options={hash:{
      'label': ("Refills"),
      'class': ("col-xs-3"),
      'value': ("refills")
    },hashTypes:{'label': "STRING",'class': "STRING",'value': "ID"},hashContexts:{'label': depth0,'class': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "static-text", options))));
    data.buffer.push("\n        </div>\n    ");
    return buffer;
    }
  function program15(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                ");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "prescriptionDate", options) : helperMissing.call(depth0, "date-format", "prescriptionDate", options))));
    data.buffer.push("\n            ");
    return buffer;
    }

  function program17(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-text'] || (depth0 && depth0['em-text']),options={hash:{
      'property': ("prescription"),
      'label': ("Prescription"),
      'rows': ("3"),
      'class': ("prescriptionClass")
    },hashTypes:{'property': "STRING",'label': "STRING",'rows': "STRING",'class': "ID"},hashContexts:{'property': depth0,'label': depth0,'rows': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-text", options))));
    data.buffer.push("\n        <div class=\"row\">\n            ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("prescriptionDate"),
      'label': ("Prescription Date"),
      'class': ("col-sm-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n        </div>\n        <div class=\"row\">\n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("quantity"),
      'label': ("quantityLabel"),
      'class': ("quantityClass")
    },hashTypes:{'property': "STRING",'label': "ID",'class': "ID"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("          \n            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("refills"),
      'label': ("Refills"),
      'class': ("col-xs-3")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n        </div>\n        ");
    stack1 = helpers.unless.call(depth0, "hideFulfillRequest", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(18, program18, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    stack1 = helpers['if'].call(depth0, "isFulfilling", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(22, program22, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    ");
    return buffer;
    }
  function program18(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            ");
    stack1 = helpers['if'].call(depth0, "isNew", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(19, program19, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    return buffer;
    }
  function program19(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                ");
    stack1 = helpers['if'].call(depth0, "canFulfill", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(20, program20, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            ");
    return buffer;
    }
  function program20(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                    <div class=\"form-group\">            \n                        <label class=\"control-label\">Fulfill Request</label>\n                     </div>\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("Fulfill Request Now"),
      'property': ("shouldFulfillRequest")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                ");
    return buffer;
    }

  function program22(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("expenseAccount"),
      'label': ("Bill To"),
      'list': ("expenseAccountList"),
      'selection': ("expenseAccount")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers['inventory-location-picker'] || (depth0 && depth0['inventory-location-picker']),options={hash:{
      'label': ("Pull From"),
      'quantityRequested': ("quantity"),
      'locationList': ("inventoryItem.availableLocations"),
      'selectedLocations': ("inventoryLocations")
    },hashTypes:{'label': "STRING",'quantityRequested': "ID",'locationList': "ID",'selectedLocations': "ID"},hashContexts:{'label': depth0,'quantityRequested': depth0,'locationList': depth0,'selectedLocations': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "inventory-location-picker", options))));
    data.buffer.push("\n        ");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/medication/edit/view', ['exports', 'hospitalrun/views/panel'], function (exports, PanelView) {

	'use strict';

	exports['default'] = PanelView['default'].extend();

});
define('hospitalrun/medication/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, AbstractPagedController, UserSession) {

    'use strict';

    exports['default'] = AbstractPagedController['default'].extend(UserSession['default'], {
        startKey: [],
        canAdd: function() {        
            return this.currentUserCan('add_medication');
        }.property(),    

        showActions: function() {
            return this.currentUserCan('fulfill_medication');
        }.property()    
    });

});
define('hospitalrun/medication/index/route', ['exports', 'hospitalrun/routes/abstract-index-route'], function (exports, AbstractIndexRoute) {

    'use strict';

    exports['default'] = AbstractIndexRoute['default'].extend({
        modelName: 'medication',
        pageTitle: 'Medication Requests',
        searchStatus: 'Requested',
        
        _getStartKeyFromItem: function(item) {
            var prescriptionDateAsTime = item.get('prescriptionDateAsTime'),
                keyPrefix = this.get('keyPrefix'),
                requestedDateAsTime = item.get('requestedDateAsTime'),
                searchStatus = this.get('searchStatus');
            return [searchStatus, requestedDateAsTime, prescriptionDateAsTime, keyPrefix+item.get('id')];
        },
        
        _modelQueryParams: function() {
            var keyPrefix = this.get('keyPrefix'),
                maxValue = this.get('maxValue'),
                searchStatus = this.get('searchStatus');
            return {
                options: {
                    startkey: [searchStatus, null, null, keyPrefix],
                    endkey: [searchStatus, maxValue, maxValue, keyPrefix+maxValue]
                },
                mapReduce: 'medication_by_status'
            };
        }
    });

});
define('hospitalrun/medication/index/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <table class=\"table\">\n        <tr class=\"table-header\">\n            <th>Date</th>\n            <th>Patient</th>\n            <th>Medication</th>\n            <th>Quantity</th>\n            <th>Status</th>\n            ");
    stack1 = helpers['if'].call(depth0, "showActions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        </tr>\n        ");
    stack1 = helpers['with'].call(depth0, "showActions", "as", "showActions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </table>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    
    data.buffer.push("\n                <th>Actions</th>\n            ");
    }

  function program4(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            ");
    stack1 = helpers.each.call(depth0, {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[],types:[],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    return buffer;
    }
  function program5(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                <tr ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editItem", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                    <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "prescriptionDate", options) : helperMissing.call(depth0, "date-format", "prescriptionDate", options))));
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "patient.displayName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "inventoryItem.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "quantity", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "status", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    ");
    stack1 = helpers['if'].call(depth0, "showActions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </tr>\n            ");
    return buffer;
    }
  function program6(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                        <td>\n                            <button class=\"btn btn-default\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editItem", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Fulfill</button>\n                        </td>\n                    ");
    return buffer;
    }

  function program8(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <div class=\"alert alert-info\">\n        <p>No items found. ");
    stack1 = helpers['if'].call(depth0, "canAdd", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n    </div>\n");
    return buffer;
    }
  function program9(depth0,data) {
    
    var buffer = '';
    data.buffer.push("<a href=\"#\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "newItem", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">Create a new medication request?</a>");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "model", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(8, program8, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    return buffer;
    
  });

});
define('hospitalrun/medication/index/view', ['exports', 'hospitalrun/views/item-listing'], function (exports, ItemListingView) {

	'use strict';

	exports['default'] = ItemListingView['default'].extend();

});
define('hospitalrun/medication/item-controller/controller', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend({
        actions: {
            editMedication: function(medication) {
                if (this.get('canEdit')) {
                    this.parentController.send('editMedication', medication);
                }
            }
        },

        canEdit: function() {
            var status = this.get('status');
            return (status === 'Requested');
        }.property('status')
    });

});
define('hospitalrun/medication/return/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/fulfill-request', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/inventory-selection', 'hospitalrun/mixins/patient-submodule'], function (exports, AbstractEditController, Ember, FulfillRequest, InventoryLocations, InventorySelection, PatientSubmodule) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend(FulfillRequest['default'], InventoryLocations['default'], InventorySelection['default'], PatientSubmodule['default'], {    
        needs: ['medication','pouchdb'],

        lookupListsToUpdate: [{
            name: 'aisleLocationList', //Name of property containing lookup list
            property: 'aisleLocation', //Corresponding property on model that potentially contains a new value to add to the list
            id: 'aisle_location_list' //Id of the lookup list to update
        }, {
            name: 'expenseAccountList', //Name of property containing lookup list
            property: 'expenseAccount', //Corresponding property on model that potentially contains a new value to add to the list
            id: 'expense_account_list' //Id of the lookup list to update
        }, {
            name: 'warehouseList', //Name of property containing lookup list
            property: 'location', //Corresponding property on model that potentially contains a new value to add to the list
            id: 'warehouse_list' //Id of the lookup list to update
        }],    

        aisleLocationList: Ember['default'].computed.alias('controllers.medication.aisleLocationList'),
        expenseAccountList: Ember['default'].computed.alias('controllers.medication.expenseAccountList'),
        warehouseList: Ember['default'].computed.alias('controllers.medication.warehouseList'), 
        updateCapability: 'add_medication',
        
        medicationChanged: function() {
            var medication = this.get('medication');
            if (!Ember['default'].isEmpty(medication)) {
                var inventoryItem = medication.get('inventoryItem');
                this.set('inventoryItemTypeAhead', '%@ - %@'.fmt(inventoryItem.get('name'), inventoryItem.get('friendlyId')));
                this.set('inventoryItem', inventoryItem);            
                //this.set('inventoryItemTypeAhead', medication.get('inventoryItem.name'));            
            } else {
                this.set('inventoryItem');
            }
            Ember['default'].run.later(function() {
                this.get('model').validate();
            }.bind(this));
        }.observes('medication'),
        
        patientVisitsChanged: function() {
            var patientVisits = this.get('patientVisits');
            if (!Ember['default'].isEmpty(patientVisits)) {
                this.set('visit', patientVisits.get('firstObject'));
            }
        }.observes('patientVisits'),
        
        showPatientMedicationList: function() {
            var patientMedication = this.get('patientMedication');        
            return !Ember['default'].isEmpty(patientMedication);
        }.property('patientMedication'),
        
        setPatientMedicationList: function() {
            var visit = this.get('visit');
            if (!Ember['default'].isEmpty(visit)) {
                visit.get('medication').then(function(medication) {
                    medication = medication.filterBy('status','Fulfilled');
                    this.set('patientMedication', medication);
                    this.set('medication', medication.get('firstObject'));
                }.bind(this));
            } else {
                this.set('patientMedication');
            }
        }.observes('patient','visit'),
        
        _finishUpdate: function() {
            var aisle = this.get('deliveryAisle'),
                location = this.get('deliveryLocation'),
                inventoryItem = this.get('inventoryItem'),
                //find location on inventoryItem
                inventoryLocation = this._findOrCreateLocation(inventoryItem, location, aisle);
            this.set('adjustPurchases', true);
            this.set('inventoryLocations',[inventoryLocation]);            
            this.set('markAsConsumed',true);
            //Make sure inventory item is resolved first.
            this.get('inventoryItem').then(function() {
                this.send('fulfillRequest', this.get('model'), false, true, true);
            }.bind(this));
        },
        
        actions: {        
            doneFulfillRequest: function() {
                this.updateLookupLists();
                this.displayAlert('Medication Returned', 'The medication has been marked as returned.', 'allItems');            
            },
            update: function() {            
                var medication = this.get('medication'),
                    quantity = this.get('quantity');                
                if (!Ember['default'].isEmpty(medication)) {
                    medication.reload().then(function() {
                        medication.decrementProperty('quantity', quantity);
                        if (medication.get('quantity') < 0) {
                            medication.set('quantity', 0);
                        }
                        medication.save().then(this._finishUpdate.bind(this));
                    }.bind(this));
                } else {
                    this._finishUpdate();
                }
            }
        },
        
        updateButtonText: 'Return Medication'
    });

});
define('hospitalrun/medication/return/route', ['exports', 'hospitalrun/medication/edit/route', 'ember'], function (exports, MedicationEditRoute, Ember) {

    'use strict';

    exports['default'] = MedicationEditRoute['default'].extend({
        editTitle: 'Return Medication', 
        modelName: 'inv-request',
        newTitle: 'Return Medication',
        getNewData: function() {
            return Ember['default'].RSVP.resolve({
                dateCompleted: new Date(),
                selectPatient: true,
                transactionType: 'Return'
            });
        }
    });

});
define('hospitalrun/medication/return/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    ");
    stack1 = helpers['if'].call(depth0, "showPatientMedicationList", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['patient-typeahead'] || (depth0 && depth0['patient-typeahead']),options={hash:{
      'property': ("patientTypeAhead"),
      'label': ("Patient"),
      'content': ("patientList"),
      'selection': ("selectedPatient"),
      'class': ("col-xs-6")
    },hashTypes:{'property': "STRING",'label': "STRING",'content': "ID",'selection': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'content': depth0,'selection': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "patient-typeahead", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-xs-6"),
      'label': ("Visit"),
      'property': ("visit"),
      'content': ("patientVisits"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content.visitDescription"),
      'selected': ("visit")
    },hashTypes:{'class': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'selected': "ID"},hashContexts:{'class': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'selected': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("        \n    </div>\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("quantity"),
      'label': ("Quantity To Return"),
      'class': ("col-xs-3 required")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("deliveryLocation"),
      'label': ("Return Location"),
      'list': ("warehouseList"),
      'selection': ("location"),
      'class': ("col-xs-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("deliveryAisle"),
      'label': ("Return Aisle"),
      'list': ("aisleLocationList"),
      'selection': ("aisleLocation"),
      'class': ("col-xs-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n    </div>\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-text'] || (depth0 && depth0['em-text']),options={hash:{
      'property': ("reason"),
      'label': ("Return Reason/Notes"),
      'rows': ("3")
    },hashTypes:{'property': "STRING",'label': "STRING",'rows': "STRING"},hashContexts:{'property': depth0,'label': depth0,'rows': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-text", options))));
    data.buffer.push("\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("dateCompleted"),
      'label': ("Adjustment Date"),
      'class': ("col-sm-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("expenseAccount"),
      'label': ("Credit To Account"),
      'list': ("expenseAccountList"),
      'selection': ("expenseAccount"),
      'class': ("col-sm-8")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n    </div>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("required"),
      'label': ("Medication"),
      'property': ("medication"),
      'content': ("patientMedication"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content.inventoryItem.name"),
      'selected': ("medication")
    },hashTypes:{'class': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'selected': "ID"},hashContexts:{'class': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'selected': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("        \n    ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['inventory-typeahead'] || (depth0 && depth0['inventory-typeahead']),options={hash:{
      'property': ("inventoryItemTypeAhead"),
      'label': ("Medication"),
      'content': ("medicationList"),
      'selection': ("selectedInventoryItem"),
      'class': ("required"),
      'showQuantity': (false)
    },hashTypes:{'property': "STRING",'label': "STRING",'content': "ID",'selection': "ID",'class': "STRING",'showQuantity': "BOOLEAN"},hashContexts:{'property': depth0,'label': depth0,'content': depth0,'selection': depth0,'class': depth0,'showQuantity': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "inventory-typeahead", options))));
    data.buffer.push("\n    ");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/medication/return/view', ['exports', 'hospitalrun/views/panel'], function (exports, PanelView) {

	'use strict';

	exports['default'] = PanelView['default'].extend();

});
define('hospitalrun/medication/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'ember'], function (exports, AbstractModuleRoute, Ember) {

    'use strict';

    exports['default'] = AbstractModuleRoute['default'].extend({
        addCapability: 'add_medication',    
        moduleName: 'medication',
        newButtonText: '+ new request',
        sectionTitle: 'Medication',
        
        additionalButtons: function() {
            var additionalButtons = [];
            if (this.currentUserCan('fulfill_medication')) {
                additionalButtons.push({
                    buttonIcon: 'octicon octicon-checklist',
                    buttonAction: 'dispenseMedication',
                    buttonText: 'dispense medication',
                    class: 'btn btn-primary'
                });
            }        
            if (this.currentUserCan(this.get('addCapability'))) {
                additionalButtons.push({
                    buttonIcon: 'octicon octicon-mail-reply',
                    buttonAction: 'returnMedication',
                    buttonText: 'return medication',
                    class: 'btn btn-primary'
                });
            }
            if (!Ember['default'].isEmpty(additionalButtons)) {
                return additionalButtons;
            }
        }.property(),

        additionalModels: [{ 
            name: 'aisleLocationList',
            findArgs: ['lookup','aisle_location_list']
        }, {
            name: 'expenseAccountList',
            findArgs: ['lookup','expense_account_list']
        }, {
            name: 'warehouseList',
            findArgs: ['lookup','warehouse_list']
        }],
        
        subActions: [{
            text: 'Requests',
            linkTo: 'medication.index'
        }, {
            text: 'Completed',
            linkTo: 'medication.completed'
        }],
        
        actions: {
            dispenseMedication: function() {
                if (this.currentUserCan('fulfill_medication')) {
                    this.transitionTo('medication.edit', 'dispense');
                }
            },
            
            returnMedication: function(){
                if (this.currentUserCan(this.get('addCapability'))) {
                    this.transitionTo('medication.return', 'new');
                }
            }
        }
    });

});
define('hospitalrun/medication/search/route', ['exports', 'hospitalrun/routes/abstract-search-route'], function (exports, AbstractSearchRoute) {

    'use strict';

    exports['default'] = AbstractSearchRoute['default'].extend({
    	moduleName: 'medication',
        searchKeys: [
            'prescription'
        ],
        searchModel: 'medication'
    });

});
define('hospitalrun/medication/search/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "medication/index", options) : helperMissing.call(depth0, "partial", "medication/index", options))));
    data.buffer.push("\n");
    return buffer;
    }

    stack1 = helpers.view.call(depth0, "search-listing", {hash:{
      'newButtonText': ("New Request"),
      'allButtonText': ("All Requests")
    },hashTypes:{'newButtonText': "STRING",'allButtonText': "STRING"},hashContexts:{'newButtonText': depth0,'allButtonText': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/mixins/appointment-statuses', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        appointmentStatuses: [
            'Scheduled',
            'Canceled'
        ],
    });

});
define('hospitalrun/mixins/billing-categories', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        defaultBillingCategories: [
            'Hospital Charges'
        ]
    });

});
define('hospitalrun/mixins/blood-types', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        bloodTypes: [
            'A+',
            'A-',
            'AB-',
            'AB+',
            'B+',
            'B-',
            'O+',
            'O-'        
        ]
    });

});
define('hospitalrun/mixins/charge-actions', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({
      _createNewChargeRecord: function(quantityCharged, pricingId) {
          return new Ember['default'].RSVP.Promise(function(resolve, reject) {
              this.store.find('pricing', pricingId.substr(8)).then(function(item) {
                  var newCharge = this.store.createRecord('proc-charge', {
                      dateCharged: new Date(),
                      quantity: quantityCharged,
                      pricingItem: item,
                  });
                  newCharge.save().then(function(chargeRecord) {
                      var charges = this.get('charges');
                      charges.addObject(chargeRecord);
                      resolve();
                  }.bind(this), reject);
              }.bind(this), reject);            
          }.bind(this), '_createNewChargeRecord with pricingId:'+pricingId);
      },
      
      actions: {
          addCharge: function(charge) {
              var charges = this.get('charges');
              charges.addObject(charge);
              this.send('update', true);
              this.send('closeModal');
          },
          
          deleteCharge: function(model) {
              var chargeToDelete = model.get('chargeToDelete'),
                  charges = this.get('charges');
              charges.removeObject(chargeToDelete);
              chargeToDelete.destroyRecord();
              this.send('update', true);
              this.send('closeModal');
          },
          
          showAddCharge: function() {
              var newCharge = this.get('store').createRecord('proc-charge',{
                  dateCharged: new Date(),
                  quantity: 1,
                  pricingCategory: this.get('chargePricingCategory')
              });
              this.send('openModal', this.get('chargeRoute'), newCharge);
          },
          
          showEditCharge: function(charge) {
              charge.set('pricingCategory', this.get('chargePricingCategory'));
              this.send('openModal', this.get('chargeRoute'), charge);            
          },
          
          showDeleteCharge: function(charge) {
              this.send('openModal', 'dialog', Ember['default'].Object.create({
                  confirmAction: 'deleteCharge',
                  title: 'Delete Charge Item',
                  message: 'Are you sure you want to delete this charged item?',
                  chargeToDelete: charge,
                  updateButtonAction: 'confirm',
                  updateButtonText: 'Ok'
              }));                 
          }
      },
      
      canAddCharge: function() {
          return this.currentUserCan('add_charge');
      }.property(),
      
      /**
       * Returns pricing list without object types
       * Used for labs and imaging where the labs and imaging types are
       * directly in the price list.
       */
      chargesPricingList: function() {
          var pricingList = this.get('pricingList'),
              pricingTypeForObjectType = this.get('pricingTypeForObjectType');
          return pricingList.filter(function(item) {
              return (item.type !== pricingTypeForObjectType);
          });
      }.property('pricingList','pricingTypeForObjectType'),

      
      chargeRoute: null,
      
      findChargeForPricingItem: function(pricingItem) {
          var charges = this.get('charges'),
              chargeForItem = charges.find(function(charge) {
                  var chargePricingItemId = charge.get('pricingItem.id');
                  return (pricingItem._id.substr(8) === chargePricingItemId);
              });
          return chargeForItem;
      },
      /**
       * Returns object types out of the pricing list.
       * Used for labs and imaging where the labs and imaging types are
       * directly in the price list.
       */
      objectTypeList: function() {
          var pricingList = this.get('pricingList'),            
              pricingTypeForObjectType = this.get('pricingTypeForObjectType'),
              userCanAddPricingTypes = this.get('userCanAddPricingTypes'),
              returnList = Ember['default'].Object.create({
                  value: [],
                  userCanAdd: userCanAddPricingTypes
              });        
          if (!Ember['default'].isEmpty(pricingList)) {
              returnList.set('value', pricingList.filterBy('type', pricingTypeForObjectType));
          }
          return returnList;
      }.property('pricingList','pricingTypeForObjectType','pricingTypeValues'),

      organizeByType: Ember['default'].computed.alias('pricingTypes.organizeByType'),
          
      pricingTypeList: function() {
          var pricingTypeValues = this.get('pricingTypeValues'),
              pricingTypeForObjectType = this.get('pricingTypeForObjectType');
          pricingTypeValues = pricingTypeValues.filter(function(pricingType) {
              return pricingType !== pricingTypeForObjectType;
          });
          pricingTypeValues = pricingTypeValues.sortBy('name');
          return pricingTypeValues;
      }.property('pricingTypeValues','pricingTypeForObjectType'),
      
      pricingTypeValues: Ember['default'].computed.alias('pricingTypes.value'),
      
      /**
       * Create multiple new request records from the pricing records passed in.  This function 
       * will also add those new records to the specified visit.
       * @param {array} pricingRecords the list of pricing records to use to create request records from.
       * @param {string} pricingField the name of the field on the request record to set the pricing record on.
       * @param {string} visitChildName the name of the child object on the visit to add to.
       * @param {string} newVisitType if a new visit needs to be created, what type of visit
       * should be created. 
       */
      createMultipleRequests: function(pricingRecords, pricingField, visitChildName, newVisitType) {
          var addPromises = [],
              attributesToSave = {},        
              baseModel = this.get('model'),
              modelToSave,
              patient = this.get('patient'),
              visit = this.get('visit');
          
          if (Ember['default'].isEmpty(visit)) {
              visit = this.createNewVisit(newVisitType);
          }
          baseModel.eachAttribute(function(name) {
              attributesToSave[name] = baseModel.get(name);
          });
          
          pricingRecords.forEach(function(pricingRecord) {
              modelToSave = this.store.createRecord(newVisitType.toLowerCase(), attributesToSave); 
              modelToSave.set(pricingField, pricingRecord);
              modelToSave.set('patient', patient);
              modelToSave.set('visit', visit);
              addPromises.push(this.addChildToVisit(modelToSave, visitChildName, newVisitType));
          }.bind(this));
          
          Ember['default'].RSVP.all(addPromises).then(function(results) {
              var savePromises = [];
              results.forEach(function(newObject) {
                  console.log("Results are:", newObject);
                  savePromises.push(newObject.save());
              });
              Ember['default'].RSVP.all(savePromises).then(function(saveResponse) {
                  this.set('visit', visit); //Make sure the visit is properly set for saving
                  this.afterUpdate(saveResponse, true);
              }.bind(this));
          }.bind(this));
      },
      
      saveNewPricing: function(pricingName, pricingCategory, priceObjectToSet) {
          return new Ember['default'].RSVP.Promise(function(resolve, reject) {
              var newPricing,
                  pricingTypeForObjectType = this.get('pricingTypeForObjectType');
              newPricing = this.store.createRecord('pricing', {
                  name: pricingName,
                  category: pricingCategory,
                  type: pricingTypeForObjectType
              });
              newPricing.save().then(function() {
                  this.get('pricingList').addObject({
                      _id: 'pricing_'+ newPricing.get('id'),
                      name: newPricing.get('name')
                  });
                  this.set(priceObjectToSet, newPricing);
                  resolve();
              }.bind(this), reject);
          }.bind(this), 'saveNewPricing for: '+pricingName);        
      },
         
      getSelectedPricing: function(selectedField) {
          var selectedItem = this.get(selectedField); 
          if (!Ember['default'].isEmpty(selectedItem)) {
              return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                  if (Ember['default'].isArray(selectedItem)) {
                      var pricingIds = selectedItem.map(function(pricingItem) {
                          return pricingItem._id.substr(8);
                      });
                      this.store.findByIds('pricing', pricingIds).then(resolve, reject);
                  } else {
                      this.store.find('pricing', selectedItem._id.substr(8)).then(resolve, reject);
                  }
              }.bind(this));
          } else {
             return Ember['default'].RSVP.resolve();
          }
      },
    
      showAddCharge: function() {
          var canAddCharge = this.get('canAddCharge'), 
              organizeByType = this.get('organizeByType');
          if (canAddCharge) {
              return !organizeByType;
          } else {
              return false;
          }
      }.property('canAddCharge', 'organizeByType'),
      
      showEditCharges: function() {
          var canAddCharge = this.get('canAddCharge'), 
              organizeByType = this.get('organizeByType');
          if (canAddCharge) {
              return organizeByType;
          } else {
              return false;
          }
      }.property('canAddCharge', 'organizeByType'),

      showPricingTypeTabs: function() {
          var pricingTypeList = this.get('pricingTypeList');
          return (!Ember['default'].isEmpty(pricingTypeList) && pricingTypeList.get('length') > 1);
      }.property('pricingTypeList'),
      
      userCanAddPricingTypes: Ember['default'].computed.alias('pricingTypes.userCanAdd'),
      
      /**
       * When using organizeByType charges need to be mapped over from the price lists
       */
      updateCharges: function() {
          var charges = this.get('charges'),
              organizeByType = this.get('organizeByType'),
              pricingList = this.get('pricingList');
          
          if (!organizeByType) {
              return Ember['default'].RSVP.resolve();
          }
          return new Ember['default'].RSVP.Promise(function(resolve, reject) {
              var chargePromises = [];
              pricingList.forEach(function(pricingItem) {
                  var currentCharge = this.findChargeForPricingItem(pricingItem),
                      quantityCharged = this.get(pricingItem._id);
                  if (Ember['default'].isEmpty(quantityCharged)) {
                      if (currentCharge) {
                          //Remove existing charge because quantity is blank
                          charges.removeObject(currentCharge);
                          chargePromises.push(currentCharge.destroyRecord());
                      }
                  } else {
                      if (currentCharge) {
                          if (currentCharge.get('quantity') !== quantityCharged) {
                              currentCharge.set('quantity', quantityCharged);
                              chargePromises.push(currentCharge.save());
                          }                        
                      } else {
                          chargePromises.push(this._createNewChargeRecord(quantityCharged, pricingItem._id));
                      }
                  }                
              }.bind(this));
              Ember['default'].RSVP.all(chargePromises, 'Charges updated for current record:'+this.get('id')).then(resolve,reject);
          }.bind(this), 'updateCharges for current record:'+this.get('id'));
      }
  });

});
define('hospitalrun/mixins/charge-route', ['exports', 'ember', 'hospitalrun/mixins/pouchdb'], function (exports, Ember, PouchDbMixin) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create(PouchDbMixin['default'], {
        actions: {
            deleteCharge: function(model) {
                this.controller.send('deleteCharge', model);
            }
        },
            
        setupController: function(controller, model) {
            this._super(controller, model);
            var maxValue = this.get('maxValue'),
                pricingCategory = this.get('pricingCategory'),
                pricingQuery = {
                    startkey:  [pricingCategory,null,null,'pricing_'],
                    endkey: [pricingCategory,{},{},'pricing_'+maxValue],
                    include_docs: true,
                };        
            this.controllerFor('pouchdb').queryMainDB(pricingQuery, 'pricing_by_category').then(function(result) {
                var pricingList = result.rows.map(function(item) {
                    return item.doc;
                });
                controller.set('pricingList', pricingList);
            });
        }
    });

});
define('hospitalrun/mixins/date-format', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        _dateFormat: function(value, dateFormat) {
            if (Ember['default'].isEmpty(dateFormat)) {
                dateFormat = 'l';
            }
            if (!Ember['default'].isEmpty(value)) { 
                return moment(value).format(dateFormat); 
            }
        },
        
        dateToTime: function(date) {
            if (!Ember['default'].isEmpty(date) && date.getTime) {
                return date.getTime();             
            }
        }
    });

});
define('hospitalrun/mixins/dob-days', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        convertDOBToText: function(birthDate, shortFormat, omitDays) {            
            var today = new Date(),
                years = 0,
                months = 0,
                days = 0;
            
            if (birthDate) {
                if (birthDate.getFullYear === undefined) {
                    birthDate = moment(birthDate, 'l').toDate();
                }            
                if (birthDate.getFullYear !== undefined) {
                    years=today.getFullYear()-birthDate.getFullYear();
                    if (today.getMonth()< birthDate.getMonth() || 
                        (today.getMonth()===birthDate.getMonth() && 
                        today.getDate()<birthDate.getDate())) {
                        years--;
                    }
                }

                if (birthDate.getMonth) {
                    months=today.getMonth()-birthDate.getMonth();
                    days=today.getDate()-birthDate.getDate();
                    if (months <= 0) {
                        if (days < 0) {
                            months += 11;
                        } else if (months < 0) {
                            months += 12;
                        }
                    } else {
                        if (days < 0) {
                            months = months -1;
                        }
                    }
                }

                if (birthDate.getDate) {
                    days=today.getDate()-birthDate.getDate();
                    if (days < 0) {
                        days += 30;
                    }
                }
            }

            var formatString = "";
            if (shortFormat) {
                if (years > 0) {
                    formatString = years+"y %@1m %@2d";
                } else {
                    formatString = "%@1m %@2d";
                }                
            } else if (omitDays) {
                if (years > 1) {
                    formatString = years+" years %@1 months";
                } else if (years === 1) {
                    formatString = years+" year %@1 months";
                } else {
                    formatString = "%@1 months";
                }
            } else {
                if (years > 1) {
                    formatString = years+" years %@1 months %@2 days";
                } else if (years === 1) {
                    formatString = years+" year %@1 months %@2 days";
                } else {
                    formatString = "%@1 months %@2 days";
                }
            }
            return formatString.fmt(months, days);

        }
    });

});
define('hospitalrun/mixins/fulfill-request', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        actions: {
            doneFulfillRequest: function() {
                //Placeholder function; override if you need to know when fulfillrequest is complete.    
            },
            
            fulfillRequest: function(request, closeModal, increment, skipTransition) {
                this.performFulfillRequest(request, closeModal, increment, skipTransition);
            }
        },
        
        performFulfillRequest: function(request, closeModal, increment, skipTransition) {
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                var markAsConsumed = request.get('markAsConsumed'),
                    transactionType = request.get('transactionType');
                if (transactionType === 'Request') {
                    transactionType = null; //reset the transaction type so that it gets set below.
                }
                request.get('inventoryItem').then(function(inventoryItem) {
                    if (markAsConsumed) {
                        request.set('adjustPurchases', true);
                        if (Ember['default'].isEmpty(transactionType)) {
                            request.set('transactionType', 'Fulfillment');
                        }
                        this._performFulfillment(request, inventoryItem, increment).then(function() {
                            this._finishFulfillRequest(request, inventoryItem, closeModal, increment, skipTransition);
                            resolve();
                        }.bind(this), reject);
                    } else {
                        request.set('adjustPurchases', false);
                        if (Ember['default'].isEmpty(transactionType)) {
                            request.set('transactionType', 'Transfer');
                        }
                        this._finishFulfillRequest(request, inventoryItem, closeModal, increment, skipTransition);
                        resolve();
                    }
                }.bind(this), reject);
            }.bind(this));
        },
        
        /**
         * @private
         */
        _findQuantity: function(request, purchases, item, increment) {
            var currentQuantity,
                costPerUnit,
                requestPurchases = [],
                quantityOnHand = item.get('quantity'),
                quantityRequested = parseInt(request.get('quantity')),
                quantityNeeded = quantityRequested,
                purchaseInfo = [],
                totalCost = 0;
            
            var foundQuantity = purchases.any(function(purchase) {
                currentQuantity = purchase.get('currentQuantity');
                if (purchase.get('expired') || currentQuantity <= 0) {
                    return false;
                }
                costPerUnit = purchase.get('costPerUnit');
                if (increment) {
                    purchase.incrementProperty('currentQuantity', quantityRequested);
                    totalCost += (costPerUnit * quantityNeeded);
                    purchaseInfo.push({
                        id: purchase.get('id'),
                        quantity: quantityRequested
                    });
                    requestPurchases.addObject(purchase);
                    return true;
                } else {
                    if (quantityNeeded > currentQuantity) {
                        totalCost += (costPerUnit * currentQuantity);
                        quantityNeeded = quantityNeeded - currentQuantity;
                        purchaseInfo.push({
                            id: purchase.get('id'),
                            quantity: parseInt(currentQuantity)
                        });
                        currentQuantity = 0;

                    } else {
                        totalCost += (costPerUnit * quantityNeeded);
                        currentQuantity = currentQuantity - quantityNeeded;
                        purchaseInfo.push({
                            id: purchase.get('id'),
                            quantity: parseInt(quantityNeeded)
                        });
                        quantityNeeded = 0;
                    }
                    purchase.set('currentQuantity',currentQuantity);
                    requestPurchases.addObject(purchase);
                    return (quantityNeeded === 0);
                }
            });
            if (!foundQuantity) {
                return 'Could not find any purchases that had the required quantity:'+quantityRequested;
            }
            request.set('costPerUnit', (totalCost/quantityRequested).toFixed(2));
            request.set('quantityAtCompletion', quantityOnHand);
            request.set('purchasesAffected', purchaseInfo);
            request.set('purchases', requestPurchases); //Not saved permanently, just set here so that purchases get saved later.
            item.updateQuantity();
            return true;
        },

        /**
         * @private
         * Finish the fulfillment request.
         * @param {object} request the request to fulfill.
         * @param {object} inventoryItem the inventoryItem that should be used for fulfillment.
         * @param {boolean} closeModal if the modal should be closed.
         * @param {boolean} increment if the request should increment, not decrement
         * @param {boolean} skipTransition if the transition should not run after fulfillment.
         */
        _finishFulfillRequest: function(request, inventoryItem, closeModal, increment, skipTransition) {
            var inventoryLocations = request.get('inventoryLocations'),
                locationsAffected = [],
                markAsConsumed = request.get('markAsConsumed'),
                promises = [],
                quantity = parseInt(request.get('quantity')),
                requestPurchases = request.get('purchases');
            if (increment) {
                var locationToIncrement = inventoryLocations.get('firstObject');
                locationToIncrement.incrementProperty('quantity', quantity);
                promises.push(locationToIncrement.save());
                locationsAffected.push({
                    name: locationToIncrement.get('locationName'),
                    quantity: quantity
                });
            } else {
                inventoryLocations.reduce(function(quantityNeeded, location) {
                    var deliveryLocation = request.get('deliveryLocation'),
                        deliveryAisle = request.get('deliveryAisle'),
                        locationQuantity = parseInt(location.get('quantity'));                
                    if (quantityNeeded > 0) {
                        if (!markAsConsumed) {
                            location.set('transferAisleLocation', deliveryAisle);
                            location.set('transferLocation', deliveryLocation);                        
                        }
                        if (locationQuantity >= quantityNeeded) {
                            if (markAsConsumed) {
                                location.decrementProperty('quantity', quantityNeeded);                                
                                promises.push(location.save());
                            } else {
                                location.set('adjustmentQuantity', quantityNeeded);
                                this.transferToLocation(inventoryItem, location);                            
                            }
                            locationsAffected.push({
                                name: location.get('locationName'),
                                quantity: quantityNeeded
                            });
                            return 0;
                        } else {                                
                            if (markAsConsumed) {                            
                                location.decrementProperty('quantity', locationQuantity);                                
                                promises.push(location.save());
                            } else {
                                location.set('adjustmentQuantity', locationQuantity);
                                this.transferToLocation(inventoryItem, location);                            
                            }
                            locationsAffected.push({
                                name: location.get('locationName'),
                                quantity: locationQuantity
                            });                            
                            return (quantityNeeded - locationQuantity);
                        }
                    }                
                }.bind(this), quantity);
            }
            request.set('locationsAffected', locationsAffected);
            if (markAsConsumed) {        
                requestPurchases.forEach(function(purchase) {
                    promises.push(purchase.save());
                });
            }
            promises.push(inventoryItem.save());
            request.set('status','Completed');
            request.set('completedBy', request.getUserName());
            promises.push(request.save());
            Ember['default'].RSVP.all(promises,'All saving done for inventory fulfillment').then(function(){
                this.send('doneFulfillRequest');
                if (closeModal) {
                    this.send('closeModal');
                }
                if (!skipTransition) {
                    this.transitionTo('inventory.request');
                }
            }.bind(this));
        },
        
        /**
         * @private
         * Fulfill the request, decrementing from the purchases available on the inventory item
         * This function doesn't save anything, it just updates the objects in memory, so 
         * a route will need to ensure that the models affected here get updated.
         * @param {object} request the request to fulfill.
         * @param {object} inventoryItem the inventoryItem that should be used for fulfillment.
         * @param {boolean} increment if the request should increment, not decrement
         * @returns true if the request is fulfilled; false if it cannot be fulfilled due to a lack
         * of stock.
         */
        _performFulfillment: function(request, inventoryItem, increment) {
            return new Ember['default'].RSVP.Promise(function(resolve, reject){
                var purchases = inventoryItem.get('purchases'),
                    quantityOnHand = inventoryItem.get('quantity'),
                    quantityRequested = request.get('quantity');
                if (increment || (quantityOnHand >= quantityRequested)) {
                    var findResult = this._findQuantity(request, purchases, inventoryItem, increment);
                    if (findResult === true) {
                        resolve();
                    } else {
                        reject(findResult);
                    }
                } else {
                    reject('The quantity on hand, %@ is less than the requested quantity of %@.'.fmt(quantityOnHand,quantityRequested));
                }
            }.bind(this));
        }

    });

});
define('hospitalrun/mixins/gender-list', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        genderList: [{
            label: "Male",
            value: "M"
        }, {
            label: "Female",
            value: "F"        
        }]
    });

});
define('hospitalrun/mixins/imaging-pricing-types', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        defaultImagingPricingTypes: [
            'Imaging Procedure'
        ]
    });

});
define('hospitalrun/mixins/inventory-adjustment-types', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        adjustmentTypes: [{
            name: 'Add',
            type: 'Adjustment (Add)'
        }, {
            name: 'Remove',
            type: 'Adjustment (Remove)'
        }, {
            name: 'Return To Vendor',
            type: 'Return To Vendor'
        }, {
            name: 'Return',
            type: 'Return'
        }, {
            name: 'Write Off',
            type: 'Write Off'
        }]
    });

});
define('hospitalrun/mixins/inventory-id', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        /**
         * Calculate a new id based on time stamp and randomized number
         * @return a generated id in base 36 so that its a shorter barcode.
         */
        generateId: function() {        
            var min = 1,
                max = 999,
                part1 = new Date().getTime(),
                part2 = Math.floor(Math.random() * (max - min + 1)) + min;
            return Ember['default'].RSVP.resolve(part1.toString(36) +'_' + part2.toString(36));
        }
    });

});
define('hospitalrun/mixins/inventory-locations', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        aisleToFind: null,
        locationToFind: null,
        
        _addQuantityToLocation: function(inventoryItem, quantity, location, aisle) {        
            var foundLocation = this._findOrCreateLocation(inventoryItem, location, aisle);
            foundLocation.incrementProperty('quantity', quantity);
            foundLocation.save();
        },
        
        _findOrCreateLocation: function(inventoryItem, location, aisle) {
            var foundLocation = false,
                locations = inventoryItem.get('locations');
            this.set('aisleToFind', aisle);
            this.set('locationToFind', location);
            
            foundLocation = locations.find(this.findLocation, this);
            if (foundLocation) {
                return foundLocation;
            } else {
                var locationRecord = this.get('store').createRecord('inv-location', {
                    aisleLocation: aisle,
                    location: location,
                    quantity: 0,
                });
                locations.addObject(locationRecord);
                return locationRecord;
            }         
        },
        
        findLocation: function(inventoryLocation) {
            var aisleLocation = inventoryLocation.get('aisleLocation'),
                aisleToFind = this.get('aisleToFind'),
                itemLocation = inventoryLocation.get('location'),
                locationToFind = this.get('locationToFind');
            if ((Ember['default'].isEmpty(aisleLocation) && Ember['default'].isEmpty(aisleToFind) || aisleLocation === aisleToFind) && 
                    (Ember['default'].isEmpty(itemLocation) && Ember['default'].isEmpty(locationToFind) || itemLocation === locationToFind)) {            
                return true;
            }
        },
        
        /**
         * Process a new purchase, updating the corresponding location
         * with the number of items available
         */
        newPurchaseAdded: function(inventoryItem, newPurchase) {
            var aisle = newPurchase.get('aisleLocation'),
                location = newPurchase.get('location'),
                quantity = parseInt(newPurchase.get('originalQuantity'));
            this._addQuantityToLocation(inventoryItem, quantity, location, aisle);
        },
        
        /**
         * Save the location if the quantity is greater than zero, otherwise remove the empty location.
         * @param {Object} location the location to update or remove.
         * @param {Object} inventoryItem the inventory item the location belongs to. 
         * @return {Promise} promise for save or remove
         */
        saveLocation: function(location, inventoryItem) {
            if (location.get('quantity') === 0) {
                var locations = inventoryItem.get('locations');
                locations.removeObject(location);
                return location.destroyRecord();
            } else {
                return location.save();
            }        
        },        
        
        /**
         * Transfer items from the current location to the specified location.
         * @param {Object} inventoryItem the inventory item that items are being transferred from
         * @param {Object} transferLocation the inventory location to transfer from (also includes
         * attributes about where to transfer to.
         */
        transferToLocation: function(inventoryItem, transferLocation) {
            var aisle = transferLocation.get('transferAisleLocation'),
                location = transferLocation.get('transferLocation'),
                quantity = parseInt(transferLocation.get('adjustmentQuantity'));
            this._addQuantityToLocation(inventoryItem, quantity, location, aisle);
            transferLocation.decrementProperty('quantity', quantity);
            transferLocation.save();
        }
    });

});
define('hospitalrun/mixins/inventory-selection', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        /**
         * For use with the inventory-type ahead.  When an inventory item is selected, resolve the selected
         * inventory item into an actual model object and set is as inventoryItem.
         */ 
        inventoryItemChanged: function() {
            var selectedInventoryItem = this.get('selectedInventoryItem');
            if (!Ember['default'].isEmpty(selectedInventoryItem)) {
                selectedInventoryItem.id = selectedInventoryItem._id.substr(10);
                this.store.find('inventory', selectedInventoryItem._id.substr(10)).then(function(item) {
                    item.reload().then(function() {
                        this.set('inventoryItem', item);
                        Ember['default'].run.once(this, function(){
                            this.get('model').validate();
                        });
                    }.bind(this), function(err) {
                        console.log("ERROR reloading inventory item", err);
                    });
                }.bind(this));
            }
        }.observes('selectedInventoryItem'),
    });

});
define('hospitalrun/mixins/inventory-type-list', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        defaultInventoryTypes: [        
            'Medication',
            'Supply'
        ],
        
        inventoryTypes: function() {
            var defaultInventoryTypes = this.get('defaultInventoryTypes'),
                inventoryTypeList = this.get('inventoryTypeList');
            if (Ember['default'].isEmpty(inventoryTypeList)) {
                return defaultInventoryTypes;
            } else {
                return inventoryTypeList;
            }
        }.property('inventoryTypeList', 'defaultInventoryTypes')
    });

});
define('hospitalrun/mixins/is-update-disabled', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        isUpdateDisabled: function() {
            if (!Ember['default'].isNone(this.get('isValid'))) {
                return !this.get('isValid');
            } else {
                return false;
            }
        }.property('isValid')
    });

});
define('hospitalrun/mixins/lab-pricing-types', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        defaultLabPricingTypes: [
            'Lab Procedure'
        ]
    });

});
define('hospitalrun/mixins/location-name', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        getDisplayLocationName: function(location, aisleLocation) {
            var locationName = this.formatLocationName(location, aisleLocation);
            if (Ember['default'].isEmpty(locationName)) {
                locationName = 'No Location';
            }
            return locationName;        
        },

        formatLocationName: function(location, aisleLocation) {
            var locationName = '';
            if (!Ember['default'].isEmpty(location)) {
                locationName += location;
                if (!Ember['default'].isEmpty(aisleLocation)) {
                    locationName += " : ";
                }
            }
            if (!Ember['default'].isEmpty(aisleLocation)) {
                locationName += aisleLocation;
            }
            return locationName;
        },        
        
        locationName: function() {        
            var aisleLocation =  this.get('aisleLocation'),
                location = this.get('location');
            return this.getDisplayLocationName(location, aisleLocation);
        }.property('location', 'aisleLocation'),
    });

});
define('hospitalrun/mixins/modal-helper', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        /**
         * Display a message in a closable modal.
         * @param title string containing the title to display.
         * @param message string containing the message to display.
         */
        displayAlert: function(title, message, okAction) {
            this.send('openModal', 'dialog', Ember['default'].Object.create({
                title: title,
                message: message,
                okAction: okAction,
                hideCancelButton: true,
                updateButtonAction: 'ok',
                updateButtonText: 'Ok'
            }));        
        },
        
        displayConfirm: function(title, message, confirmAction, model)  {
            if (Ember['default'].isEmpty(model)) {
                model = Ember['default'].Object.create();
            }
            model.set('confirmAction', confirmAction);
            model.set('title', title);
            model.set('message', message);
            model.set('updateButtonAction', 'confirm');
            model.set('updateButtonText', 'Ok');            
            this.send('openModal', 'dialog', model);
        }
    });

});
define('hospitalrun/mixins/navigation', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        navItems: [
            {
                title: 'Inventory',
                iconClass: 'octicon-package',
                route: 'inventory',
                capability: 'inventory',
                subnav: [
                    {
                        title: 'Requests',
                        iconClass: 'octicon-chevron-right',
                        route: 'inventory.index',
                        capability: 'add_inventory_request'                    
                    },
                    {
                        title: 'Items',
                        iconClass: 'octicon-chevron-right',
                        route: 'inventory.listing',
                        capability: 'inventory'                    
                    },
                    {
                        title: 'Inventory Received',
                        iconClass: 'octicon-plus',
                        route: 'inventory.batch',
                        subroute: 'new',
                        capability: 'add_inventory_item'                    
                    },
                    {
                        title: 'Reports',
                        iconClass: 'octicon-chevron-right',
                        route: 'inventory.reports',
                        capability: 'inventory'                    
                    }
                ]
            },
            {
                title: 'Patients',
                iconClass: 'octicon-organization',
                route: 'patients',
                capability: 'patients',
                subnav: [
                    {
                        title: 'Patient Listing',
                        iconClass: 'octicon-chevron-right',
                        route: 'patients',
                        capability: 'patients'                    
                    },
                    {
                        title: 'New Patient',
                        iconClass: 'octicon-plus',
                        route: 'patients.edit',
                        subroute: 'new',
                        capability: 'add_patient'                    
                    },
                    {
                        title: 'Reports',
                        iconClass: 'octicon-chevron-right',
                        route: 'patients.reports',
                        capability: 'patients'                    
                    }
                ]
            },
            {
                title: 'Appointments',
                iconClass: 'octicon-calendar',
                route: 'appointments.index',
                capability: 'appointments',
                subnav: [
                    {
                        title: 'This Week',
                        iconClass: 'octicon-chevron-right',
                        route: 'appointments.index',
                        capability: 'appointments'                    
                    },
                    {
                        title: 'Today',
                        iconClass: 'octicon-chevron-right',
                        route: 'appointments.today',
                        capability: 'appointments'                    
                    },
                    {
                        title: 'Search',
                        iconClass: 'octicon-search',
                        route: 'appointments.search',
                        capability: 'appointments'                    
                    },
                    {
                        title: 'Add Appointment',
                        iconClass: 'octicon-plus',
                        route: 'appointments.edit',
                        subroute: 'new',
                        capability: 'add_appointment'                    
                    }
                ]
            },
            {
                title: 'Imaging',
                iconClass: 'octicon-device-camera',
                route: 'imaging.index',
                capability: 'imaging',
                subnav: [
                    {
                        title: 'Requests',
                        iconClass: 'octicon-chevron-right',
                        route: 'imaging.index',
                        capability: 'imaging'                    
                    },
                    {
                        title: 'Completed',
                        iconClass: 'octicon-chevron-right',
                        route: 'imaging.completed',
                        capability: 'imaging'                    
                    },
                    {
                        title: 'New Request',
                        iconClass: 'octicon-plus',
                        route: 'imaging.edit',
                        subroute: 'new',
                        capability: 'add_imaging'                    
                    }
                ]
            },
            {
                title: 'Medication',
                iconClass: 'octicon-file-text',
                route: 'medication.index',
                capability: 'medication',
                subnav: [
                    {
                        title: 'Requests',
                        iconClass: 'octicon-chevron-right',
                        route: 'medication.index',
                        capability: 'medication'                    
                    },
                    {
                        title: 'Completed',
                        iconClass: 'octicon-chevron-right',
                        route: 'medication.completed',
                        capability: 'medication'                    
                    },
                    {
                        title: 'New Request',
                        iconClass: 'octicon-plus',
                        route: 'medication.edit',
                        subroute: 'new',
                        capability: 'add_medication'                    
                    },
                    {
                        title: 'Dispense',
                        iconClass: 'octicon-checklist',
                        route: 'medication.edit',
                        subroute: 'dispense',
                        capability: 'fulfill_medication'                    
                    },                
                    {
                        title: 'Return Medication',
                        iconClass: 'octicon-mail-reply',
                        route: 'medication.return',
                        subroute: 'new',
                        capability: 'add_medication'                    
                    }
                ]
            },
            {
                title: 'Labs',
                iconClass: 'octicon-microscope',
                route: 'labs.index',
                capability: 'labs',
                subnav: [
                    {
                        title: 'Requests',
                        iconClass: 'octicon-chevron-right',
                        route: 'labs.index',
                        capability: 'labs'                    
                    },
                    {
                        title: 'Completed',
                        iconClass: 'octicon-chevron-right',
                        route: 'labs.completed',
                        capability: 'labs'                    
                    },
                    {
                        title: 'New Request',
                        iconClass: 'octicon-plus',
                        route: 'labs.edit',
                        subroute: 'new',
                        capability: 'add_lab'                    
                    }
                ]
            },
            {
                title: 'Billing',
                iconClass: 'octicon-credit-card',
                route: 'invoices.index',
                capability: 'invoices',
                subnav: [
                    {
                        title: 'Invoices',
                        iconClass: 'octicon-chevron-right',
                        route: 'invoices.index',
                        capability: 'invoices'                    
                    },
                    {
                        title: 'New Invoice',
                        iconClass: 'octicon-plus',
                        route: 'invoices.edit',
                        subroute: 'new',
                        capability: 'invoices'                    
                    },
                    {
                        title: 'Prices',
                        iconClass: 'octicon-chevron-right',
                        route: 'pricing.index',
                        capability: 'invoices'                    
                    },
                    {
                        title: 'Price Profiles',
                        iconClass: 'octicon-chevron-right',
                        route: 'pricing.profiles',
                        capability: 'invoices'                    
                    }
                ]
            },
            {
                title: 'Administration',
                iconClass: 'octicon-person',
                route: 'admin.lookup',
                capability: 'admin',
                subnav: [
                    {
                        title: 'Lookup Lists',
                        iconClass: 'octicon-chevron-right',
                        route: 'admin.lookup',
                        capability: 'update_config'                    
                    },
                    {
                        title: 'Address Fields',
                        iconClass: 'octicon-chevron-right',
                        route: 'admin.address',
                        capability: 'update_config'                    
                    },
                    {
                        title: 'Users',
                        iconClass: 'octicon-chevron-right',
                        route: 'users',
                        capability: 'users'                    
                    },
                    {
                        title: 'New User',
                        iconClass: 'octicon-plus',
                        route: 'users.edit',
                        subroute: 'new',
                        capability: 'add_user'                    
                    }
                ]
            }
        ]
    });

});
define('hospitalrun/mixins/number-format', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        
        /**
         * Given an array and property, total all of the property values in the array and return the value.
         * @param array Array|String either the actual array or the property name of the array on this object.
         * @param propertyName String the property name in the array values to total.
         * @param number that contains at most two decimal places.
         */ 
        _calculateTotal: function(array, propertyName) {
            var arrayItems, 
                total = 0 ;
            if (Ember['default'].isArray(array)) {
                arrayItems = array; 
            } else {
                arrayItems = this.get(array);
            }        
            total = arrayItems.reduce(function(previousValue, lineItem) {
                return previousValue += this._getValidNumber(Ember['default'].get(lineItem, propertyName));
            }.bind(this),0);
            return this._numberFormat(total,true);
        },
        
        /**
         * Determine if number passed in is actually a number.  If it is, return the number; otherwise return 0.
         * @param number the number to valdiate.
         * @returns number a valid number.
         */
        _getValidNumber: function(number) {
            if (Ember['default'].isEmpty(number) || isNaN(number)) {
                return 0;
            } else {            
                return Number(number);
            }
        },
        
        /**
         * Return a formatted number with a maximum of two digits
         * @param value number to format
         * @param returnAsNumber boolean to denote if formatted number should be returned
         * as a number instead of a string
         * @returns String|Number a formatted String or number containing the formatted number.
         */
        _numberFormat: function(value, returnAsNumber) {
            var returnValue;
            if (!Ember['default'].isEmpty(value)) {
                if (isNaN(value)) {
                    return;
                }
                if (Math.round(value) === value) {
                    returnValue = Number(value).toString();
                } else {
                    returnValue = Number(value).toFixed(2);
                }
                if (returnAsNumber) {
                    return Number(returnValue);
                } else {
                    return returnValue.replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");
                }
            }
        },
        
        _validNumber: function(number) {
            return (!Ember['default'].isEmpty(number) && !isNaN(number) && number > 0);
        },

    });

});
define('hospitalrun/mixins/patient-diagnosis', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({

        _addDiagnosisToList: function(diagnosis, diagnosesList, visit) {
            if (!Ember['default'].isEmpty(diagnosis)) {            
                if (Ember['default'].isEmpty(diagnosesList.findBy('description', diagnosis))) {
                    diagnosesList.addObject({
                        date: visit.get('startDate'),
                        description: diagnosis
                    });
                }
            }
        },    
        
        getPrimaryDiagnoses: function(visits) {
            var diagnosesList = [];
            if (!Ember['default'].isEmpty(visits)) {
                visits.forEach(function(visit) {
                    this._addDiagnosisToList(visit.get('primaryDiagnosis'), diagnosesList, visit);
                    this._addDiagnosisToList(visit.get('primaryBillingDiagnosis'), diagnosesList, visit);
                }.bind(this));
            }
            var firstDiagnosis = diagnosesList.get('firstObject');
            if (!Ember['default'].isEmpty(firstDiagnosis)) {
                firstDiagnosis.first = true;
            }
            return diagnosesList;
        },
        
        getSecondaryDiagnoses: function(visits) {
            var diagnosesList = [];
            if (!Ember['default'].isEmpty(visits)) {
                visits.forEach(function(visit) {                
                    if (!Ember['default'].isEmpty(visit.get('additionalDiagnoses'))) {
                        diagnosesList.addObjects(visit.get('additionalDiagnoses'));
                    }
                });
            }
            
            var firstDiagnosis = diagnosesList.get('firstObject');
            if (!Ember['default'].isEmpty(firstDiagnosis)) {
                firstDiagnosis.first = true;
            }
            return diagnosesList;
        },
        
    });

});
define('hospitalrun/mixins/patient-id', ['exports', 'ember', 'hospitalrun/mixins/pouchdb'], function (exports, Ember, PouchDbMixin) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create(PouchDbMixin['default'], {
        idPrefix: null,
        
        _createId: function(patientSequence) {
            var idPrefix = this.get('idPrefix'),
                newId;
            if (patientSequence < 100000) {
                newId = idPrefix + String('00000' + patientSequence).slice(-5);
            } else {
                newId = String(idPrefix + patientSequence);
            }
            return newId;
        },
        
        _findUnusedId: function(patientSequenceRecord, resolve, reject) {
            var patientSequence = patientSequenceRecord.incrementProperty('value'),
                maxValue = this.get('maxValue'),
                newId = this._createId(patientSequence),
                queryParams = {
                    startkey: [newId,null],
                    endkey: [newId, maxValue],    
                },
                pouchdbController = this._getPouchDBController();
            pouchdbController.queryMainDB(queryParams, 'patient_by_display_id').then(function(foundRecord) {
                if (!Ember['default'].isEmpty(foundRecord.rows)) {
                    this._findUnusedId(patientSequenceRecord, resolve, reject);
                } else {
                    patientSequenceRecord.set('value', patientSequence);
                    patientSequenceRecord.save().then(function() {
                        resolve(newId);
                    }, reject);
                }
            }.bind(this), reject);
        },
        
        /**
         * Since this mixin is used by both routes and controllers, try to get the pouchdb controller from the controllers property; 
         * otherwise use controllerFor.
         */ 
        _getPouchDBController: function() {
            var pouchDBController = this.get('controllers.pouchdb');
            if (Ember['default'].isEmpty(pouchDBController)) {
                pouchDBController =  this.controllerFor('pouchdb');
            }
            return pouchDBController;
        },
        
        /**
         * Override this function to generate an id for a new record
         * @return a generated id;default is null which means that an
         * id will be automatically generated via Ember data.
         */
        generateFriendlyId: function(configs) {
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                var idPrefix = 'P',
                    idPrefixRecord;
                if (Ember['default'].isEmpty(configs)) {
                     configs = this.modelFor('application');
                }
                 idPrefixRecord = configs.findBy('id','patient_id_prefix');
                if (!Ember['default'].isEmpty(idPrefixRecord)) {
                    idPrefix = idPrefixRecord.get('value');
                }
                this.set('idPrefix', idPrefix);
                
                this.store.find('sequence', 'patient').then(function(sequence) {
                    this._findUnusedId(sequence, resolve, reject);
                }.bind(this), function() {
                    var newSequence = this.get('store').push('sequence',{
                        id: 'patient',
                        value: 0
                    });
                    this._findUnusedId(newSequence, resolve, reject);
                }.bind(this));
            }.bind(this));
        }
    });

});
define('hospitalrun/mixins/patient-list-route', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        /**
         * Lazily load patient list so that it doesn't impact performance.
         */    
        _fetchPatientList: function(controller) {
            var patientQuery = {
                startkey:  'patient_',
                endkey: 'patient_\uffff',
                include_docs: true,
            };
            this.controllerFor('pouchdb').queryMainDB(patientQuery).then(function(result) {
                controller.set('patientList', result.rows);
            });
        },
        
        setupController: function(controller, model) {
            this._super(controller, model);
            this._fetchPatientList(controller);
        }
    });

});
define('hospitalrun/mixins/patient-name', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        getPatientDisplayId: function(patient) {
            var externalPatientId = Ember['default'].get(patient, 'externalPatientId'),
                friendlyId = Ember['default'].get(patient, 'friendlyId'),
                id = Ember['default'].get(patient, 'id');
            if (!Ember['default'].isEmpty(friendlyId)) {
                return friendlyId;
            } else if (!Ember['default'].isEmpty(externalPatientId)) {
                return externalPatientId;
            } else {
                return id;
            }
        },
        
        getPatientDisplayName: function(patient) {
            var firstName = Ember['default'].get(patient, 'firstName'),
                lastName = Ember['default'].get(patient, 'lastName'),
                middleName = Ember['default'].get(patient, 'middleName'),
                nameArray = [];
            if (!Ember['default'].isEmpty(firstName)) {
                nameArray.push(firstName);
            }
            if (!Ember['default'].isEmpty(middleName)) {
                nameArray.push(middleName);
            }
            if (!Ember['default'].isEmpty(lastName)) {
                nameArray.push(lastName);
            }        
            return nameArray.join(' ');    
        }
    });

});
define('hospitalrun/mixins/patient-submodule', ['exports', 'ember', 'hospitalrun/mixins/patient-visits'], function (exports, Ember, PatientVisits) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create(PatientVisits['default'], {
        findPatientVisits: true, //Override to false if visits shouldn't be set when patient is selected.    
        
        actions: {
            showPatient: function(patient) {
                this.transitionToRoute('patients.edit', patient);
            },        
            returnToPatient: function() {
                this.transitionToRoute('patients.edit', this.get('returnPatientId'));
            },        
            returnToVisit: function() {
                this.transitionToRoute('visits.edit', this.get('returnVisitId'));
            }
        },

        /**
         * Add the specified child to the current visit and then save the visit.  If a visit
         * has not been selected, create a new visit and add it to the selected patient.
         * @param {Object} objectToAdd the object to add.
         * @param {string} childName the name of the child object on the visit to add to.
         * @param {string} newVisitType if a new visit needs to be created, what type of visit
         * should be created. 
         * @returns {Promise} promise that will resolve or reject depending on whether or
         * not the add and subsequent saves were successful.
         */
        addChildToVisit: function(objectToAdd, childName, newVisitType) {
            return new Ember['default'].RSVP.Promise(function(resolve, reject){
                var childPromises = [],
                    visit = this.get('visit');
                if (Ember['default'].isEmpty(visit)) {
                    visit = this.createNewVisit(newVisitType);
                }
                childPromises.addObjects(this.resolveVisitChildren());
                Ember['default'].RSVP.all(childPromises, 'Resolved visit children before adding new '+childName).then(function() {        
                    visit.get(childName).then(function(visitChildren) {
                        visitChildren.addObject(objectToAdd);
                        this.set('needToUpdateVisit', true);
                        resolve(objectToAdd);
                    }.bind(this), reject);
                }.bind(this), reject);
            }.bind(this));
        },

        cancelAction: function() {
            var returnToPatient = this.get('returnToPatient'),
                returnToVisit = this.get('returnToVisit');
            if (returnToVisit) {
                return 'returnToVisit';
            } else if (returnToPatient) {
                return 'returnToPatient';
            } else {
                return 'allItems';
            }
        }.property('returnToPatient', 'returnToVisit'),
        
        createNewVisit: function(newVisitType) {
            var patient = this.get('patient'),
                visit = this.get('store').createRecord('visit', {
                startDate: new Date(),
                endDate: new Date(),
                outPatient: true,
                patient: patient,
                visitType: newVisitType
            });
            this.set('visit', visit);
            return visit;
        },

        patientId: Ember['default'].computed.alias('patient.id'),
        
        patientChanged: function() {
            var patient = this.get('patient');
            if (!Ember['default'].isEmpty(patient) && this.get('findPatientVisits')) {
                this.getPatientVisits(patient).then(function(visits) {
                    this.set('patientVisits',visits);
                }.bind(this));
            }
        }.observes('patient'),
        
        selectedPatientChanged: function() {
            var selectedPatient = this.get('selectedPatient');        
            if (!Ember['default'].isEmpty(selectedPatient)) {
                this.store.find('patient', selectedPatient.id).then(function(item) {
                    this.set('patient', item);
                    Ember['default'].run.once(this, function(){
                        this.get('model').validate();
                    });
                }.bind(this));
            }
        }.observes('selectedPatient'),

        patientIdChanged: function() {
            var patientId = this.get('patientId');
            if (!Ember['default'].isEmpty(patientId)) {
                this.set('returnPatientId', patientId);
            }
        }.observes('patientId').on('init'),        
        
        patientVisits: [],
        returnPatientId: null,
        returnVisitId: null,
        
        /**
         * Removes the specified child from the current visit object and then saves the visit.
         * @param {Object} objectToRemove the object to remove.
         * @param {string} childName the name of the child object on the visit to remove from.
         * @returns {Promise} promise that will resolve or reject depending on whether or
         * not the remove and subsequent save were successful.
         */    
        removeChildFromVisit: function(objectToRemove, childName) {
            return new Ember['default'].RSVP.Promise(function(resolve, reject){
                var childPromises = [],
                    visit = this.get('visit');
                childPromises.addObjects(this.resolveVisitChildren());
                Ember['default'].RSVP.all(childPromises, 'Resolved visit children before removing '+childName).then(function() {
                    visit.get(childName).then(function(visitChildren) {
                        visitChildren.removeObject(objectToRemove);                    
                        visit.save().then(resolve, reject);                
                    }.bind(this), reject);
                }.bind(this), reject);
            }.bind(this));
        },
        
        /**
         * Observer on visits to make sure async relationships are resolved.
         * @returns {array} of promises which can be used to ensure
         * all relationships have resolved.
         */
        resolveVisitChildren: function() {        
            var promises = [],
                visit = this.get('visit');
            if (!Ember['default'].isEmpty(visit)) {
                //Make sure all the async relationships are resolved    
                promises.push(visit.get('imaging'));
                promises.push(visit.get('labs'));
                promises.push(visit.get('medication'));
                promises.push(visit.get('procedures'));
                promises.push(visit.get('vitals'));            
            }
            return promises;
        },
        
        /**
         * If visit needs to saved, save it and then display an alert message; otherwise
         * just display the alert message.
         * @param alertTitle String the title to use on the alert.
         * @param alertMessage String the message to display in the alert.
         */
        saveVisitIfNeeded: function(alertTitle, alertMessage, alertAction) {
            if (this.get('needToUpdateVisit')) {
                this.get('visit').save().then(function() {
                    this.set('needToUpdateVisit', false);
                    this.displayAlert(alertTitle, alertMessage, alertAction);    
                }.bind(this));
            } else {
                this.displayAlert(alertTitle, alertMessage, alertAction);    
            }
        }, 
            
        
        visitIdChanged: function() {
            var visitId = this.get('visitId');
            if (!Ember['default'].isEmpty(visitId)) {
                this.set('returnVisitId', visitId);
            }
        }.observes('visitId').on('init'),
        
        visitId: Ember['default'].computed.alias('visit.id'),
        visitsController: Ember['default'].computed.alias('controllers.visits')
    });

});
define('hospitalrun/mixins/patient-visits', ['exports', 'ember', 'hospitalrun/mixins/pouchdb'], function (exports, Ember, PouchDbMixin) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create(PouchDbMixin['default'], {
        getPatientVisits: function(patient) {
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                var maxValue = this.get('maxValue'),
                    patientId = 'patient_'+patient.get('id');
                this.store.find('visit', {
                    options: {
                        startkey: [patientId, null, null, null, 'visit_'],
                        endkey: [patientId, maxValue, maxValue, maxValue, maxValue]
                    },
                    mapReduce: 'visit_by_patient'
                }).then(resolve, reject);
            }.bind(this));
        }
    });

});
define('hospitalrun/mixins/payment-profiles', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        paymentProfiles: [
            'Private',
            'Discounted',
            'Free'
        ]
    });

});
define('hospitalrun/mixins/pouch-adapter-utils', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        _idToPouchId: function(id, type){
            type = type.typeKey || type;
            return [type, id].join("_");
        },

        _pouchError: function(reject){
            return function(err){
                if (err.status === 401) {
                    //User is unauthorized; reload to force login.                
                    var session = this.get('session');
                    if (!Ember['default'].isEmpty(session)) {
                        session.invalidate();
                    }
                }
                var errmsg = [  err["status"], 
                    (err["name"] || err["error"])+":",
                    (err["message"] || err["reason"])
                   ].join(" ");
                Ember['default'].run(null, reject, errmsg);
            }.bind(this);
        }
    });

});
define('hospitalrun/mixins/pouchdb', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        maxValue: '\uffff'
    });

});
define('hospitalrun/mixins/progress-dialog', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        progressDialog: null,
        progressDialogDefaults: {
            showProgress: true,
            hideCancelButton: true,
            hideUpdateButton: true,
            progressBarValue: 0,
            progressBarStyle: 'width: 0%;'
        },
        progressInterval: 500,
        progressMessage: null,
        progressTimer: null,
        progressTitle: null,    
        
        scheduleProgress: function(f) {
            return Ember['default'].run.later(this, function() {
                f.apply(this);
                this.set('progressTimer', this.scheduleProgress(f));
            }, this.get('progressInterval'));
        },   
        
        updateProgressBar: function() {
            var progressDialog = this.get('progressDialog'),
                progressBarValue = progressDialog.get('progressBarValue');
            progressBarValue += 10;
            if (progressBarValue > 100) {
                progressBarValue = 0;
            }
            progressDialog.set('progressBarValue', progressBarValue);
            progressDialog.set('progressBarStyle', 'width: '+progressBarValue+'%');
        },
        
        closeProgressModal: function() {
            Ember['default'].run.cancel(this.get('progressTimer'));
            this.send('closeModal');
        },
        
        showProgressModal: function() {
            var progressDialog = Ember['default'].Object.create(this.get('progressDialogDefaults'));
            progressDialog.set('title', this.get('progressTitle'));
            progressDialog.set('message', this.get('progressMessage'));
            this.set('progressDialog', progressDialog);
            this.set('progressTimer', this.scheduleProgress(this.get('updateProgressBar')));
            this.send('openModal', 'dialog', progressDialog);    
        }
    });

});
define('hospitalrun/mixins/publish-statuses', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        publishStatuses: [
            'Draft',
            'Published',
            'Private',
            'Archived'
        ]
    });

});
define('hospitalrun/mixins/result-validation', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        validations: {
            result: {
                 acceptance: {
                    accept: true,
                    if: function(object) {
                        if (!object.get('isDirty')) {
                            return false;
                        }
                        var status = object.get('status'),
                            result = object.get('result');
                        if (status === 'Completed' && Ember['default'].isEmpty(result)) {
                            //force validation to fail
                            return true;
                        }
                        return false;
                    }, 
                    message: 'Please enter a result before completing'
                }
            }
        }
    });

});
define('hospitalrun/mixins/return-to', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        cancelAction: function() {
            var returnTo = this.get('returnTo');
            if (Ember['default'].isEmpty(returnTo)) {
                return 'allItems';
            } else {
                return 'returnTo';
            }
        }.property('returnTo')
    });

});
define('hospitalrun/mixins/unit-types', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        unitList: [
            'ampoule',
            'bag',
            'bottle',
            'box',
            'bundle',
            'capsule',
            'case',
            'container',
            'cream',
            'each',
            'gel',
            'nebule',
            'ointment',
            'pack',        
            'pair',
            'pallet',
            'patch',
            'pcs',
            'pill',        
            'plastic',
            'polyamp',
            'roll',
            'spray',
            'suppository',
            'suspension',
            'set',
            'syrup',
            'tablet',
            'tray',
            'tube',
            'vial'
        ]
    });

});
define('hospitalrun/mixins/user-roles', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        userRoles: [
            {name: 'Business Office', roles: ['Business Office', 'user']},
            {name: 'Cashier', roles: ['Cashier', 'user']},
            {name: 'Data Entry', roles: ['Data Entry', 'user']},
            {name: 'Doctor', roles: ['Doctor', 'user']},
            {name: 'Finance', roles: ['Finance', 'user']},
            {name: 'Finance Manager', roles: ['Finance Manager', 'user']},
            {name: 'Hospital Administrator', roles: ['Hospital Administrator', 'user']},
            {name: 'Inventory Manager', roles: ['Inventory Manager', 'user']},
            {name: 'Imaging Technician', roles: ['Imaging Technician', 'user']},
            {name: 'Lab Technician', roles: ['Lab Technician', 'user']},
            {name: 'Medical Records Officer', roles: ['Medical Records Officer', 'user']},
            {name: 'Nurse', roles: ['Nurse', 'user']},
            {name: 'Nurse Manager', roles: ['Nurse Manager', 'user']},
            {name: 'Patient Administration', roles: ['Patient Administration', 'user']},
            {name: 'Pharmacist', roles: ['Pharmacist', 'user']},
            {name: 'Social Worker', roles: ['Social Worker', 'user']},
            {name: 'System Administrator', roles: ['System Administrator','admin','user']},
            {name: 'User Administrator', roles: ['User Administrator','admin','user']}
        ]
    });
        

});
define('hospitalrun/mixins/user-session', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        defaultCapabilities: {
            admin: [
                'User Administrator',
                'System Administrator'
            ],
            appointments: [
                'Data Entry',
                'Finance',
                'Hospital Administrator',
                'Medical Records Officer',
                'Patient Administration', 
                'Social Worker', 
                'System Administrator'
            ],
            add_appointment: [
                'Data Entry',
                'Finance',
                'Hospital Administrator',
                'Medical Records Officer',
                'Patient Administration',  
                'Social Worker', 
                'System Administrator'
            ],
            add_charge: [
                'Data Entry',
                'Business Office', 
                'Hospital Administrator',
                'Medical Records Officer',
                'System Administrator'             
            ],
            add_diagnosis: [
                'Data Entry',
                'Doctor',
                'Hospital Administrator',
                'Medical Records Officer',
                'Patient Administration', 
                'System Administrator'
            ],
            add_medication: [
                'Data Entry',
                'Doctor',
                'Hospital Administrator',
                'Medical Records Officer',
                'Pharmacist', 
                'System Administrator'
            ],
            add_photo: [
                'Data Entry',
                'Hospital Administrator',
                'Medical Records Officer',
                'Patient Administration',  
                'Social Worker', 
                'System Administrator'
            ],        
            add_patient: [
                'Data Entry',
                'Doctor',
                'Hospital Administrator',
                'Medical Records Officer',
                'Patient Administration', 
                'Social Worker', 
                'System Administrator'
            ],
            add_pricing: [
                'Data Entry',
                'Finance',
                'Business Office', 
                'Hospital Administrator',
                'Medical Records Officer',
                'System Administrator'             
            ],
            add_pricing_profile:  [
                'Data Entry',
                'Finance',
                'Business Office', 
                'Hospital Administrator',
                'Medical Records Officer',
                'System Administrator'             
            ],
            add_lab: [
                'Data Entry',
                'Doctor',
                'Hospital Administrator',
                'Medical Records Officer',
                'Lab Technician', 
                'System Administrator'
            ],
            add_imaging: [
                'Data Entry',
                'Doctor', 
                'Hospital Administrator',
                'Imaging Technician', 
                'Medical Records Officer',
                'System Administrator'
            ],
            add_inventory_request: [
                'Data Entry',
                'Hospital Administrator',
                'Inventory Manager', 
                'Medical Records Officer',
                'Nurse Manager',
                'Pharmacist',
                'System Administrator'
            ],        
            add_inventory_item: [
                'Data Entry',
                'Hospital Administrator',
                'Inventory Manager',
                'Medical Records Officer',
                'System Administrator'
            ],
            add_inventory_purchase: [
                'Data Entry',
                'Hospital Administrator',
                'Inventory Manager', 
                'Medical Records Officer',
                'System Administrator'
            ],
            add_invoice: [
                'Data Entry',
                'Business Office', 
                'Hospital Administrator',
                'Medical Records Officer',
                'System Administrator' 
            ],
            add_payment: [
                'Cashier',
                'Business Office', 
                'Hospital Administrator',
                'Medical Records Officer',
                'System Administrator' 
            ],        
            add_procedure: [
                'Data Entry',
                'Doctor',
                'Hospital Administrator',
                'Medical Records Officer',
                'Nurse', 
                'Nurse Manager', 
                'Patient Administration', 
                'System Administrator'
            ],
            add_socialwork: [
                'Hospital Administrator',
                'Medical Records Officer',
                'Social Worker', 
                'System Administrator'            
            ],
            add_user: [
                'User Administrator',
                'System Administrator'
            ],
            add_visit: [
                'Data Entry',
                'Doctor',
                'Hospital Administrator',
                'Medical Records Officer',
                'Nurse', 
                'Nurse Manager', 
                'Patient Administration',
                'Social Worker',
                'System Administrator'
            ],        
            add_vitals: [
                'Data Entry',
                'Doctor',
                'Hospital Administrator',
                'Medical Records Officer',
                'Nurse', 
                'Nurse Manager', 
                'System Administrator'
            ],
            admit_patient: [
                'Data Entry',
                'Doctor',
                'Hospital Administrator',
                'Medical Records Officer',
                'Nurse', 
                'Nurse Manager', 
                'Patient Administration',
                'Social Worker',
                'System Administrator'
            ],
            adjust_inventory_location: [
                'Hospital Administrator',
                'Inventory Manager',
                'Medical Records Officer',
                'System Administrator'
            ], 
            billing: [
                'Hospital Administrator',
                'Finance',
                'Finance Manager',
                'System Administrator'
            ],
            complete_imaging: [
                'Imaging Technician', 
                'Medical Records Officer',
                'System Administrator'
            ],
            complete_lab: [
                'Lab Technician',
                'Medical Records Officer',
                'System Administrator'
            ],
            delete_appointment: [
                'Hospital Administrator',
                'Medical Records Officer',
                'Patient Administration', 
                'Social Worker', 
                'System Administrator'
            ],
            delete_diagnosis: [
                'Doctor',
                'Hospital Administrator',
                'Medical Records Officer',
                'Patient Administration', 
                'System Administrator'
            ],        
            delete_inventory_item: [
                'Hospital Administrator',
                'Inventory Manager', 
                'Medical Records Officer',
                'System Administrator'
            ],
            delete_inventory_purchase: [
                'Hospital Administrator',
                'Inventory Manager', 
                'Medical Records Officer',
                'System Administrator'
            ],
            delete_imaging: [            
                'Doctor', 
                'Hospital Administrator',
                'Medical Records Officer',
                'System Administrator'
            ],
            delete_invoice: [
                'Business Office', 
                'Hospital Administrator',
                'System Administrator' 
            ],        
            delete_lab: [
                'Doctor', 
                'Hospital Administrator',
                'Medical Records Officer',
                'System Administrator'
            ],
            delete_medication: [
                'Doctor', 
                'Hospital Administrator',
                'Medical Records Officer',
                'System Administrator'
            ],
            delete_photo: [
                'Data Entry',
                'Hospital Administrator',
                'Medical Records Officer',
                'Patient Administration',  
                'Social Worker', 
                'System Administrator'
            ],
            delete_patient: [
                'Hospital Administrator',
                'Medical Records Officer',
                'Patient Administration', 
                'System Administrator'
            ],       
            delete_pricing: [
                'Finance',
                'Data Entry',
                'Business Office', 
                'Hospital Administrator',
                'Medical Records Officer',
                'System Administrator'             
            ],
            delete_pricing_profile:  [
                'Finance',
                'Data Entry',
                'Business Office', 
                'Hospital Administrator',
                'Medical Records Officer',
                'System Administrator'             
            ],        
            delete_procedure: [
                'Doctor', 
                'Hospital Administrator',
                'Medical Records Officer',
                'Nurse', 
                'Nurse Manager', 
                'Patient Administration', 
                'System Administrator'
            ],
            delete_socialwork: [
                'Hospital Administrator',
                'Medical Records Officer',
                'Social Worker', 
                'System Administrator'       
            ],        
            delete_vitals: [
                'Doctor',
                'Hospital Administrator',
                'Medical Records Officer',
                'Nurse', 
                'Nurse Manager', 
                'System Administrator'
            ],
            delete_visit: [
                'Doctor',
                'Hospital Administrator',
                'Medical Records Officer',
                'Nurse', 
                'Nurse Manager', 
                'Patient Administration', 
                'Social Worker',
                'System Administrator'
            ],
            delete_user: [
                'User Administrator',
                'System Administrator'
            ],
            discharge_patient: [
                'Data Entry',
                'Doctor',
                'Hospital Administrator',
                'Medical Records Officer',
                'Nurse', 
                'Nurse Manager', 
                'Patient Administration',
                'Social Worker',
                'System Administrator'
            ],
            edit_invoice: [
                'Data Entry',
                'Business Office', 
                'Hospital Administrator',
                'Medical Records Officer',
                'System Administrator' 
            ],
            fulfill_inventory: [
                'Hospital Administrator',
                'Inventory Manager',
                'Medical Records Officer',
                'Pharmacist',
                'System Administrator'
            ],
            fulfill_medication: [
                'Medical Records Officer',
                'Pharmacist', 
                'System Administrator'
            ],
            imaging: [
                'Data Entry',
                'Doctor', 
                'Hospital Administrator',
                'Imaging Technician', 
                'Medical Records Officer',
                'System Administrator'
            ],
            invoices: [
                'Hospital Administrator',
                'Finance',
                'Finance Manager',
                'System Administrator'
            ],        
            labs: [
                'Data Entry',
                'Doctor', 
                'Hospital Administrator',
                'Lab Technician',
                'Medical Records Officer',
                'System Administrator'
            ],
            medication: [
                'Data Entry',
                'Doctor', 
                'Hospital Administrator',
                'Medical Records Officer',
                'Pharmacist', 
                'System Administrator'
            ],
            inventory: [
                'Data Entry',
                'Hospital Administrator',
                'Inventory Manager',
                'Medical Records Officer',
                'Nurse Manager', 
                'Pharmacist',
                'System Administrator'
            ],
            override_invoice: [
                'Business Office', 
                'Hospital Administrator',
                'System Administrator' 
            ],
            query_db: [
                'System Administrator'
            ],
            patients: [
                'Business Office',
                'Data Entry',
                'Doctor', 
                'Finance',
                'Finance Manager',            
                'Hospital Administrator',
                'Imaging Technician',
                'Lab Technician',
                'Medical Records Officer',
                'Nurse', 
                'Nurse Manager', 
                'Patient Administration', 
                'Social Worker', 
                'System Administrator'
            ],

            patient_reports: [
                'Hospital Administrator',
                'Patient Administration', 
                'System Administrator'
            ],
            
            pricing: [
                'Data Entry',
                'Finance',
                'Business Office', 
                'Hospital Administrator',
                'Medical Records Officer',
                'System Administrator'             
            ],        
            visits: [
                'Data Entry',
                'Doctor', 
                'Hospital Administrator',
                'Medical Records Officer',
                'Nurse Manager', 
                'Nurse',  
                'Patient Administration', 
                'Social Worker',
                'System Administrator'
            ],
            update_config: [
                'System Administrator'
            ],
            users: [
                'User Administrator',
                'System Administrator'
            ]
            
        },    

        _getUserSessionVars: function() {
            var session = this.get('session');
            if (!Ember['default'].isEmpty(session) && session.isAuthenticated) {
                var sessionVars = session.store.restore();
                return sessionVars;
            }
        },
        
        currentUserCan: function(capability) {
            var sessionVars = this._getUserSessionVars();
            if (!Ember['default'].isEmpty(sessionVars) && !Ember['default'].isEmpty(sessionVars.role)) {
                var capabilities = this.get('defaultCapabilities'),
                    supportedRoles = capabilities[capability];
                if (!Ember['default'].isEmpty(supportedRoles)) {
                    return supportedRoles.contains(sessionVars.role);
                }
            } 
            return false;
        },
        
        /**
         * Returns the display name of the user or the username if
         * the display name is not set or if the username is explictly requested.
         * @param {boolean} returnUserName if true, always return the username instead
         * of the display name even if the display name is set.
         */
        getUserName: function(returnUserName) {
            var returnName,
                sessionVars = this._getUserSessionVars();
            if (!Ember['default'].isEmpty(sessionVars)) {
                if (returnUserName) {
                    returnName = sessionVars.name;
                } else if (!Ember['default'].isEmpty(sessionVars.displayName)) {
                    returnName = sessionVars.displayName;
                } else if (!Ember['default'].isEmpty(sessionVars.name)) {
                    returnName = sessionVars.name;
                }
            }
            return returnName;
        }
    });

});
define('hospitalrun/mixins/visit-types', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        defaultVisitTypes: [
            'Admission',
            'Clinic',
            'Followup',
            'Imaging',
            'Lab',
            'Pharmacy'
        ],
        
        visitTypes: function() {
            var defaultVisitTypes = this.get('defaultVisitTypes'),
                visitTypesList = this.get('visitTypesList');
            if (Ember['default'].isEmpty(visitTypesList)) {
                return defaultVisitTypes;
            } else {
                return visitTypesList.get('value');
            }
        }.property('visitTypesList', 'defaultVisitTypes'),
    });

});
define('hospitalrun/models/abstract', ['exports', 'ember', 'ember-validations', 'hospitalrun/mixins/user-session'], function (exports, Ember, EmberValidations, UserSession) {

    'use strict';

    exports['default'] = DS.Model.extend(UserSession['default'], EmberValidations['default'].Mixin, {
        lastModified: DS.attr('date'),
        modifiedBy: DS.attr(),
        modifiedFields: DS.attr(),

        /**
        * Before saving the record, update the modifiedFields attribute to denote what fields were changed when.
        * Also, if the save failed because of a conflict, reload the record and reapply the changed attributes and
        * attempt to save again.
        */
        save: function(retry) {
            var attribute,
                changedAttributes = this.changedAttributes(),
                modifiedDate = new Date(),
                modifiedFields = this.get('modifiedFields'),
                session = this.get('session');
            
            if (!session || !session.isAuthenticated) {
                return new Ember['default'].RSVP.Promise(function(resolve, reject){
                    Ember['default'].run(null, reject, "ERROR you must be logged in to save");
                });
            }

            if (this.get('isDirty') && !this.get('isDeleted')) {
                if (Ember['default'].isEmpty(modifiedFields)) {
                    modifiedFields = {};
                }        
                this.set('lastModified', modifiedDate);        
                for (attribute in changedAttributes) {
                    modifiedFields[attribute] = modifiedDate;
                }
                this.set('modifiedFields', modifiedFields);
                this.set('modifiedBy', this.getUserName());
            }
            
            return new Ember['default'].RSVP.Promise(function(resolve, reject){
                this._super().then(function(results) {
                    Ember['default'].run(null, resolve, results);
                }, function(error) {
                    if (retry) {
                        //We failed on the second attempt to save the record, so reject the save.
                        Ember['default'].run(null, reject, error);
                    } else {
                        if (error.indexOf && error.indexOf('conflict') > -1) {
                            //Conflict encountered, so rollback, reload and then save the record with the changed attributes.
                            this.rollback();
                            this.reload().then(function(record) {
                                for (var attribute in changedAttributes) {
                                    record.set(attribute, changedAttributes[attribute][1]);
                                }
                                record.save(true).then(function(results) {
                                    Ember['default'].run(null, resolve, results);
                                }, function(err) {
                                    Ember['default'].run(null, reject, err);
                                });

                            }, function(err) {
                                Ember['default'].run(null, reject, err);
                            });
                        } else {
                            Ember['default'].run(null, reject, error);
                        }
                    }
                }.bind(this));
            }.bind(this));
        }
    });

});
define('hospitalrun/models/add-diagnosis', ['exports', 'hospitalrun/utils/diagnosis-validation', 'ember', 'ember-validations'], function (exports, DiagnosisValidation, Ember, EmberValidations) {

    'use strict';

    /**
     * Stub model for adding new patient diagnoses; needed for validation.
     */
    exports['default'] = Ember['default'].Object.extend(EmberValidations['default'], {
        diagnosis: null,
        diagnosisId: null,
        validations: {
            diagnosis: {
                acceptance: DiagnosisValidation['default'].diagnosisValidation.acceptance,
                length: { 
                    minimum: 3,
                    allowBlank: true
                }
            }
        }
    });

});
define('hospitalrun/models/appointment', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/utils/patient-validation', 'ember'], function (exports, AbstractModel, PatientValidation, Ember) {

    'use strict';

    exports['default'] = AbstractModel['default'].extend({
        allDay: DS.attr(),
        patient: DS.belongsTo('patient'),
        provider: DS.attr('string'),
        location: DS.attr('string'),
        appointmentType: DS.attr('string'),
        startDate: DS.attr('date'),
        endDate: DS.attr('date'),
        notes: DS.attr('string'),
        status: DS.attr('string', {defaultValue:'Scheduled'}),
        
        appointmentDate: function() {
            var startDate = this.get('startDate');
            return startDate;
        }.property('startDate'),
        
        displayStatus: function() {
            var status = this.get('status');
            if (Ember['default'].isEmpty(status)) {
                status = 'Scheduled';
            }
            return status;
        }.property('status'),

        validations: {
            appointmentDate: {
                presence: {
                    if: function(object) {
                        var appointmentType = object.get('appointmentType');
                        return appointmentType !== 'Admission';
                    }
                }
            },
            
            patientTypeAhead: PatientValidation['default'].patientTypeAhead,        
            
            patient: {
                presence: true
            },
            appointmentType: {
                presence: true
            },
            location: {
                presence: true
            },
            startDate: {
                presence: true
            },
            endDate: {
                 acceptance: {
                    accept: true,
                    if: function(object) {
                        if (!object.get('isDirty')) {
                            return false;
                        }
                        var allDay = object.get('allDay'),
                            startDate = object.get('startDate'),
                            endDate = object.get('endDate');
                        if (Ember['default'].isEmpty(endDate) || Ember['default'].isEmpty(startDate)) {
                            //force validation to fail
                            return true;
                        } else {
                            if (allDay) {
                                if (endDate.getTime() < startDate.getTime()) {
                                    return true;
                                }
                            } else {
                                if (endDate.getTime() <=  startDate.getTime()) {
                                    return true;
                                }
                            }
                        }
                        //patient is properly selected; don't do any further validation
                        return false;

                    }, 
                    message: 'Please select an end date later than the start date'
                }
            }
        }
    });

});
define('hospitalrun/models/billing-line-item', ['exports', 'hospitalrun/models/abstract', 'ember', 'hospitalrun/mixins/number-format'], function (exports, AbstractModel, Ember, NumberFormat) {

    'use strict';

    exports['default'] = AbstractModel['default'].extend(NumberFormat['default'],{
        amountOwed: DS.attr('number'),
        category: DS.attr('string'),
        description: DS.attr('string'),    
        details: DS.hasMany('line-item-detail'), /* The individual objects that make up this line item. */
        discount: DS.attr('number'),
        name: DS.attr('string'),
        nationalInsurance: DS.attr('number'),
        privateInsurance: DS.attr('number'),
        total: DS.attr('number'),
        
        amountOwedChanged: function() {
            Ember['default'].run.debounce(this, function() {
                var discount = this._getValidNumber(this.get('discount')),
                nationalInsurance = this._getValidNumber(this.get('nationalInsurance')),
                privateInsurance = this._getValidNumber(this.get('privateInsurance')),
                amountOwed = this._getValidNumber(this.get('total'));        
                amountOwed = amountOwed - discount - nationalInsurance - privateInsurance;        
                if (amountOwed < 0) {
                    amountOwed = 0;
                }
                this.set('amountOwed',this._numberFormat(amountOwed,true));
            }, 150);
        }.observes('discount','nationalInsurance','privateInsurance','total'),
        
        discountChanged: function() {
            Ember['default'].run.debounce(this, function() {
                var details = this.get('details'),
                    total = 0;
                if (!Ember['default'].isEmpty('details')) {
                    total = this._calculateTotal(details, 'discount');
                    this.set('discount', this._numberFormat(total, true));
                }
            }, 150);
        }.observes('details.@each.discount'),
        
        totalChanged: function() {
            Ember['default'].run.debounce(this, function() {
                var details = this.get('details'),
                    total = 0;
                if (!Ember['default'].isEmpty('details')) {
                    total = this._calculateTotal(details, 'total');
                    this.set('total', this._numberFormat(total, true));
                }
            }, 150);
        }.observes('details.@each.total'),
        
        validations: {
            category: {
                presence: true
            },
            discount: { 
                numericality: {
                    allowBlank: true                
                }
            },
            nationalInsurance: { 
                numericality: {
                    allowBlank: true                
                }
            },
            name: {
                presence: true            
            },
            privateInsurance: { 
                numericality: {
                    allowBlank: true                
                }
            },
            total: { 
                numericality: {
                    allowBlank: true                
                }
            }
        }
    });

});
define('hospitalrun/models/config', ['exports'], function (exports) {

    'use strict';

    exports['default'] = DS.Model.extend({
        value: DS.attr('')    
    });

});
define('hospitalrun/models/family-info', ['exports', 'ember', 'ember-validations'], function (exports, Ember, EmberValidations) {

    'use strict';

    /**
     * Model for social worker family info
     */
    exports['default'] = Ember['default'].Object.extend(EmberValidations['default'], {
        age: null,
        civilStatus: null,
        education: null,
        income: null,
        insurance: null,
        name: null,
        occupation: null,
        relationship: null,
        validations: {        
            age: {
                numericality: {
                    allowBlank: true
                }
            },        
            name: {
                presence: true
            }    
        }
    });

});
define('hospitalrun/models/imaging', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/date-format', 'hospitalrun/utils/patient-validation', 'hospitalrun/mixins/result-validation'], function (exports, AbstractModel, DateFormat, PatientValidation, ResultValidation) {

    'use strict';

    exports['default'] = AbstractModel['default'].extend(DateFormat['default'], ResultValidation['default'], {
        charges: DS.hasMany('proc-charge'),
        imagingDate: DS.attr('date'),
        imagingType: DS.belongsTo('pricing'),
        notes: DS.attr('string'),
        patient: DS.belongsTo('patient'),
        radiologist: DS.attr('string'),
        requestedBy: DS.attr('string'),
        requestedDate: DS.attr('date'),
        result: DS.attr('string'),
        status: DS.attr('string'),
        visit: DS.belongsTo('visit'),
        
        imagingDateAsTime: function() {        
            return this.dateToTime(this.get('imagingDate'));
        }.property('imagingDate'),
        
        requestedDateAsTime: function() {
            return this.dateToTime(this.get('requestedDate'));
        }.property('requestedDate'),
        
        validations: {
            imagingTypeName: {
                presence: {
                    'if': function(object) {
                        if (object.get('isNew')) {
                            return true;
                        }
                    },
                    message: 'Please select an imaging type'
                }
            },        
            patientTypeAhead: PatientValidation['default'].patientTypeAhead,
            patient: {
                presence: true
            },
        }
    });

});
define('hospitalrun/models/inv-location', ['exports', 'hospitalrun/models/abstract', 'ember', 'hospitalrun/mixins/location-name'], function (exports, AbstractModel, Ember, LocationName) {

    'use strict';

    var InventoryLocation = AbstractModel['default'].extend(LocationName['default'], {
        quantity: DS.attr('number'),
        location: DS.attr('string'),
        aisleLocation: DS.attr('string'),

        locationNameWithQuantity: function() {
            var quantity = this.get('quantity'),
                locationName = this.get('locationName');
            return '%@ (%@ available)'.fmt(locationName, quantity);
        }.property('locationName'),
        
        validations: {
            adjustmentQuantity: {
                numericality: {
                    greaterThan: 0
                },            
                acceptance: {
                    /***
                     * Validate that the adjustment quantity is a number and that if a deduction there are enough items to deduct
                     */
                    accept: true,
                    if: function(object) {
                        var adjustmentQuantity = object.get('adjustmentQuantity'),
                            transactionType = object.get('transactionType'),
                            locationQuantity = object.get('quantity');
                        if (Ember['default'].isEmpty(adjustmentQuantity)|| isNaN(adjustmentQuantity)) { 
                            return true;
                        }
                        if (transactionType !== 'Adjustment (Add)' && adjustmentQuantity > locationQuantity) {
                            return true;            
                        }
                        return false;
                    },
                    message: 'Invalid quantity'         
                }
            },        
            
            transferLocation: {
                acceptance: {
                    /***
                    * Validate that a procedure has been specified and that it
                    * is a valid procedure.
                    */
                    accept: true,
                    if: function(object) {
                        var transferLocation = object.get('transferLocation'),
                        transferItem = object.get('transferItem');
                        //If we don't have a transfer item, then a transfer is not occurring.
                        if (!Ember['default'].isEmpty(transferItem) && Ember['default'].isEmpty(transferLocation)) {
                            return true;
                        }
                        return false;
                    },
                    message: 'Please select a location to transfer to'         
                }
            }
        }
    });

    exports['default'] = InventoryLocation;

});
define('hospitalrun/models/inv-purchase', ['exports', 'hospitalrun/models/abstract', 'ember', 'hospitalrun/mixins/location-name'], function (exports, AbstractModel, Ember, LocationName) {

    'use strict';

    var InventoryPurchaseItem = AbstractModel['default'].extend(LocationName['default'], {
        purchaseCost: DS.attr('number'), 
        lotNumber: DS.attr('string'),
        dateReceived: DS.attr('date'),
        costPerUnit: function() {
            var purchaseCost = this.get('purchaseCost'),
                quantity = parseInt(this.get('originalQuantity'));
            if (Ember['default'].isEmpty(purchaseCost) || Ember['default'].isEmpty(quantity) || purchaseCost === 0 || quantity === 0) {
                return 0;
            }
            return Number((purchaseCost/quantity).toFixed(2));
        }.property('purchaseCost', 'originalQuantity'),
        originalQuantity: DS.attr('number'),
        currentQuantity: DS.attr('number'),
        expirationDate: DS.attr('date'),
        expired: DS.attr('boolean'),
        location: DS.attr('string'),
        aisleLocation: DS.attr('string'),
        giftInKind: DS.attr('boolean'),
        inventoryItem: DS.attr('string'), //Currently just storing id instead of DS.belongsTo('inventory', { async: true }),
        vendor: DS.attr('string'),
        vendorItemNo: DS.attr('string'),
        distributionUnit: DS.attr('string'),
        invoiceNo: DS.attr('string'),
        quantityGroups: DS.attr(),
        validations: {
            purchaseCost: {
                numericality: true
            },
            originalQuantity: {
                numericality: true
            },
            vendor: {
                presence: true
            }
        }
    });

    exports['default'] = InventoryPurchaseItem;

});
define('hospitalrun/models/inv-request', ['exports', 'hospitalrun/models/abstract', 'ember', 'hospitalrun/mixins/location-name'], function (exports, AbstractModel, Ember, LocationName) {

    'use strict';

    var InventoryRequest = AbstractModel['default'].extend(LocationName['default'], {
        adjustPurchases: DS.attr('boolean'),
        completedBy: DS.attr('string'),
        costPerUnit: DS.attr('number'),
        dateCompleted: DS.attr('date'),
        dateRequested: DS.attr('date'),
        deliveryAisle: DS.attr('string'),
        deliveryLocation: DS.attr('string'),
        expenseAccount: DS.attr('string'),
        inventoryItem: DS.belongsTo('inventory', { async: true }),
        locationsAffected: DS.attr(),
        markAsConsumed: DS.attr('boolean', { defaultValue:true }),
        patient: DS.belongsTo('patient'),
        purchasesAffected: DS.attr(),
        quantity: DS.attr('number'),
        quantityAtCompletion: DS.attr('number'),
        reason: DS.attr('string'),
        requestedBy: DS.attr('string'),
        status: DS.attr('string'),
        transactionType: DS.attr('string'),
        visit: DS.belongsTo('visit'),
        
        deliveryLocationName: function() {
            var aisle = this.get('deliveryAisle'), 
                location = this.get('deliveryLocation');
            return this.formatLocationName(location, aisle);
        }.property('deliveryAisle', 'deliveryLocation'),
        
        validations: {
            inventoryItemTypeAhead: {
                acceptance: {
                    accept: true,
                    if: function(object) {
                        if (!object.get('isDirty')) {
                            return false;
                        }
                        var itemName = object.get('inventoryItem.name'),
                            itemTypeAhead = object.get('inventoryItemTypeAhead'),
                            requestedItems = object.get('requestedItems'),
                            status = object.get('status');
                        if (status === 'Requested') {
                            //Requested items don't show the type ahead and therefore don't need validation.
                            return false;
                        }
                        if (Ember['default'].isEmpty(itemName) || Ember['default'].isEmpty(itemTypeAhead)) {
                            //force validation to fail if fields are empty and requested items are empty
                            return Ember['default'].isEmpty(requestedItems);
                        } else {
                            var typeAheadName = itemTypeAhead.substr(0, itemName.length);
                            if (itemName !== typeAheadName) {
                                return true;
                            }
                        }
                        //Inventory item is properly selected; don't do any further validation
                        return false;

                    }, 
                    message: 'Please select a valid inventory item'
                }
            },
            quantity: {
                numericality: {
                    greaterThan: 0,
                    if: function(object) {
                        var requestedItems = object.get('requestedItems');
                        return (Ember['default'].isEmpty(requestedItems));
                    }
                },
                acceptance: {
                    accept: true,
                    if: function(object) {
                            var isNew = object.get('isNew'),
                                requestQuantity = parseInt(object.get('quantity')),
                                transactionType = object.get('transactionType'),
                                quantityToCompare = null;
                            if (transactionType === 'Return') {
                                //no validation needed for returns
                                return false;
                            } else if (isNew && transactionType === 'Request') {
                                quantityToCompare = object.get('inventoryItem.quantity');
                            } else { 
                                quantityToCompare = object.get('inventoryLocation.quantity');
                            }
                            if ( requestQuantity > quantityToCompare) {
                                //force validation to fail
                                return true;
                            } else {
                                //Diagnosis is properly set; don't do any further validation
                                return false;
                            }
                    }, 
                    message: 'The quantity must be less than or equal to the number of available items.'
                }
            }
        }
    });

    exports['default'] = InventoryRequest;

});
define('hospitalrun/models/inventory-batch', ['exports', 'hospitalrun/models/abstract', 'ember'], function (exports, AbstractModel, Ember) {

    'use strict';

    exports['default'] = AbstractModel['default'].extend({
        
        haveInvoiceItems: function() {
            var invoiceItems = this.get('invoiceItems');
            return (Ember['default'].isEmpty(invoiceItems));
        },
        
        validations: {        
            dateReceived: {
                presence: true
            },
            inventoryItemTypeAhead: {
                presence: {
                    if: function(object) {
                        return object.haveInvoiceItems();
                    }
                }
            },
            purchaseCost: {
                numericality: {
                    greaterThan: 0,
                    if: function(object) {
                        return object.haveInvoiceItems();
                    }
                }            
            },
            quantity: {
                numericality: {
                    greaterThan: 0,
                    if: function(object) {
                        return object.haveInvoiceItems();
                    }
                }            
            },
            vendor: {
                presence: true
            }
        }
    });

});
define('hospitalrun/models/inventory', ['exports', 'hospitalrun/models/abstract'], function (exports, AbstractModel) {

    'use strict';

    var validateIfNewItem = {
        if: function validateNewItem(object) {
            var skipSavePurchase = object.get('skipSavePurchase');
            //Only validate on new items and only if we are saving a purchase.        
            return (!skipSavePurchase && object.get('isNew'));
        }
    };
    exports['default'] = AbstractModel['default'].extend({
        purchases: DS.hasMany('inv-purchase'),
        locations: DS.hasMany('inv-location'),
        description: DS.attr('string'),
        friendlyId: DS.attr('string'),
        keywords: DS.attr(),
        name: DS.attr('string'),
        quantity: DS.attr('number'),
        crossReference: DS.attr('string'),
        type: DS.attr('string'),
        price: DS.attr('number'),
        reorderPoint: DS.attr('number'),
        distributionUnit: DS.attr('string'),
        
        availableLocations: function() {
            var locations = this.get('locations').filter(function(location) {
                return location.get('quantity') > 0;
            });
            return locations;
        }.property('locations@each.lastModified'),
        
        validations: {
            distributionUnit: {
                presence: true,
            },
            purchaseCost: {
                numericality: validateIfNewItem
            },
            name: {
                presence: true,
            },
            quantity: {
                numericality: validateIfNewItem
            },
            price: {
                numericality: {
                    allowBlank: true
                }
            },
            originalQuantity: {
                presence: validateIfNewItem         
            },
            reorderPoint: {
                numericality: {
                    allowBlank: true
                }
            },
            type: {
                presence: true,
            },
            vendor: {
                presence: validateIfNewItem
            }
        },

        updateQuantity: function() {
            var purchases = this.get('purchases');
            var newQuantity = purchases.reduce(function(previousItem, currentItem) {
                var currentQuantity = 0;
                if (!currentItem.get('expired')) {
                    currentQuantity = currentItem.get('currentQuantity');
                }
                return previousItem + currentQuantity;
            }, 0);
            this.set('quantity', newQuantity);
        }

    });

});
define('hospitalrun/models/invoice', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/date-format', 'ember', 'hospitalrun/mixins/number-format', 'hospitalrun/utils/patient-validation'], function (exports, AbstractModel, DateFormat, Ember, NumberFormat, PatientValidation) {

    'use strict';

    exports['default'] = AbstractModel['default'].extend(DateFormat['default'], NumberFormat['default'], {
        discount: DS.attr('number'),
        externalInvoiceNumber: DS.attr('string'),
        patient: DS.belongsTo('patient'),
        patientInfo: DS.attr('string'), //Needed for searching
        visit: DS.belongsTo('visit'),
        status: DS.attr('string'),
        remarks: DS.attr('string'),
        billDate: DS.attr('date'),
        nationalInsurance: DS.attr('number'),
        paidTotal: DS.attr('number'),
        paidFlag: DS.attr('boolean', {defaultValue: false}),
        patientResponsibility: DS.attr('number'),
        paymentProfile: DS.belongsTo('price-profile'),
        /*payments track the number of payment events attached to an invoice.*/
        payments: DS.hasMany('payment'),
        privateInsurance: DS.attr('number'),
        /*the individual line items of the invoice*/
        lineItems: DS.hasMany('billing-line-item'),
            
        addPayment: function(payment) {
            var payments = this.get('payments');
            payments.addObject(payment);
            this.paymentAmountChanged();
        },
        
        billDateAsTime: function() {        
            return this.dateToTime(this.get('billDate'));
        }.property('billDate'),
        
        discountChanged: function() {
            Ember['default'].run.debounce(this, function() {
                this.set('discount', this._calculateTotal('lineItems','discount'));
            }, 300);
        }.observes('lineItems.@each.discount'),
        
        nationalInsuranceChanged: function() {
            Ember['default'].run.debounce(this, function() {
                this.set('nationalInsurance', this._calculateTotal('lineItems','nationalInsurance'));
            }, 300);
        }.observes('lineItems.@each.nationalInsurance'),
            
        remainingBalance: function() {
            var patientResponsibility = this.get('patientResponsibility'),
                paidTotal = this.get('paidTotal');
            return this._numberFormat((patientResponsibility - paidTotal), true);
        }.property('patientResponsibility','paidTotal'),    
        
        privateInsuranceChanged: function() {
            Ember['default'].run.debounce(this, function() {
                this.set('privateInsurance', this._calculateTotal('lineItems','privateInsurance'));
            }, 300);
        }.observes('lineItems.@each.privateInsurance'),
        
        total: function() {
            return this._calculateTotal('lineItems','total');
        }.property('lineItems.@each.total'),
        
        displayInvoiceNumber: function() {
            var externalInvoiceNumber = this.get('externalInvoiceNumber'),
                id = this.get('id');
            if (Ember['default'].isEmpty(externalInvoiceNumber)) {
                return id;
            } else {
                return externalInvoiceNumber;
            }
        }.property('externalInvoiceNumber','id'),
        
        lineItemsByCategory: function() {
            var lineItems = this.get('lineItems'),
                byCategory = [];
            lineItems.forEach(function(lineItem) {
                var category = lineItem.get('category'),
                    categoryList = byCategory.findBy('category', category);
                if (Ember['default'].isEmpty(categoryList)) {
                    categoryList = {
                        category: category,
                        items: [],
                    };                
                    byCategory.push(categoryList);
                }
                categoryList.items.push(lineItem);
            }.bind(this));
            byCategory.forEach(function(categoryList) {
                categoryList.amountOwed = this._calculateTotal(categoryList.items, 'amountOwed');
                categoryList.discount = this._calculateTotal(categoryList.items, 'discount');
                categoryList.nationalInsurance = this._calculateTotal(categoryList.items, 'nationalInsurance');
                categoryList.privateInsurance = this._calculateTotal(categoryList.items, 'privateInsurance');
                categoryList.total = this._calculateTotal(categoryList.items, 'total');
            }.bind(this));
            return byCategory;        
        }.property('lineItems.@each.amountOwed'),
        
        patientIdChanged: function() {
            if (!Ember['default'].isEmpty(this.get('patient'))) {
                var patientDisplayName = this.get('patient.displayName'),
                    patientDisplayId = this.get('patient.displayPatientId');
                this.set('patientInfo', '%@ - %@'.fmt(patientDisplayName, patientDisplayId));
            }
        }.observes('patient.displayName', 'patient.id', 'patient.displayPatientId'),
        
        patientResponsibilityChanged: function() {
            var patientResponsibility = this._calculateTotal('lineItems','amountOwed');
            this.set('patientResponsibility', patientResponsibility);
        }.observes('lineItems.@each.amountOwed'),
        
        paymentAmountChanged: function() {
            var payments = this.get('payments'),
                paidTotal = payments.reduce(function(previousValue, payment) {
                    return previousValue += this._getValidNumber(payment.get('amount'));
                }.bind(this),0);
            this.set('paidTotal', this._numberFormat(paidTotal,true));
            var remainingBalance = this.get('remainingBalance');
            if (remainingBalance <= 0) {
                this.set('status', 'Paid');
            }
        }.observes('payments.[]','payments.@each.amount'),
            
        validations: {
            patientTypeAhead: PatientValidation['default'].patientTypeAhead,        
            
            patient: {
                presence: true
            },
            
            visit: {
                presence: true
            }
        }
    });

});
define('hospitalrun/models/lab', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/date-format', 'hospitalrun/utils/patient-validation', 'hospitalrun/mixins/result-validation'], function (exports, AbstractModel, DateFormat, PatientValidation, ResultValidation) {

    'use strict';

    exports['default'] = AbstractModel['default'].extend(DateFormat['default'], ResultValidation['default'], {
        charges: DS.hasMany('proc-charge'),
        labDate: DS.attr('date'),
        labType: DS.belongsTo('pricing'),
        notes: DS.attr('string'),
        patient: DS.belongsTo('patient'),
        requestedBy: DS.attr('string'),
        requestedDate: DS.attr('date'),
        result: DS.attr('string'),
        status: DS.attr('string'),
        visit: DS.belongsTo('visit'),
        
        labDateAsTime: function() {        
            return this.dateToTime(this.get('labDate'));
        }.property('labDate'),
        
        requestedDateAsTime: function() {
            return this.dateToTime(this.get('requestedDate'));
        }.property('requestedDate'),
        
        validations: {
            labTypeName: {
                presence: {
                    'if': function(object) {
                        if (object.get('isNew')) {
                            return true;
                        }
                    },
                    message: 'Please select a lab type'
                }
            },        
            patientTypeAhead: PatientValidation['default'].patientTypeAhead,
            patient: {
                presence: true
            }
        }
    });

});
define('hospitalrun/models/line-item-detail', ['exports', 'hospitalrun/models/abstract', 'ember', 'hospitalrun/mixins/number-format'], function (exports, AbstractModel, Ember, NumberFormat) {

   'use strict';

   exports['default'] = AbstractModel['default'].extend(NumberFormat['default'],{
       amountOwed: DS.attr('number'),
       department: DS.attr('string'),
       discount: DS.attr('number'),
       discountPercentage: DS.attr('number'),
       expenseAccount: DS.attr('string'),
       name: DS.attr('string'),
       price: DS.attr('number'),
       pricingItem: DS.belongsTo('pricing'),
       quantity: DS.attr('number'),
       total: DS.attr('number'),
       
       _calculateAmountOwed: function() {
           var amountOwed,
               discount = this.get('discount'),
               total = this.get('total');
           if (this._validNumber(total)) {
               if (this._validNumber(discount)) {            
                   amountOwed = this._numberFormat((total - discount), true);
               } else {
                   amountOwed = this._numberFormat(total, true);
               }            
           }
           this.set('amountOwed', amountOwed);
       },
       
       _calculateTotal: function() {
           var discountPercentage = this.get('discountPercentage'),
               price = this.get('price'),
               quantity = this.get('quantity'),
               total;
           if (this._validNumber(price) && this._validNumber(quantity)) {
               total = this._numberFormat((price * quantity), true);
               if (!Ember['default'].isEmpty(discountPercentage)) {
                   var discount = this._numberFormat((discountPercentage * total), true);
                   this.set('discount', discount);
               }
           }
           this.set('total', total);
       },
       
       amountOwedChanged: function() {
           Ember['default'].run.debounce(this, this._calculateAmountOwed,150);
       }.observes('discount', 'total'),
      
       totalChanged: function() {
           Ember['default'].run.debounce(this, this._calculateTotal,300);
       }.observes('price','quantity')

   });

});
define('hospitalrun/models/lookup', ['exports'], function (exports) {

    'use strict';

    exports['default'] = DS.Model.extend({
         _attachments: DS.attr(), //Temporarily store file as attachment until it gets uploaded to the server
        importFile: DS.attr('boolean', {defaultValue:false}),
        value: DS.attr(''),
        organizeByType: DS.attr('boolean'),
        userCanAdd: DS.attr('boolean')
    });

});
define('hospitalrun/models/medication', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/date-format', 'ember'], function (exports, AbstractModel, DateFormat, Ember) {

    'use strict';

    exports['default'] = AbstractModel['default'].extend(DateFormat['default'], {
        inventoryItem: DS.belongsTo('inventory'),
        notes: DS.attr('string'),
        patient: DS.belongsTo('patient'),
        prescription: DS.attr('string'),
        prescriptionDate: DS.attr('date'),
        quantity: DS.attr('number'),
        refills: DS.attr('number'),
        requestedDate: DS.attr('date'),
        requestedBy: DS.attr('string'),
        status: DS.attr('string'),
        visit: DS.belongsTo('visit'),
        
        isRequested: function() {
            var status = this.get('status');
            return (status === 'Requested');
        }.property('status'),
                
        prescriptionDateAsTime: function() {        
            return this.dateToTime(this.get('prescriptionDate'));
        }.property('prescriptionDate'),
        
        requestedDateAsTime: function() {
            return this.dateToTime(this.get('requestedDate'));
        }.property('requestedDate'),
        
        validations: {
            prescription: {
                acceptance: {
                    accept: true,
                    if: function(object) {
                        if (!object.get('isDirty') || object.get('isFulfilling')) {
                            return false;
                        }
                        var prescription = object.get('prescription'),
                            quantity = object.get('quantity');
                        if (Ember['default'].isEmpty(prescription) && Ember['default'].isEmpty(quantity)) {
                            //force validation to fail
                            return true;
                        } else {
                            return false;
                        }                    
                    },
                    message: 'Please enter a prescription or a quantity'
                }
            },
                    
            inventoryItemTypeAhead: {
                acceptance: {
                    accept: true,
                    if: function(object) {
                        if (!object.get('isDirty') || !object.get('isNew')) {
                            return false;
                        }
                        var itemName = object.get('inventoryItem.name'),
                            itemTypeAhead = object.get('inventoryItemTypeAhead');
                        if (Ember['default'].isEmpty(itemName) || Ember['default'].isEmpty(itemTypeAhead)) {
                            //force validation to fail
                            return true;
                        } else {
                            var typeAheadName = itemTypeAhead.substr(0, itemName.length);
                            if (itemName !== typeAheadName) {
                                return true;
                            }
                        }
                        //Inventory item is properly selected; don't do any further validation
                        return false;
                    }, 
                    message: 'Please select a valid medication'
                }
            },
            
            patientTypeAhead: {
                presence: {
                    if: function(object) {
                        return (object.get('selectPatient'));
                    }
                }
            },
            
            quantity: {
                numericality: {                
                    allowBlank: true,
                    greaterThan: 0
                },
                presence: {
                    if: function(object) {
                        var isFulfilling = object.get('isFulfilling');
                        return isFulfilling;
                    }
                },
                acceptance: {
                    accept: true,
                    if: function(object) {
                            var isFulfilling = object.get('isFulfilling'),
                                requestQuantity = parseInt(object.get('quantity')),
                                quantityToCompare = null;
                            if (!isFulfilling) {
                                //no validation needed when not fulfilling
                                return false;
                            } else {
                                quantityToCompare = object.get('inventoryItem.quantity');
                            }
                            if ( requestQuantity > quantityToCompare) {
                                //force validation to fail
                                return true;
                            } else {
                                //There is enough quantity on hand.
                                return false;
                            }
                    }, 
                    message: 'The quantity must be less than or equal to the number of available medication.'
                }            
            },
            
            refills: {
                numericality: {
                    allowBlank: true
                }
            }
        }
    });

});
define('hospitalrun/models/option', ['exports'], function (exports) {

    'use strict';

    exports['default'] = DS.Model.extend({
        value: DS.attr('')    
    });

});
define('hospitalrun/models/override-price', ['exports', 'hospitalrun/models/abstract'], function (exports, AbstractModel) {

    'use strict';


    exports['default'] = AbstractModel['default'].extend({
        profile: DS.belongsTo('price-profile'),
        price: DS.attr('number'),
        validations: {
            profile: {
                presence: true
            },
            price: {
                numericality: true
            }
        }
    });

});
define('hospitalrun/models/patient', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/dob-days', 'hospitalrun/utils/email-validation', 'ember', 'hospitalrun/mixins/patient-name'], function (exports, AbstractModel, DOBDays, EmailValidation, Ember, PatientName) {

    'use strict';

    exports['default'] = AbstractModel['default'].extend(DOBDays['default'], PatientName['default'], {
        admitted: DS.attr('boolean', {defaultValue: false}),
        additionalContacts: DS.attr(),
        additionalData: DS.attr(null,{defaultValue:{}}), //Additional data will be used to store custom data per install.
        address: DS.attr('string'),
        address2: DS.attr('string'),
        address3: DS.attr('string'),
        address4: DS.attr('string'),
        bloodType: DS.attr('string'),
        clinic: DS.attr('string'),
        country: DS.attr('string'),
        dateOfBirth: DS.attr('date'),
        economicClassification: DS.attr('string'),
        email: DS.attr('string'),
        expenses: DS.attr(),
        externalPatientId: DS.attr('string'),
        familySupport1: DS.attr('string'),
        familySupport2: DS.attr('string'),
        familySupport3: DS.attr('string'),
        familySupport4: DS.attr('string'),
        familySupport5: DS.attr('string'),
        friendlyId: DS.attr('string'),
        familyInfo: DS.attr(),
        firstName: DS.attr('string'),
        gender:  DS.attr('string'),
        history: DS.attr('string'),
        insurance: DS.attr('string'),
        lastName:  DS.attr('string'),
        livingArrangement: DS.attr('string'),
        middleName:  DS.attr('string'),
        notes: DS.attr('string'),  
        otherIncome: DS.attr('string'),
        payments: DS.hasMany('payment', { async: true }),
        patientType: DS.attr('string'),
        parent: DS.attr('string'),
        paymentProfile: DS.belongsTo('price-profile'),
        phone:  DS.attr('string'),
        placeOfBirth: DS.attr('string'),
        referredDate: DS.attr('date'),
        referredBy: DS.attr('string'),    
        religion: DS.attr('string'),
        socialActionTaken: DS.attr('string'),
        socialRecommendation: DS.attr('string'),
        status: DS.attr('string'),
        
        age: function() {
            var dob = this.get('dateOfBirth');
            return this.convertDOBToText(dob);
        }.property('dateOfBirth'),
        
        displayAddress: function() {
            var addressFields = this.getProperties('address', 'address2', 'address3', 'address4'),
                displayAddress = '';
            for (var prop in addressFields) {
                if (!Ember['default'].isEmpty(addressFields[prop])) {
                    if (!Ember['default'].isEmpty(displayAddress)) {
                        displayAddress += ', ';
                    }
                    displayAddress += addressFields[prop];
                }
            }
            return displayAddress;
        }.property('address', 'address2', 'address3', 'address4'),
        
        displayName: function() {
            return this.getPatientDisplayName(this);
        }.property('firstName', 'lastName', 'middleName'),
        
        displayPatientId: function() {
            return this.getPatientDisplayId(this);
        }.property('id', 'externalPatientId', 'friendlyId'),
        
        validations: {
            email: {
                format: { 
                    with: EmailValidation['default'].emailRegex, 
                    allowBlank: true, 
                    message: 'please enter a valid email address'
                }
            },
            friendlyId: {
                presence: true
            },
            firstName: {
                presence: true
            },
            lastName: {
                presence: true
            }
        }

    });

});
define('hospitalrun/models/payment', ['exports', 'hospitalrun/models/abstract'], function (exports, AbstractModel) {

    'use strict';

    exports['default'] = AbstractModel['default'].extend({
        amount: DS.attr('number'),
        charityPatient: DS.attr('boolean'), //Is patient a charity case
        expenseAccount: DS.attr('string'),
        invoice: DS.belongsTo('invoice'),    
        datePaid: DS.attr('date'),
        type: DS.attr('string'),
        notes: DS.attr('string'),
        
         validations: {
            amount: {
                numericality: true
            },
            datePaid: {
                presence: true
            }
        }
    });

});
define('hospitalrun/models/photo', ['exports', 'hospitalrun/models/abstract', 'ember'], function (exports, AbstractModel, Ember) {

    'use strict';

    exports['default'] = AbstractModel['default'].extend({
        _attachments: DS.attr(), //Temporarily store file as attachment until it gets uploaded to the server
        coverImage: DS.attr('boolean'),
        fileName: DS.attr('string'),
        localFile: DS.attr('boolean'),
        patient: DS.belongsTo('patient'),
        caption: DS.attr('string'),
        url: DS.attr('string'),
            
        downloadImageFromServer: function(imageRecord) {
            var me = this,
                url = imageRecord.get('url'),
                xhr = new XMLHttpRequest();
            if (!Ember['default'].isEmpty(url)) {
                //Make sure directory exists or is created before downloading.
                this.getPatientDirectory(imageRecord.get('patientId'));            
                xhr.open('GET', url, true);
                xhr.responseType = 'blob';
                xhr.onload = function() {  
                    var file = new Blob([xhr.response]);
                    me.addImageToFileStore(file, null, imageRecord);
                };
                xhr.send();
            }
        },
    });

});
define('hospitalrun/models/price-profile', ['exports', 'hospitalrun/models/abstract'], function (exports, AbstractModel) {

    'use strict';

    exports['default'] = AbstractModel['default'].extend({    
        name: DS.attr('string'),
        discountAmount: DS.attr('number'),
        discountPercentage: DS.attr('number'),
        
        validations: {
            name: {
                presence: true
            },        
            discountAmount: {
                numericality: {
                    allowBlank: true
                }
            },        
            discountPercentage: {
                numericality: {
                    allowBlank: true
                }
            }
        }
    });

});
define('hospitalrun/models/pricing', ['exports', 'hospitalrun/models/abstract'], function (exports, AbstractModel) {

    'use strict';

    exports['default'] = AbstractModel['default'].extend({
        category: DS.attr('string'),
        expenseAccount: DS.attr('string'),
        name: DS.attr('string'),
        price: DS.attr('number'),
        type: DS.attr('string'),
        pricingOverrides: DS.hasMany('override-price'),
            
        validations: {
            category: {
                presence: true
            },
            name: {
                presence: true
            },        
            price: {
                numericality: true
            }
        }
    });

});
define('hospitalrun/models/proc-charge', ['exports', 'hospitalrun/models/abstract', 'ember'], function (exports, AbstractModel, Ember) {

    'use strict';

    exports['default'] = AbstractModel['default'].extend({
        medication: DS.belongsTo('inventory'),
        pricingItem: DS.belongsTo('pricing'),    
        quantity: DS.attr('number'),
        dateCharged: DS.attr('date'),
        
        medicationCharge: function() {
            var medication = this.get('medication'),
                newMedicationCharge = this.get('newMedicationCharge');
            return (!Ember['default'].isEmpty(medication) || newMedicationCharge);
        }.property('medication'),
        
        inventoryItemChanged: function() {
            var inventoryItem = this.get('inventoryItem');        
            this.set('medication', inventoryItem);
        }.observes('inventoryItem'),
        
        validations: {
            itemName: {
                presence: true,
                acceptance: {
                    accept: true,
                    if: function(object) {
                        var medicationCharge = object.get('medicationCharge');
                        if (!medicationCharge || !object.get('isDirty')) {
                            return false;
                        }
                        var itemName = object.get('inventoryItem.name'),
                            itemTypeAhead = object.get('itemName');
                        if (Ember['default'].isEmpty(itemName) || Ember['default'].isEmpty(itemTypeAhead)) {
                            //force validation to fail
                            return true;
                        } else {
                            var typeAheadName = itemTypeAhead.substr(0, itemName.length);
                            if (itemName !== typeAheadName) {
                                return true;
                            }
                        }
                        //Inventory item is properly selected; don't do any further validation
                        return false;
                    }, 
                    message: 'Please select a valid medication'
                }
                
            },
            
            quantity: {
                numericality: {
                    greaterThan: 0,
                }
            }
        }
    });

});
define('hospitalrun/models/procedure', ['exports', 'hospitalrun/models/abstract'], function (exports, AbstractModel) {

    'use strict';

    exports['default'] = AbstractModel['default'].extend({
        anesthesiaType: DS.attr('string'),
        anesthesiologist: DS.attr('string'),
        assistant: DS.attr('string'),
        description: DS.attr('string'),
        charges: DS.hasMany('proc-charge'),
        cptCode: DS.attr('string'),
        location: DS.attr('string'),
        notes: DS.attr('string'),
        physician: DS.attr('string'),
        procedureDate: DS.attr('date'),
        timeStarted: DS.attr('string'),
        timeEnded: DS.attr('string'),
        visit: DS.belongsTo('visit'),
        
        validations: {
            description: {
                presence: true
            },
            
            oxygenHours: {
                numericality: {
                    allowBlank: true
                }                
            },
            pacuHours: {
                numericality: {
                    allowBlank: true
                }
            },
            physician: {
                presence: true            
            },
            procedureDate: {
                presence: true,
            },
            display_procedureDate: {
                presence: {
                    message: 'Please select a valid date' 
                }
            },
        }
    });

});
define('hospitalrun/models/sequence', ['exports'], function (exports) {

    'use strict';

    exports['default'] = DS.Model.extend({
        prefix: DS.attr('string'),
        value: DS.attr('number')    
    });

});
define('hospitalrun/models/social-expense', ['exports', 'ember', 'ember-validations'], function (exports, Ember, EmberValidations) {

    'use strict';

    /**
     * Model for social worker family info
     */
    exports['default'] = Ember['default'].Object.extend(EmberValidations['default'], {
        category: null,
        sources: null,
        cost: null,
        validations: {
            cost: {
                numericality: true
            },
        }
    });

});
define('hospitalrun/models/user', ['exports', 'hospitalrun/utils/email-validation', 'ember-validations'], function (exports, EmailValidation, EmberValidations) {

    'use strict';

    var User = DS.Model.extend(EmberValidations['default'], {
        derived_key: DS.attr('string'),
        displayName: DS.attr('string'),
        email: DS.attr('string'),
        iterations: DS.attr(),
        name: DS.attr('string'),
        password: DS.attr('string'),
        password_scheme: DS.attr('string'),
        password_sha: DS.attr('string'),
        rev: DS.attr('string'),
        roles: DS.attr(),
        salt: DS.attr('string'),
        userPrefix: DS.attr('string'),
        validations: {
            email: {
                format: { 
                    with: EmailValidation['default'].emailRegex,               
                    message: 'please enter a valid email address'
                }
            }
        }
    });

    exports['default'] = User;

});
define('hospitalrun/models/visit', ['exports', 'hospitalrun/models/abstract', 'ember'], function (exports, AbstractModel, Ember) {

    'use strict';

    function dateAcceptance(object) {
        if (!object.get('isDirty')) {
            return false;
        }
        var startDate = object.get('startDate'),
            endDate = object.get('endDate');
        if (Ember['default'].isEmpty(endDate) || Ember['default'].isEmpty(startDate)) {
            //Can't validate if empty
            return false;
        } else {
            if (endDate.getTime() <  startDate.getTime()) {
                return true;
            }
        }
        return false;
    }

    exports['default'] = AbstractModel['default'].extend({
        additionalDiagnoses: DS.attr(), //Yes, the plural of diagnosis is diagnoses!
        charges: DS.hasMany('proc-charge'),
        dischargeInfo: DS.attr('string'),
        endDate:  DS.attr('date'),  //if visit type is outpatient, startDate and endDate are equal 
        examiner: DS.attr('string'),
        history: DS.attr('string'),
        historySince: DS.attr('string'), //History since last seen
        imaging: DS.hasMany('imaging', {async: true}),
        labs: DS.hasMany('lab', {async: true}),
        location: DS.attr('string'),
        medication: DS.hasMany('medication', {async: true}),
        notes: DS.attr('string'),
        outPatient: DS.attr('boolean'),
        patient: DS.belongsTo('patient'),
        primaryDiagnosis: DS.attr('string'), //AKA admitting diagnosis
        primaryBillingDiagnosis: DS.attr('string'), //AKA final diagnosis
        primaryBillingDiagnosisId: DS.attr('string'),
        procedures: DS.hasMany('procedure', {async: true}),
        startDate:  DS.attr('date'),
        status: DS.attr('string'),
        visitType: DS.attr(),        
        vitals: DS.hasMany('vital', {async: true}),
        
        diagnosisList: function() {
            var additionalDiagnosis = this.get('additionalDiagnoses'),
                diagnosisList = [],
                primaryDiagnosis = this.get('primaryDiagnosis');
            if (!Ember['default'].isEmpty(primaryDiagnosis)) {
                diagnosisList.push(primaryDiagnosis);
            }
            if (!Ember['default'].isEmpty(additionalDiagnosis)) {
                diagnosisList.addObjects(additionalDiagnosis.map(function(diagnosis) {
                    return diagnosis.description;
                }));
            }
            return diagnosisList;
        }.property('additionalDiagnosis@each','primaryDiagnosis'),
                
        visitDate: function() {
            var endDate = this.get('endDate'),
                startDate = moment(this.get('startDate')),
                visitDate = startDate.format('l');
            if (!Ember['default'].isEmpty(endDate) && !startDate.isSame(endDate, 'day')) {
                visitDate += ' - ' + moment(endDate).format('l');                                                
            }
            return visitDate;
        }.property('startDate', 'endDate'),
        
        visitDescription: function() {
            var visitDate = this.get('visitDate'),
                visitType = this.get('visitType');
            return '%@ (%@)'.fmt(visitDate, visitType);
        }.property('visitDate', 'visitType'),
        
        validations: {
            endDate: {
                acceptance: {
                    accept: true,
                    if: dateAcceptance,    
                    message: 'Please select an end date later than the start date'
                }
            },
            
            startDate: {
                acceptance: {
                    accept: true,
                    if: dateAcceptance,    
                    message: 'Please select a start date earlier than the end date'
                },
                presence: true            
            },
            visitType: {
                presence: true
            }
            
        }

    });

});
define('hospitalrun/models/vital', ['exports', 'hospitalrun/models/abstract'], function (exports, AbstractModel) {

    'use strict';

    exports['default'] = AbstractModel['default'].extend({
        dateRecorded: DS.attr('date'),
        temperature: DS.attr('number'),
        weight: DS.attr('string'),
        height: DS.attr('string'),
        sbp: DS.attr('number'),
        dbp: DS.attr('number'),
        heartRate: DS.attr('number'),
        respiratoryRate: DS.attr('number'),
        validations: {
            temperature: {
                numericality: true
            },
            sbp: {
                numericality: true
            },
            dbp: {
                numericality: true
            },
            heartRate: {
                numericality: true
            },
            respiratoryRate: {
                numericality: true
            }
        }
    });

});
define('hospitalrun/patients/add-contact/controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled'], function (exports, Ember, IsUpdateDisabled) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend(IsUpdateDisabled['default'], {    
        needs: 'patients/edit',
        
        editController: Ember['default'].computed.alias('controllers.patients/edit'),
        title: 'Add Contact',
        updateButtonText: 'Add',
        updateButtonAction: 'add',
        showUpdateButton: true,
        
        actions: {
            cancel: function() {
                this.send('closeModal');
            },
            
            add: function() {
                var newContact = this.getProperties('name', 'phone', 'email', 'relationship');
                this.get('editController').send('addContact',newContact);
            }
        }
    });

});
define('hospitalrun/patients/add-contact/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Name"),
      'property': ("name")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Phone"),
      'property': ("phone")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Email"),
      'property': ("email")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Relationship"),
      'property': ("relationship")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/patients/add-contact/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/patients/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, AbstractDeleteController) {

     'use strict';

     exports['default'] = AbstractDeleteController['default'].extend({
          title: 'Delete Patient'
     });

});
define('hospitalrun/patients/delete/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1;


    data.buffer.push("<div class=\"alert alert-danger\">\n    <span class=\"glyphicon glyphicon-warning-sign\"></span> \n    Are you sure you wish to delete ");
    stack1 = helpers._triageMustache.call(depth0, "firstName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(" ");
    stack1 = helpers._triageMustache.call(depth0, "lastName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("?\n</div>");
    return buffer;
    
  });

});
define('hospitalrun/patients/delete/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/patients/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/blood-types', 'ember', 'hospitalrun/models/family-info', 'hospitalrun/mixins/gender-list', 'hospitalrun/mixins/pouch-adapter-utils', 'hospitalrun/mixins/return-to', 'hospitalrun/models/social-expense', 'hospitalrun/mixins/user-session'], function (exports, AbstractEditController, BloodTypes, Ember, FamilyInfoModel, GenderList, PouchAdapterUtils, ReturnTo, SocialExpenseModel, UserSession) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend(BloodTypes['default'], GenderList['default'], PouchAdapterUtils['default'], ReturnTo['default'], UserSession['default'], {
        
        canAddAppointment: function() {        
            return this.currentUserCan('add_appointment');
        }.property(),

        canAddContact: function() {
            return this.currentUserCan('add_patient');
        }.property(),

        canAddImaging: function() {
            return this.currentUserCan('add_imaging');
        }.property(),    

        canAddLab: function() {        
            return this.currentUserCan('add_lab');
        }.property(),    
        
        canAddMedication: function() {        
            return this.currentUserCan('add_medication');
        }.property(),
        
        canAddPhoto: function() {
            var isFileSystemEnabled = this.get('isFileSystemEnabled');
            return (this.currentUserCan('add_photo') && isFileSystemEnabled);
        }.property(),
        
        canAddSocialWork: function() {        
            return this.currentUserCan('add_socialwork');
        }.property(),
        
        canAddVisit: function() {        
            return this.currentUserCan('add_visit');
        }.property(),

        canDeleteAppointment: function() {        
            return this.currentUserCan('delete_appointment');
        }.property(), 
        
        canDeleteContact: function() {        
            return this.currentUserCan('add_patient');
        }.property(),
        
        canDeleteImaging: function() {
            return this.currentUserCan('delete_imaging');
        }.property(),        
        
        canDeleteLab: function() {        
            return this.currentUserCan('delete_lab');
        }.property(),        
        
        canDeleteMedication: function() {        
            return this.currentUserCan('delete_medication');
        }.property(),
        
        canDeletePhoto: function() {        
            return this.currentUserCan('delete_photo');
        }.property(),    
        
        canDeleteSocialWork: function() {        
            return this.currentUserCan('delete_socialwork');
        }.property(),

        canDeleteVisit: function() {        
            return this.currentUserCan('delete_visit');
        }.property(),
        
        economicClassificationTypes: [
            'A',
            'B',
            'C1',
            'C2',
            'C3',
            'D'
        ],

        livingArrangementList: [
            'Homeless',
            'Institution',
            'Owned',
            'Rent',
            'Shared'
        ],
        
        patientTypes: [
            'Charity',
            'Private'
        ],
        
        philhealthTypes: [         
            'Employed: Government',
            'Employed: Non Paying Member/Lifetime',
            'Employed: OWWA/OFW',
            'Employed: Private',
            'Employed: Sponsored/Indigent',
            'Self Employed'      
        ],    
        
        
        primaryDiagnosisIdChanged: function() {
            this.get('model').validate();
        }.observes('primaryDiagnosisId'),
        
        needs: ['filesystem','pouchdb','patients'],

        addressOptions: Ember['default'].computed.alias('controllers.patients.addressOptions'),
        address1Include: Ember['default'].computed.alias('controllers.patients.addressOptions.value.address1Include'),
        address1Label: Ember['default'].computed.alias('controllers.patients.addressOptions.value.address1Label'),
        address2Include: Ember['default'].computed.alias('controllers.patients.addressOptions.value.address2Include'),
        address2Label: Ember['default'].computed.alias('controllers.patients.addressOptions.value.address2Label'),
        address3Include: Ember['default'].computed.alias('controllers.patients.addressOptions.value.address3Include'),
        address3Label: Ember['default'].computed.alias('controllers.patients.addressOptions.value.address3Label'),
        address4Include: Ember['default'].computed.alias('controllers.patients.addressOptions.value.address4Include'),
        address4Label: Ember['default'].computed.alias('controllers.patients.addressOptions.value.address4Label'),

        clinicList: Ember['default'].computed.alias('controllers.patients.clinicList'),
        countryList: Ember['default'].computed.alias('controllers.patients.countryList'),
        fileSystem: Ember['default'].computed.alias('controllers.filesystem'),
        isFileSystemEnabled: Ember['default'].computed.alias('controllers.filesystem.isFileSystemEnabled'),
        patientController: Ember['default'].computed.alias('controllers.patients'),
        pricingProfiles: Ember['default'].computed.alias('controllers.patients.pricingProfiles'),
        statusList: Ember['default'].computed.alias('controllers.patients.statusList'),
        
        haveAdditionalContacts: function() {
            var additionalContacts = this.get('additionalContacts');
            return (!Ember['default'].isEmpty(additionalContacts));
        }.property('additionalContacts'),

        haveAddressOptions: function() {
            var addressOptions = this.get('addressOptions');
            return (!Ember['default'].isEmpty(addressOptions));
        }.property('addressOptions'),    

        lookupListsToUpdate: [{
            name: 'countryList',
            property: 'country',
            id: 'country_list'
        }, {
            name: 'clinicList',
            property: 'clinic',
            id: 'clinic_list'
        }, {
            name: 'statusList',
            property: 'status',
            id: 'patient_status_list'
        }],
        
        patientImaging: function() {
            return this._getVisitCollection('imaging');
        }.property('visits.@each.imaging'),    
        
        patientLabs: function() {
            return this._getVisitCollection('labs');
        }.property('visits.@each.labs'),
        
        patientMedications: function() {
            return this._getVisitCollection('medication');
        }.property('visits.@each.medication'),
        
        patientProcedures: function() {
            return this._getVisitCollection('procedures');
        }.property('visits.@each.procedures'),
        
        showExpenseTotal: true,
        
        totalExpenses: function() {
            var expenses = this.get('expenses');
            if (!Ember['default'].isEmpty(expenses)) {
                var total = expenses.reduce(function(previousValue, expense) {
                    if (!Ember['default'].isEmpty(expense.cost)) {
                        return previousValue +  parseInt(expense.cost);
                    }
                }, 0); 
                this.set('showExpenseTotal', true);
                return total;
            } else {
                this.set('showExpenseTotal', false);
            }
        }.property('expenses'),    

        updateCapability: 'add_patient',

        actions: {
            addContact: function(newContact) {
                var additionalContacts = this.getWithDefault('additionalContacts', []);
                additionalContacts.addObject(newContact);
                this.set('additionalContacts', additionalContacts);
                this.send('update', true);
                this.send('closeModal');            
            },

            /**
             * Add the specified photo to the patient's record.
             * @param {File} photoFile the photo file to add.
             * @param {String} caption the caption to store with the photo.
             * @param {boolean} coverImage flag indicating if image should be marked as the cover image (currently unused).
             */
            addPhoto: function(photoFile, caption, coverImage) {
                var dirToSaveTo = this.get('id') + '/photos/',
                    fileSystem = this.get('fileSystem'),
                    photos = this.get('photos'),
                    newPatientPhoto = this.get('store').createRecord('photo', {
                        patient: this.get('model'),                    
                        localFile: true,
                        caption: caption,
                        coverImage: coverImage,
                    });
                var pouchDbId = this._idToPouchId(newPatientPhoto.get('id'), 'photo');
                fileSystem.addFile(photoFile, dirToSaveTo, pouchDbId).then(function(fileEntry) {
                    fileSystem.fileToDataURL(photoFile).then(function(photoDataUrl) {                        
                        var dataUrlParts = photoDataUrl.split(',');
                        newPatientPhoto.setProperties({
                            fileName: fileEntry.fullPath,
                            url: fileEntry.toURL(),
                            _attachments: {
                                file: {
                                    content_type: photoFile.type,
                                    data: dataUrlParts[1]
                                }
                            }                    
                        });                        
                        newPatientPhoto.save().then(function() {
                            photos.addObject(newPatientPhoto);
                            this.send('closeModal');
                        }.bind(this));
                    }.bind(this));            
                }.bind(this));            
            },
            
            appointmentDeleted: function(deletedAppointment) {
                var appointments = this.get('appointments');            
                appointments.removeObject(deletedAppointment);
                this.send('closeModal');
            },
            
            deleteContact: function(model) {
                var contact = model.get('contactToDelete');
                var additionalContacts = this.get('additionalContacts');
                additionalContacts.removeObject(contact);
                this.set('additionalContacts', additionalContacts);
                this.send('update', true);
            },

            deleteExpense: function(model) {
                var expense = model.get('expenseToDelete'),
                    expenses = this.get('expenses');
                expenses.removeObject(expense);
                this.set('expenses', expenses);
                this.send('update', true);
            },

            deleteFamily: function(model) {
                var family = model.get('familyToDelete'),
                    familyInfo = this.get('familyInfo');
                familyInfo.removeObject(family);
                this.set('familyInfo', familyInfo);
                this.send('update', true);
            },

            deletePhoto: function(model) {
                var photo = model.get('photoToDelete'),
                    photoId = model.get('id'),
                    photos = this.get('photos'),
                    filePath = photo.get('fileName');
                photos.removeObject(photo);
                photo.destroyRecord().then(function() {
                    var fileSystem = this.get('fileSystem'),
                        isFileSystemEnabled = this.get('isFileSystemEnabled');
                    if (isFileSystemEnabled) {
                        var pouchDbId = this._idToPouchId(photoId, 'photo');
                        fileSystem.deleteFile(filePath, pouchDbId);
                    }
                }.bind(this));
            },
            
            editAppointment: function(appointment) {
                appointment.set('returnToPatient', true);
                this.transitionToRoute('appointments.edit', appointment);
            },

            editImaging: function(imaging) {
                imaging.setProperties({
                    'isCompleting': false,
                    'returnToPatient': true
                });
                this.transitionToRoute('imaging.edit', imaging);
            },        
            
            editLab: function(lab) {
                lab.setProperties({
                    'isCompleting': false,
                    'returnToPatient': true
                });
                this.transitionToRoute('labs.edit', lab);
            },        
            
            editMedication: function(medication) {
                medication.set('returnToPatient', true);
                this.transitionToRoute('medication.edit', medication);
            },    
            
            editPhoto: function(photo) {        
                this.send('openModal', 'patients.photo', photo);
            },
            
            editProcedure: function(procedure) {
                this.transitionToRoute('procedures.edit', procedure);
            },
            
            editVisit: function(visit) {
                this.transitionToRoute('visits.edit', visit);
            },
            
            newAppointment: function() {
                var now = moment().hours(8).minutes(0).seconds(0).toDate();
                var newAppointment = this.get('store').createRecord('appointment', {
                    patient: this.get('model'),
                    startDate: now,
                    endDate: now
                });
                newAppointment.set('returnToPatient', true);
                this.transitionToRoute('appointments.edit', newAppointment);
            },

            newImaging: function() {
                var newImaging = this.get('store').createRecord('imaging', {
                    isCompleting: false,
                    patient: this.get('model'),
                    returnToPatient: true
                });            
                this.transitionToRoute('imaging.edit', newImaging);
            },
            
            newLab: function() {
                var newLab = this.get('store').createRecord('lab', {
                    isCompleting: false,
                    patient: this.get('model'),
                    returnToPatient: true
                });            
                this.transitionToRoute('labs.edit', newLab);
            },
            
            newMedication: function() {
                var newMedication = this.get('store').createRecord('medication', {
                    prescriptionDate: moment().startOf('day').toDate(),
                    patient: this.get('model'),
                    returnToPatient: true
                });
                this.transitionToRoute('medication.edit', newMedication);
            },
            
            newVisit: function() {
                var patient = this.get('model'),
                    visits = this.get('visits');
                this.send('createNewVisit', patient, visits);
            },     

            showAddContact: function() {
                this.send('openModal', 'patients.add-contact', {});            
            },

            showAddPhoto: function() {
                this.send('openModal', 'patients.photo', {
                    isNew: true
                });
            },        
            
            showDeleteAppointment: function(appointment) {
                appointment.set('deleteFromPatient', true);
                this.send('openModal', 'appointments.delete', appointment);
            },
            
            showDeleteContact: function(contact) {
                this.send('openModal', 'dialog', Ember['default'].Object.create({
                    confirmAction: 'deleteContact',
                    title: 'Delete Contact',
                    message: 'Are you sure you want to delete this contact?',
                    contactToDelete: contact,
                    updateButtonAction: 'confirm',
                    updateButtonText: 'Ok'
                }));                    
            },        
        
            showDeleteExpense: function(expense) {
                this.send('openModal', 'dialog', Ember['default'].Object.create({
                    confirmAction: 'deleteExpense',
                    title: 'Delete Expense',
                    message: 'Are you sure you want to delete this expense?',
                    expenseToDelete: expense,
                    updateButtonAction: 'confirm',
                    updateButtonText: 'Ok'
                }));   
            },
            
            showDeleteFamily: function(familyInfo) {
                this.send('openModal', 'dialog', Ember['default'].Object.create({
                    confirmAction: 'deleteFamily',
                    title: 'Delete Family Member',
                    message: 'Are you sure you want to delete this family member?',
                    familyToDelete: familyInfo,
                    updateButtonAction: 'confirm',
                    updateButtonText: 'Ok'
                }));   
                
            },

            showDeleteImaging: function(imaging) {
                this.send('openModal', 'imaging.delete', imaging);
            },
            
            showDeleteLab: function(lab) {
                this.send('openModal', 'labs.delete', lab);
            },

            showDeleteMedication: function(medication) {
                this.send('openModal', 'medication.delete', medication);
            },
            
            showDeletePhoto: function(photo) {
                this.send('openModal', 'dialog', Ember['default'].Object.create({
                    confirmAction: 'deletePhoto',
                    title: 'Delete Photo',
                    message: 'Are you sure you want to delete this photo?',
                    photoToDelete: photo,
                    updateButtonAction: 'confirm',
                    updateButtonText: 'Ok'
                }));
            },

            showDeleteVisit: function(visit) {
                visit.set('deleteFromPatient', true);
                this.send('openModal', 'visits.delete', visit);
            },
        
            showEditExpense: function(model) {
                if (Ember['default'].isEmpty(model)) {
                    model = SocialExpenseModel['default'].create({isNew:true});
                }
                 this.send('openModal', 'patients.socialwork.expense', model);            
            },
            
            showEditFamily: function(model) {
                if (Ember['default'].isEmpty(model)) {
                    model = FamilyInfoModel['default'].create({isNew:true});
                }
                this.send('openModal', 'patients.socialwork.family-info', model);
            },
            
            updateExpense: function(model) {
                var expenses = this.getWithDefault('expenses', []),
                    isNew = model.isNew;
                if (isNew) {                
                    delete model.isNew;
                    expenses.addObject(model);                
                }
                this.set('expenses', expenses);
                this.send('update', true);
                this.send('closeModal');
            },        

            updateFamilyInfo: function(model) {
                var familyInfo = this.getWithDefault('familyInfo',[]),
                    isNew = model.isNew;
                if (isNew) {
                    delete model.isNew;
                    familyInfo.addObject(model);
                    this.set('familyInfo', familyInfo);
                }
                this.send('update', true);
                this.send('closeModal');
            },

            updatePhoto: function(photo) {
                photo.save().then(function() {
                    this.send('closeModal');
                }.bind(this));            
            },
            
            visitDeleted: function(deletedVisit) {
                var visits = this.get('visits');
                visits.removeObject(deletedVisit);
                this.send('closeModal');
            }
            
        },
        
        _getVisitCollection: function(name) {
            var returnList = [],
                visits = this.get('visits');
            if (!Ember['default'].isEmpty(visits)) {
                visits.forEach(function(visit) {
                    visit.get(name).then(function(items) {
                        returnList.addObjects(items);
                        if (returnList.length > 0) {
                            returnList[0].set('first', true);
                        }                    
                    });
                });
            }
            return returnList;        
        },
        
        beforeUpdate: function() {
            //Make sure payments async relationship is loaded before saving.
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                this.get('payments').then(resolve, reject);
            }.bind(this));
        },
        
        afterUpdate: function(record) {
            var message =  'The patient record for %@ has been saved.'.fmt(record.get('displayName'));
            this.displayAlert('Patient Saved', message);        
        }
        
    });

});
define('hospitalrun/patients/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'hospitalrun/mixins/patient-id', 'hospitalrun/mixins/patient-visits', 'hospitalrun/mixins/pouchdb'], function (exports, AbstractEditRoute, Ember, PatientId, PatientVisits, PouchDbMixin) {

    'use strict';

    exports['default'] = AbstractEditRoute['default'].extend(PatientId['default'], PatientVisits['default'], PouchDbMixin['default'], {
        editTitle: 'Edit Patient',
        modelName: 'patient',
        newTitle: 'New Patient',
        photos: null,

        actions: {
            appointmentDeleted: function(model) {
                this.controller.send('appointmentDeleted', model);
            },
            
            deleteContact: function(model) {
                this.controller.send('deleteContact', model);
            },
            
            deleteExpense: function(model) {
                this.controller.send('deleteExpense', model);
            },         
            
            deleteFamily: function(model) {
                this.controller.send('deleteFamily', model);
            },        
            
            deletePhoto: function(model) {
                this.controller.send('deletePhoto', model);
            },
            
            updateExpense: function(model) {
                this.controller.send('updateExpense', model);
            },
            
            updateFamilyInfo: function(model) {
                this.controller.send('updateFamilyInfo', model);
            },
            
            visitDeleted: function(model) {
                this.controller.send('visitDeleted', model);
            }
        },
        
        getNewData: function() {
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                this.generateFriendlyId().then(function(friendlyId) {
                    resolve({
                        friendlyId: friendlyId
                    });
                },reject);
            }.bind(this));
        },
        
        setupController: function(controller, model) {
            //Load appointments, photos and visits asynchronously.
            var friendlyId = model.get('friendlyId'),
                externalId = model.get('externalPatientId'),
                maxValue = this.get('maxValue'),            
                patientId = 'patient_'+model.get('id');
            if (Ember['default'].isEmpty(friendlyId) && !Ember['default'].isEmpty(externalId)) {
                model.set('friendlyId', externalId);
            }
            this._super(controller, model);
            this.getPatientVisits(model).then(function(visits) {
                controller.set('visits', visits);
            });
            this.store.find('appointment', {
                options: {
                    startkey: [patientId, null, null, 'appointment_'],
                    endkey: [patientId, maxValue, maxValue, maxValue]
                },
                mapReduce: 'appointments_by_patient'
            }).then(function(appointments) {
                controller.set('appointments', appointments);
            });
            this.store.find('photo', {
                options: {
                    key: patientId            
                },
                mapReduce: 'photo_by_patient'
            }).then(function(photos) {
                controller.set('photos', photos);
            });
        }
        
    });

});
define('hospitalrun/patients/edit/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    ");
    stack1 = helpers.unless.call(depth0, "isNewOrDeleted", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    <div class=\"tab-content\">\n        <div role=\"tabpanel\" class=\"tab-pane active\" id=\"general\">        \n            <div class=\"panel detail-section\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">\n                            General Information\n                    </h3>\n                </div>\n\n                <div class=\"panel-body detail-section-content\">\n                    <div class=\"row\">\n                        <div class=\"col-xs-12 col-sm-6\">\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("friendlyId"),
      'label': ("Id"),
      'class': ("required")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("firstName"),
      'label': ("First Name"),
      'class': ("required")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("middleName"),
      'label': ("Middle Name")
    },hashTypes:{'property': "STRING",'label': "STRING"},hashContexts:{'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("lastName"),
      'label': ("Last Name"),
      'class': ("required")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n                            <div class=\"form-group\">\n                                <label>Gender</label>\n                                <div>\n                                    ");
    data.buffer.push(escapeExpression((helper = helpers['ext-radio'] || (depth0 && depth0['ext-radio']),options={hash:{
      'name': ("gender"),
      'content': ("genderList"),
      'value': ("gender"),
      'showInline': (true)
    },hashTypes:{'name': "ID",'content': "ID",'value': "ID",'showInline': "BOOLEAN"},hashContexts:{'name': depth0,'content': depth0,'value': depth0,'showInline': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "ext-radio", options))));
    data.buffer.push("\n                                </div>\n                            </div>\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("dateOfBirth"),
      'label': ("Date of Birth"),
      'maxDate': ("now")
    },hashTypes:{'property': "STRING",'label': "STRING",'maxDate': "STRING"},hashContexts:{'property': depth0,'label': depth0,'maxDate': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n                            <div class=\"form-group\">\n                                <label class=\"control-label\">Age</label>\n                                <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "age", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n                            </div>\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("placeOfBirth"),
      'label': ("Place of Birth")
    },hashTypes:{'property': "STRING",'label': "STRING"},hashContexts:{'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n                            <div class=\"form-group\">\n                                <label>Patient Type</label>\n                                <div>\n                                    ");
    data.buffer.push(escapeExpression((helper = helpers['ext-radio'] || (depth0 && depth0['ext-radio']),options={hash:{
      'name': ("patientType"),
      'content': ("patientTypes"),
      'value': ("patientType"),
      'showInline': (true),
      'radioLabelPath': ("content"),
      'radioValuePath': ("content")
    },hashTypes:{'name': "ID",'content': "ID",'value': "ID",'showInline': "BOOLEAN",'radioLabelPath': "STRING",'radioValuePath': "STRING"},hashContexts:{'name': depth0,'content': depth0,'value': depth0,'showInline': depth0,'radioLabelPath': depth0,'radioValuePath': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "ext-radio", options))));
    data.buffer.push("\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-xs-12 col-sm-6\">\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("status"),
      'label': ("Patient Status"),
      'list': ("statusList"),
      'selection': ("status")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("externalPatientId"),
      'label': ("External Patient Id")
    },hashTypes:{'property': "STRING",'label': "STRING"},hashContexts:{'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'prompt': (" "),
      'label': ("Blood Type"),
      'property': ("bloodType"),
      'content': ("bloodTypes"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content")
    },hashTypes:{'prompt': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING"},hashContexts:{'prompt': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("clinic"),
      'label': ("Clinic Site"),
      'list': ("clinicList"),
      'selection': ("clinic")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("referredBy"),
      'label': ("Referred By")
    },hashTypes:{'property': "STRING",'label': "STRING"},hashContexts:{'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("referredDate"),
      'label': ("Referred Date")
    },hashTypes:{'property': "STRING",'label': "STRING"},hashContexts:{'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("                            \n                            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("religion"),
      'label': ("Religion")
    },hashTypes:{'property': "STRING",'label': "STRING"},hashContexts:{'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("                            \n                            ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("parent"),
      'label': ("Parent/Guardian")
    },hashTypes:{'property': "STRING",'label': "STRING"},hashContexts:{'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'label': ("Payment Profile"),
      'property': ("paymentProfile"),
      'content': ("pricingProfiles"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content.name"),
      'prompt': (" ")
    },hashTypes:{'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'prompt': "STRING"},hashContexts:{'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'prompt': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("                            \n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"panel detail-section\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">\n                            Address/Contact Information\n                            ");
    stack1 = helpers['if'].call(depth0, "canAddContact", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    </h3>\n                </div>\n\n                <div class=\"panel-body detail-section-content\">\n                    <div class=\"row\">\n\n                        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("phone"),
      'label': ("Phone Contact"),
      'class': ("col-xs-12 col-sm-6")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n                        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("email"),
      'type': ("email"),
      'label': ("Email"),
      'class': ("col-xs-12 col-sm-6")
    },hashTypes:{'property': "STRING",'type': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'type': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n                        ");
    stack1 = helpers['if'].call(depth0, "haveAddressOptions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(16, program16, data),fn:self.program(7, program7, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("country"),
      'label': ("Country"),
      'list': ("countryList"),
      'selection': ("country"),
      'class': ("col-xs-12 col-sm-6")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n\n                    </div>\n                </div>\n                ");
    stack1 = helpers['with'].call(depth0, "", "as", "patientController", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(18, program18, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </div>\n        </div>\n        ");
    stack1 = helpers.unless.call(depth0, "isNewOrDeleted", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(25, program25, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </div>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['patient-summary'] || (depth0 && depth0['patient-summary']),options={hash:{
      'patient': ("model"),
      'visits': ("visits"),
      'patientProcedures': ("patientProcedures"),
      'disablePatientLink': (true)
    },hashTypes:{'patient': "ID",'visits': "ID",'patientProcedures': "ID",'disablePatientLink': "BOOLEAN"},hashContexts:{'patient': depth0,'visits': depth0,'patientProcedures': depth0,'disablePatientLink': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "patient-summary", options))));
    data.buffer.push("\n        <ul class=\"nav nav-pills\" role=\"tablist\">\n            <li role=\"presentation\" class=\"active\" ><a class=\"active\" href=\"#general\" role=\"tab\" data-toggle=\"pill\">General</a></li>\n            <li role=\"presentation\"><a href=\"#photos\" role=\"tab\" data-toggle=\"pill\">Photos</a></li>            \n            <li role=\"presentation\"><a href=\"#medication\" role=\"tab\" data-toggle=\"pill\">Medication</a></li>\n            <li role=\"presentation\"><a href=\"#imaging\" role=\"tab\" data-toggle=\"pill\">Imaging</a></li>\n            <li role=\"presentation\"><a href=\"#labs\" role=\"tab\" data-toggle=\"pill\">Labs</a></li>\n            <li role=\"presentation\"><a href=\"#visits\" role=\"tab\" data-toggle=\"pill\">Visits/Appointments</a></li>\n            ");
    stack1 = helpers['if'].call(depth0, "canAddSocialWork", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        </ul>\n    ");
    return buffer;
    }
  function program3(depth0,data) {
    
    
    data.buffer.push("\n                <li role=\"presentation\"><a href=\"#social\" role=\"tab\" data-toggle=\"pill\">Social Work</a></li>\n            ");
    }

  function program5(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                <button type=\"button\" class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showAddContact", {hash:{
      'bubbles': (false),
      'on': ("click")
    },hashTypes:{'bubbles': "BOOLEAN",'on': "STRING"},hashContexts:{'bubbles': depth0,'on': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span>Add Contact</button>\n                            ");
    return buffer;
    }

  function program7(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                            ");
    stack1 = helpers['if'].call(depth0, "address1Include", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("                                \n                            ");
    stack1 = helpers['if'].call(depth0, "address2Include", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                            ");
    stack1 = helpers['if'].call(depth0, "address3Include", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(12, program12, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                            ");
    stack1 = helpers['if'].call(depth0, "address4Include", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(14, program14, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("                            \n                        ");
    return buffer;
    }
  function program8(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                                ");
    data.buffer.push(escapeExpression((helper = helpers['em-text'] || (depth0 && depth0['em-text']),options={hash:{
      'label': ("address1Label"),
      'property': ("address"),
      'rows': (3),
      'class': ("col-xs-12 col-sm-6")
    },hashTypes:{'label': "ID",'property': "STRING",'rows': "INTEGER",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'rows': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-text", options))));
    data.buffer.push("\n                            ");
    return buffer;
    }

  function program10(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                                ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("address2Label"),
      'property': ("address2"),
      'class': ("col-xs-12 col-sm-6")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n                            ");
    return buffer;
    }

  function program12(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                                ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("address3Label"),
      'property': ("address3"),
      'class': ("col-xs-12 col-sm-6")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n                            ");
    return buffer;
    }

  function program14(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                                ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("address4Label"),
      'property': ("address4"),
      'class': ("col-xs-12 col-sm-6")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n                            ");
    return buffer;
    }

  function program16(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['em-text'] || (depth0 && depth0['em-text']),options={hash:{
      'label': ("Address"),
      'property': ("address"),
      'rows': (3),
      'class': ("col-xs-12 col-sm-6")
    },hashTypes:{'label': "STRING",'property': "STRING",'rows': "INTEGER",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'rows': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-text", options))));
    data.buffer.push("\n                        ");
    return buffer;
    }

  function program18(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                    ");
    stack1 = helpers['if'].call(depth0, "haveAdditionalContacts", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(19, program19, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                ");
    return buffer;
    }
  function program19(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                        <h4>Additional Contacts</h4>\n                        <table class=\"table\">\n                            <tr class=\"table-header\">\n                                <th>Name</th>\n                                <th>Phone</th>\n                                <th>Email</th>\n                                <th>Relationship</th>\n                                ");
    stack1 = helpers['if'].call(depth0, "parentController.canDeleteContact", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(20, program20, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                            </tr>\n                            ");
    stack1 = helpers.each.call(depth0, "additionalContacts", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(22, program22, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </table>                \n                    ");
    return buffer;
    }
  function program20(depth0,data) {
    
    
    data.buffer.push("\n                                    <th>Action</th>\n                                ");
    }

  function program22(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                <tr>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "phone", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "email", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "relationship", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    ");
    stack1 = helpers['if'].call(depth0, "patientController.canDeleteContact", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(23, program23, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                </tr>\n                            ");
    return buffer;
    }
  function program23(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                        <td>\n                                            <button type=\"button\" class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showDeleteContact", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span>Delete</button>\n                                        </td>\n                                    ");
    return buffer;
    }

  function program25(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            <div role=\"tabpanel\" class=\"tab-pane\" id=\"photos\">\n                <div class=\"panel\">    \n                    <div class=\"panel-heading\">\n                        <h3 class=\"panel-title\">\n\n                            Photos\n                            ");
    stack1 = helpers['if'].call(depth0, "canAddPhoto", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(26, program26, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("                \n                        </h3>\n                    </div>\n                    <div class=\"panel-body detail-section-content\">\n                        <div class=\"row\">\n                            ");
    stack1 = helpers.each.call(depth0, "photos", {hash:{
      'itemController': ("patients/photo-item")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(28, program28, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div role=\"tabpanel\" class=\"tab-pane\" id=\"medication\">\n                <div class=\"panel\">\n                    <div class=\"panel-heading\">\n                        <h3 class=\"panel-title\">\n                            Medication\n                            ");
    stack1 = helpers['if'].call(depth0, "canAddMedication", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(33, program33, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </h3>\n                    </div>\n                    <div class=\"panel-body detail-section-content\">\n                        <table class=\"table\">\n                            <tr class=\"table-header\">\n                                <th>Date</th>\n                                <th>Name</th>\n                                <th>Status</th>\n                                <th>Prescription</th>\n                                <th>Requested By</th>\n                                <th>Actions</th>\n                            </tr>\n                            ");
    stack1 = helpers.each.call(depth0, "patientMedications", {hash:{
      'itemController': ("medication/item-controller")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(35, program35, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </table>\n                    </div>\n                </div>\n            </div>\n            <div role=\"tabpanel\" class=\"tab-pane\" id=\"imaging\">\n                <div class=\"panel\">\n                    <div class=\"panel-heading\">\n                        <h3 class=\"panel-title\">\n                            Imaging\n                            ");
    stack1 = helpers['if'].call(depth0, "canAddImaging", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(41, program41, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </h3>\n                    </div>\n                    <div class=\"panel-body detail-section-content\">\n                        <table class=\"table\">\n                            <tr class=\"table-header\">\n                                <th>Date Requested</th>\n                                <th>Imaging Type</th>\n                                <th>Status</th>\n                                <th>Date Processed</th>\n                                <th>Result</th>\n                                <th>Notes</th>\n                                <th>Requested By</th>\n                                <th>Actions</th>\n                            </tr>\n                            ");
    stack1 = helpers.each.call(depth0, "patientImaging", {hash:{
      'itemController': ("imaging/item-controller")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(43, program43, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </table>\n                    </div>\n                </div>\n            </div>\n            <div role=\"tabpanel\" class=\"tab-pane\" id=\"labs\">\n                <div class=\"panel\">\n                    <div class=\"panel-heading\">\n                        <h3 class=\"panel-title\">\n                            Labs\n                            ");
    stack1 = helpers['if'].call(depth0, "canAddLab", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(49, program49, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </h3>\n                    </div>\n\n                    <div class=\"panel-body detail-section-content\">\n                        <table class=\"table\">\n                            <tr class=\"table-header\">\n                                <th>Date Requested</th>\n                                <th>Lab Type</th>\n                                <th>Status</th>\n                                <th>Date Processed</th>\n                                <th>Result</th>\n                                <th>Notes</th>\n                                <th>Requested By</th>\n                                <th>Actions</th>\n                            </tr>\n                            ");
    stack1 = helpers.each.call(depth0, "patientLabs", {hash:{
      'itemController': ("labs/item-controller")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(51, program51, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </table>\n                    </div>\n                </div>\n            </div>\n            <div role=\"tabpanel\" class=\"tab-pane\" id=\"visits\">\n                <div class=\"panel\">\n                    <div class=\"panel-heading\">\n                        <h3 class=\"panel-title\">\n                            Visits\n                            ");
    stack1 = helpers['if'].call(depth0, "canAddVisit", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(57, program57, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </h3>\n                    </div>\n\n                    <div class=\"panel-body detail-section-content\">\n                        <table class=\"table\" >\n                            <tr class=\"table-header\">\n                                <th>Start Date</th>\n                                <th>End Date</th>\n                                <th>Diagnosis</th>\n                                <th>Provider</th>\n                                <th>Location</th>\n                                <th>Type</th>\n                                <th>Actions</th>\n                            </tr>\n                            ");
    stack1 = helpers['with'].call(depth0, "", "as", "patientController", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(59, program59, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </table>\n                    </div>\n                </div>\n                <div class=\"panel\">\n                    <div class=\"panel-heading\">\n                        <h3 class=\"panel-title\">\n                            Appointments\n                            ");
    stack1 = helpers['if'].call(depth0, "canAddAppointment", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(65, program65, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </h3>\n                    </div>\n                    <div class=\"panel-body detail-section-content\">\n                        <table class=\"table\">\n                            <tr class=\"table-header\">\n                                <th>Date</th>\n                                <th>Examiner</th>\n                                <th>Location</th>\n                                <th>Type</th>\n                                <th>Status</th>\n                                <th>Actions</th>\n                            </tr>\n                            ");
    stack1 = helpers['with'].call(depth0, "", "as", "patientController", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(67, program67, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </table>\n                    </div>\n                </div>\n            </div>\n            ");
    stack1 = helpers['if'].call(depth0, "canAddSocialWork", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(73, program73, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    return buffer;
    }
  function program26(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                <button type=\"button\" class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showAddPhoto", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span>New Photo</button>\n                            ");
    return buffer;
    }

  function program28(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                <div class=\"col-sm-4 col-md-3\">                                \n                                     <div ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editPhoto", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(" class=\"thumbnail\">\n                                        <img ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'alt': ("caption"),
      'src': ("photoUrl")
    },hashTypes:{'alt': "STRING",'src': "STRING"},hashContexts:{'alt': depth0,'src': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(" class=\"img-responsive\" >\n                                        <div class=\"caption\">\n                                            ");
    stack1 = helpers._triageMustache.call(depth0, "caption", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                            <p>\n                                                ");
    stack1 = helpers['if'].call(depth0, "parentController.canAddPhoto", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(29, program29, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                                ");
    stack1 = helpers['if'].call(depth0, "parentController.canDeletePhoto", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(31, program31, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                            </p>\n                                        </div>\n                                    </div>\n                                </div>\n                            ");
    return buffer;
    }
  function program29(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                                    <button type=\"button\" class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editPhoto", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                                                ");
    return buffer;
    }

  function program31(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                                    <button type=\"button\" class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showDeletePhoto", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span>Delete</button>\n                                                ");
    return buffer;
    }

  function program33(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                <button type=\"button\" class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "newMedication", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span>New Medication</button>\n                            ");
    return buffer;
    }

  function program35(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                                <tr ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editMedication", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                                    <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "prescriptionDate", options) : helperMissing.call(depth0, "date-format", "prescriptionDate", options))));
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "inventoryItem.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "status", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "prescription", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "requestedBy", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>\n                                        ");
    stack1 = helpers['if'].call(depth0, "canEdit", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(36, program36, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                    </td>\n                                </tr>\n                            ");
    return buffer;
    }
  function program36(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                            ");
    stack1 = helpers['if'].call(depth0, "parentController.canAddMedication", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(37, program37, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                            ");
    stack1 = helpers['if'].call(depth0, "parentController.canDeleteMedication", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(39, program39, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                        ");
    return buffer;
    }
  function program37(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                                <button type=\"button\" class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editMedication", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                                            ");
    return buffer;
    }

  function program39(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                                <button type=\"button\" class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showDeleteMedication", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span>Delete</button>\n                                            ");
    return buffer;
    }

  function program41(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                <button type=\"button\" class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "newImaging", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span> New Imaging</button>\n                            ");
    return buffer;
    }

  function program43(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                                <tr ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editImaging", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                                    <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "requestedDate", options) : helperMissing.call(depth0, "date-format", "requestedDate", options))));
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "imagingType.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "status", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "imagingDate", options) : helperMissing.call(depth0, "date-format", "imagingDate", options))));
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "result", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "notes", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "requestedBy", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>\n                                        ");
    stack1 = helpers['if'].call(depth0, "canEdit", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(44, program44, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                    </td>\n                                </tr>\n                            ");
    return buffer;
    }
  function program44(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                            ");
    stack1 = helpers['if'].call(depth0, "parentController.canAddImaging", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(45, program45, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                            ");
    stack1 = helpers['if'].call(depth0, "parentController.canDeleteImaging", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(47, program47, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                        ");
    return buffer;
    }
  function program45(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                                <button type=\"button\" class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editImaging", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                                            ");
    return buffer;
    }

  function program47(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                                <button type=\"button\" class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showDeleteImaging", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span> Delete</button>\n                                            ");
    return buffer;
    }

  function program49(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                <button type=\"button\" class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "newLab", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span> New Lab</button>\n                            ");
    return buffer;
    }

  function program51(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                                <tr ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editLab", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                                    <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "requestedDate", options) : helperMissing.call(depth0, "date-format", "requestedDate", options))));
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "labType.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "status", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "labDate", options) : helperMissing.call(depth0, "date-format", "labDate", options))));
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "result", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "notes", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "requestedBy", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>\n                                        ");
    stack1 = helpers['if'].call(depth0, "canEdit", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(52, program52, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                    </td>\n                                </tr>\n                            ");
    return buffer;
    }
  function program52(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                            ");
    stack1 = helpers['if'].call(depth0, "parentController.canAddLab", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(53, program53, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                            ");
    stack1 = helpers['if'].call(depth0, "parentController.canDeleteLab", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(55, program55, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                        ");
    return buffer;
    }
  function program53(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                                <button type=\"button\" class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editLab", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                                            ");
    return buffer;
    }

  function program55(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                                <button type=\"button\" class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showDeleteLab", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span> Delete</button>\n                                            ");
    return buffer;
    }

  function program57(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                <button type=\"button\" class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "newVisit", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span> New Visit</button>\n                            ");
    return buffer;
    }

  function program59(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                ");
    stack1 = helpers.each.call(depth0, "visits", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(60, program60, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                            ");
    return buffer;
    }
  function program60(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                                    <tr ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editVisit", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                                        <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "startDate", options) : helperMissing.call(depth0, "date-format", "startDate", options))));
    data.buffer.push("</td>\n                                        <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "endDate", options) : helperMissing.call(depth0, "date-format", "endDate", options))));
    data.buffer.push("</td>\n                                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "primaryDiagnosis", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "examiner", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "location", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "visitType", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                        <td>\n                                            ");
    stack1 = helpers['if'].call(depth0, "patientController.canAddVisit", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(61, program61, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                            ");
    stack1 = helpers['if'].call(depth0, "patientController.canDeleteVisit", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(63, program63, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                        </td>\n                                    </tr>\n                                ");
    return buffer;
    }
  function program61(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                                <button type=\"button\" class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editVisit", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                                            ");
    return buffer;
    }

  function program63(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                                <button type=\"button\" class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showDeleteVisit", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span> Delete</button>\n                                            ");
    return buffer;
    }

  function program65(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                <button type=\"button\" class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "newAppointment", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span> New Appointment</button>\n                            ");
    return buffer;
    }

  function program67(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                ");
    stack1 = helpers.each.call(depth0, "appointments", {hash:{
      'itemController': ("appointments/item")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(68, program68, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                            ");
    return buffer;
    }
  function program68(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                    <tr ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editAppointment", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "appointmentDate", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "provider", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "location", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "appointmentType", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "displayStatus", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                        <td>\n                                            ");
    stack1 = helpers['if'].call(depth0, "patientController.canAddAppointment", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(69, program69, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                            ");
    stack1 = helpers['if'].call(depth0, "patientController.canDeleteAppointment", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(71, program71, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                        </td>\n                                    </tr>\n                                ");
    return buffer;
    }
  function program69(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                                <button type=\"button\" class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editAppointment", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                                            ");
    return buffer;
    }

  function program71(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                                <button type=\"button\" class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showDeleteAppointment", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span> Delete</button>\n                                            ");
    return buffer;
    }

  function program73(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                <div role=\"tabpanel\" class=\"tab-pane\" id=\"social\">\n                    <div class=\"panel\">\n                        <div class=\"panel-heading\">\n                            <h3 class=\"panel-title\">                \n                                Social Work Details                \n                            </h3>\n                        </div>\n                        <div class=\"panel-body detail-section-content\">        \n                            <h4>\n                                Family Information              \n                                <button type=\"button\" class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showEditFamily", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span>Add Family Member</button>\n                            </h4>            \n\n                            <table class=\"table\">\n                                <tr class=\"table-header\">\n                                    <th>Name</th>\n                                    <th>Age</th>\n                                    <th>Civil Status</th>\n                                    <th>Relation to Patient</th>\n                                    <th>Education</th>\n                                    <th>Occupation</th>\n                                    <th>Income</th>\n                                    <th>Insurance</th>\n                                    <th>Action</th>\n                                </tr>\n                                ");
    stack1 = helpers['with'].call(depth0, "", "as", "patientController", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(74, program74, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                            </table>         \n                            <h4>\n                                Expenses\n                                <button type=\"button\" class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showEditExpense", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span>Add Expense</button>\n                            </h4>\n                            <table class=\"table\">\n                                <tr class=\"table-header\">\n                                    <th>Category</th>\n                                    <th>Sources</th>\n                                    <th>Monthly Cost</th>\n                                    <th>Actions</th>\n                                </tr>\n                                ");
    stack1 = helpers['with'].call(depth0, "", "as", "patientController", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(78, program78, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                ");
    stack1 = helpers['if'].call(depth0, "showExpenseTotal", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(82, program82, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                            </table>\n\n                            <div class=\"row\">\n                                <div class=\"form-group col-sm-6\">\n                                    <label>Living Arrangement</label>\n                                    ");
    data.buffer.push(escapeExpression((helper = helpers['ext-radio'] || (depth0 && depth0['ext-radio']),options={hash:{
      'name': ("livingArrangement"),
      'content': ("livingArrangementList"),
      'value': ("livingArrangement"),
      'includeOtherOption': (true),
      'otherOptionLabel': ("Other"),
      'radioLabelPath': ("content"),
      'radioValuePath': ("content")
    },hashTypes:{'name': "ID",'content': "ID",'value': "ID",'includeOtherOption': "BOOLEAN",'otherOptionLabel': "STRING",'radioLabelPath': "STRING",'radioValuePath': "STRING"},hashContexts:{'name': depth0,'content': depth0,'value': depth0,'includeOtherOption': depth0,'otherOptionLabel': depth0,'radioLabelPath': depth0,'radioValuePath': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "ext-radio", options))));
    data.buffer.push("\n                                </div>\n                                <div class=\"form-group col-sm-6\">\n                                    <label>Family Support System</label>\n                                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("Family members are living together"),
      'property': ("familySupport1")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("Family members listen, care and help one another"),
      'property': ("familySupport2")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("Spend time together in prayer especially in difficult times"),
      'property': ("familySupport3")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("Family and closest relatives have open communication"),
      'property': ("familySupport4")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("Has relatives around who are responsive to families needs"),
      'property': ("familySupport5")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                                </div>\n                            </div>\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['em-text'] || (depth0 && depth0['em-text']),options={hash:{
      'label': ("Assessment/Findings"),
      'property': ("notes")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-text", options))));
    data.buffer.push("\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['em-text'] || (depth0 && depth0['em-text']),options={hash:{
      'label': ("Recommendation"),
      'property': ("socialRecommendation")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-text", options))));
    data.buffer.push("\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['em-text'] || (depth0 && depth0['em-text']),options={hash:{
      'label': ("Action Taken"),
      'property': ("socialActionTaken")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-text", options))));
    data.buffer.push("\n                            <div class=\"row\">\n\n                                ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'label': ("Philhealth"),
      'property': ("insurance"),
      'content': ("philhealthTypes"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content"),
      'selected': ("insurance"),
      'class': ("col-sm-6")
    },hashTypes:{'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'selected': "ID",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'selected': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n                                ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'label': ("Classification"),
      'property': ("economicClassification"),
      'content': ("economicClassificationTypes"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content"),
      'selected': ("economicClassification"),
      'class': ("col-sm-6"),
      'prompt': (" ")
    },hashTypes:{'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'selected': "ID",'class': "STRING",'prompt': "STRING"},hashContexts:{'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'selected': depth0,'class': depth0,'prompt': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            ");
    return buffer;
    }
  function program74(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                    ");
    stack1 = helpers.each.call(depth0, "familyInfo", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(75, program75, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                ");
    return buffer;
    }
  function program75(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                        <tr>\n                                            <td>");
    stack1 = helpers._triageMustache.call(depth0, "name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                            <td>");
    stack1 = helpers._triageMustache.call(depth0, "age", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                            <td>");
    stack1 = helpers._triageMustache.call(depth0, "civilStatus", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                            <td>");
    stack1 = helpers._triageMustache.call(depth0, "relationship", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                            <td>");
    stack1 = helpers._triageMustache.call(depth0, "education", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                            <td>");
    stack1 = helpers._triageMustache.call(depth0, "occupation", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                            <td>");
    stack1 = helpers._triageMustache.call(depth0, "income", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                            <td>");
    stack1 = helpers._triageMustache.call(depth0, "insurance", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n\n                                            <td>\n                                                \n                                                <button type=\"button\" class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showEditFamily", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                                                ");
    stack1 = helpers['if'].call(depth0, "patientController.canDeleteSocialWork", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(76, program76, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n\n                                            </td>\n                                        </tr>\n                                    ");
    return buffer;
    }
  function program76(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                                    <button type=\"button\" class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showDeleteFamily", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span>Delete</button>\n                                                ");
    return buffer;
    }

  function program78(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                    ");
    stack1 = helpers.each.call(depth0, "expenses", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(79, program79, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                ");
    return buffer;
    }
  function program79(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                        <tr>\n                                            <td>");
    stack1 = helpers._triageMustache.call(depth0, "category", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                            <td>");
    stack1 = helpers._triageMustache.call(depth0, "sources", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                            <td>");
    stack1 = helpers._triageMustache.call(depth0, "cost", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                            <td>\n                                                <button type=\"button\" class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showEditExpense", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                                                ");
    stack1 = helpers['if'].call(depth0, "patientController.canDeleteSocialWork", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(80, program80, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                            </td>\n                                        </tr>\n                                    ");
    return buffer;
    }
  function program80(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                                    <button type=\"button\" class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showDeleteExpense", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span>Delete</button>\n                                                ");
    return buffer;
    }

  function program82(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                    <tr>\n                                        <td colspan=\"2\"><b>Total Monthly Expenses</b></td>\n                                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "totalExpenses", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                        <td></td>\n                                    </tr>\n                                ");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false),
      'bubbles': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN",'bubbles': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0,'bubbles': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/patients/edit/view', ['exports', 'hospitalrun/views/panel'], function (exports, PanelView) {

	'use strict';

	exports['default'] = PanelView['default'].extend();

});
define('hospitalrun/patients/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/patient-visits'], function (exports, AbstractPagedController, PatientVisits) {

    'use strict';

    exports['default'] = AbstractPagedController['default'].extend(PatientVisits['default'], {
        addPermission: 'add_patient',
        deletePermission: 'delete_patient',
        startKey: [],    
        actions: {
            admitPatient: function(patient) {
                console.log("patient is:", patient);
                this.getPatientVisits(patient).then(function(visits) {
                    this.send('createNewVisit', patient, visits);
                }.bind(this));
                
            },
            
            dischargePatient: function(patient) {
                this.getPatientVisits(patient).then(function(visits) {
                    var visitToDischarge = visits.findBy('status', 'Admitted');                
                    if (visitToDischarge) {
                        visitToDischarge.set('status', 'Discharged');                
                        visitToDischarge.set('endDate', new Date());
                        this.transitionToRoute('visits.edit', visitToDischarge);
                    }
                }.bind(this));            
            }
        }
    });

});
define('hospitalrun/patients/index/route', ['exports', 'hospitalrun/routes/abstract-index-route'], function (exports, AbstractIndexRoute) {

    'use strict';

    exports['default'] = AbstractIndexRoute['default'].extend({
        modelName: 'patient',
        pageTitle: 'Patient Listing',
        
        _getStartKeyFromItem: function(item) {
            var displayPatientId =item.get('displayPatientId');
            return [displayPatientId,'patient_'+item.get('id')];
        },
        
        _modelQueryParams: function() {
            return {
                mapReduce: 'patient_by_display_id'
            };
        }

    });

});
define('hospitalrun/patients/index/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    <table class=\"table\">\n        <tr class=\"table-header\">\n            ");
    stack1 = (helper = helpers['sortable-column'] || (depth0 && depth0['sortable-column']),options={hash:{
      'sortBy': ("id"),
      'sortDesc': ("sortDesc"),
      'sortKey': ("sortKey")
    },hashTypes:{'sortBy': "STRING",'sortDesc': "ID",'sortKey': "ID"},hashContexts:{'sortBy': depth0,'sortDesc': depth0,'sortKey': depth0},inverse:self.noop,fn:self.program(2, program2, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "sortable-column", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            ");
    stack1 = (helper = helpers['sortable-column'] || (depth0 && depth0['sortable-column']),options={hash:{
      'sortBy': ("firstName"),
      'sortDesc': ("sortDesc"),
      'sortKey': ("sortKey")
    },hashTypes:{'sortBy': "STRING",'sortDesc': "ID",'sortKey': "ID"},hashContexts:{'sortBy': depth0,'sortDesc': depth0,'sortKey': depth0},inverse:self.noop,fn:self.program(4, program4, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "sortable-column", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            ");
    stack1 = (helper = helpers['sortable-column'] || (depth0 && depth0['sortable-column']),options={hash:{
      'sortBy': ("lastName"),
      'sortDesc': ("sortDesc"),
      'sortKey': ("sortKey")
    },hashTypes:{'sortBy': "STRING",'sortDesc': "ID",'sortKey': "ID"},hashContexts:{'sortBy': depth0,'sortDesc': depth0,'sortKey': depth0},inverse:self.noop,fn:self.program(6, program6, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "sortable-column", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            ");
    stack1 = (helper = helpers['sortable-column'] || (depth0 && depth0['sortable-column']),options={hash:{
      'sortBy': ("gender"),
      'sortDesc': ("sortDesc"),
      'sortKey': ("sortKey")
    },hashTypes:{'sortBy': "STRING",'sortDesc': "ID",'sortKey': "ID"},hashContexts:{'sortBy': depth0,'sortDesc': depth0,'sortKey': depth0},inverse:self.noop,fn:self.program(8, program8, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "sortable-column", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            ");
    stack1 = (helper = helpers['sortable-column'] || (depth0 && depth0['sortable-column']),options={hash:{
      'sortBy': ("dateOfBirth"),
      'sortDesc': ("sortDesc"),
      'sortKey': ("sortKey")
    },hashTypes:{'sortBy': "STRING",'sortDesc': "ID",'sortKey': "ID"},hashContexts:{'sortBy': depth0,'sortDesc': depth0,'sortKey': depth0},inverse:self.noop,fn:self.program(10, program10, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "sortable-column", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            ");
    stack1 = (helper = helpers['sortable-column'] || (depth0 && depth0['sortable-column']),options={hash:{
      'sortBy': ("status"),
      'sortDesc': ("sortDesc"),
      'sortKey': ("sortKey")
    },hashTypes:{'sortBy': "STRING",'sortDesc': "ID",'sortKey': "ID"},hashContexts:{'sortBy': depth0,'sortDesc': depth0,'sortKey': depth0},inverse:self.noop,fn:self.program(12, program12, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "sortable-column", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            ");
    stack1 = helpers['if'].call(depth0, "showActions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(14, program14, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        </tr>\n\n        ");
    stack1 = helpers.each.call(depth0, {hash:{
      'itemController': ("patients/patient-controller")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(16, program16, data),contexts:[],types:[],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </table>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    
    data.buffer.push("ID");
    }

  function program4(depth0,data) {
    
    
    data.buffer.push("First Name");
    }

  function program6(depth0,data) {
    
    
    data.buffer.push("Last Name");
    }

  function program8(depth0,data) {
    
    
    data.buffer.push("Gender");
    }

  function program10(depth0,data) {
    
    
    data.buffer.push("DOB");
    }

  function program12(depth0,data) {
    
    
    data.buffer.push("Status");
    }

  function program14(depth0,data) {
    
    
    data.buffer.push("\n                <th>Actions</th>\n            ");
    }

  function program16(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n            <tr ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editItem", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                <td>");
    stack1 = helpers._triageMustache.call(depth0, "displayPatientId", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                <td>");
    stack1 = helpers._triageMustache.call(depth0, "firstName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                <td>");
    stack1 = helpers._triageMustache.call(depth0, "lastName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                <td>");
    stack1 = helpers._triageMustache.call(depth0, "gender", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "dateOfBirth", options) : helperMissing.call(depth0, "date-format", "dateOfBirth", options))));
    data.buffer.push("</td>\n                <td>");
    stack1 = helpers._triageMustache.call(depth0, "status", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                ");
    stack1 = helpers['if'].call(depth0, "showActions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(17, program17, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </tr>\n        ");
    return buffer;
    }
  function program17(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                    <td>\n                        ");
    stack1 = helpers['if'].call(depth0, "canAdd", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(18, program18, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        ");
    stack1 = helpers['if'].call(depth0, "canAdmitPatient", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(20, program20, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        ");
    stack1 = helpers['if'].call(depth0, "canDischargePatient", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(22, program22, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        ");
    stack1 = helpers['if'].call(depth0, "canDelete", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(24, program24, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    </td>\n                ");
    return buffer;
    }
  function program18(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                            <button class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editItem", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                        ");
    return buffer;
    }

  function program20(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                            <button class=\"btn btn-default success\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "admitPatient", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"glyphicon glyphicon-log-in\"></span> Admit</button>\n                        ");
    return buffer;
    }

  function program22(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                            <button class=\"btn btn-default info\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "dischargePatient", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"glyphicon glyphicon-log-out\"></span> Discharge</button>\n                        ");
    return buffer;
    }

  function program24(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                            <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "deleteItem", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span> Delete</button>\n                        ");
    return buffer;
    }

  function program26(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <div class=\"alert alert-info\">\n        <p>No patients found. ");
    stack1 = helpers['if'].call(depth0, "canAdd", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(27, program27, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n    </div>\n");
    return buffer;
    }
  function program27(depth0,data) {
    
    var buffer = '';
    data.buffer.push("<a href=\"#\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "newItem", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">Create a new patient record?</a>");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "hasRecords", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(26, program26, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/patients/index/view', ['exports', 'hospitalrun/views/item-listing'], function (exports, ItemListingView) {

	'use strict';

	exports['default'] = ItemListingView['default'].extend();

});
define('hospitalrun/patients/patient-controller/controller', ['exports', 'ember', 'hospitalrun/mixins/user-session'], function (exports, Ember, UserSession) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend(UserSession['default'], {
        canAdmitPatient: function() {
            var admitted = this.get('admitted');
            if (!admitted) {
                return this.currentUserCan('admit_patient');
            }
        }.property('admitted'),
        
        canDischargePatient: function() {
            var admitted = this.get('admitted');
            if (admitted) {
                return this.currentUserCan('discharge_patient');
            }
        }.property('admitted'),
        
        canDelete: function() {
            return this.parentController.get('canDelete');
        }.property(),
        
        canAdd: function() {
            return this.parentController.get('canAdd');
        }.property(),
        
        showActions: function() {
             return this.parentController.get('showActions');
        }.property()
            

    });

});
define('hospitalrun/patients/photo-item/controller', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend({
        needs: 'filesystem',
        
        fileSystem: Ember['default'].computed.alias('controllers.filesystem'),
        isFileSystemEnabled: Ember['default'].computed.alias('controllers.filesystem.isFileSystemEnabled'),
        
        photoUrl: function() {
            var fileName = this.get('fileName'),
            fileSystem = this.get('fileSystem'),
            isFileSystemEnabled = this.get('isFileSystemEnabled'),
            url = this.get('url');
            if (isFileSystemEnabled) {
                fileSystem.pathToFileSystemURL(fileName).then(function(photoUrl) {
                    if (!Ember['default'].isEmpty(photoUrl)) {
                        this.set('photoUrl', photoUrl);
                    }                
                }.bind(this));
            }
            return url;
        }.property('fileName', 'url')    
    });

});
define('hospitalrun/patients/photo/controller', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend({
        needs: 'patients/edit',

        title: function() {
            var isNew = this.get('isNew');
            if (isNew) {
                return 'Add Photo';
            } else {
                return 'Edit Photo';
            }
        }.property('isNew'),
        
        updateButtonText: function() {
            var isNew = this.get('isNew');
            if (isNew) {
                return 'Add';
            } else {
                return 'Update';
            }
        }.property('isNew'),

        updateButtonAction: 'update',
        showUpdateButton: true,
        
        editController: Ember['default'].computed.alias('controllers.patients/edit'),    
        
        actions: {
            cancel: function() {
                this.send('closeModal');
            },
            
            update: function() {
                var caption = this.get('caption'),
                    isNew = this.get('isNew'),
                    photoFile = this.get('photoFile');
                if (isNew) {
                    this.get('editController').send('addPhoto', photoFile, caption);
                } else {
                    this.get('editController').send('updatePhoto', this.get('model'));                
                }
            }
        }
    });

});
define('hospitalrun/patients/photo/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    ");
    stack1 = helpers['if'].call(depth0, "isNew", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    <div class=\"row\">        \n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("caption"),
      'label': ("Caption")
    },hashTypes:{'property': "STRING",'label': "STRING"},hashContexts:{'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    </div>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['take-photo'] || (depth0 && depth0['take-photo']),options={hash:{
      'photoFile': ("photoFile")
    },hashTypes:{'photoFile': "ID"},hashContexts:{'photoFile': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "take-photo", options))));
    data.buffer.push("\n    ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n        <div class=\"thumbnail\">\n            <img ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'alt': ("caption"),
      'src': ("url")
    },hashTypes:{'alt': "STRING",'src': "STRING"},hashContexts:{'alt': depth0,'src': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(" class=\"img-responsive\" >\n        </div>\n    ");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/patients/photo/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/patients/quick-add/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/gender-list'], function (exports, AbstractEditController, GenderList) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend(GenderList['default'], {
        title: 'New Patient',
        
        updateCapability: 'add_patient',
        
        actions: {
            cancel: function() {
                this.send('closeModal');
            }
        },
        
        afterUpdate: function(record) {
            var requestingController = this.get('requestingController');
            requestingController.send('addedNewPatient', record);
        }
    });

});
define('hospitalrun/patients/quick-add/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("friendlyId"),
      'label': ("Id"),
      'class': ("required col-sm-6")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("firstName"),
      'label': ("First Name"),
      'class': ("required col-sm-6")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    </div>\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("middleName"),
      'label': ("Middle Name"),
      'class': ("col-sm-6")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("lastName"),
      'label': ("Last Name"),
      'class': ("required col-sm-6")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    </div>\n    <div class=\"row\">        \n        <div class=\"form-group col-sm-6\">\n            <label>Gender</label>\n            <div>\n                ");
    data.buffer.push(escapeExpression((helper = helpers['ext-radio'] || (depth0 && depth0['ext-radio']),options={hash:{
      'name': ("gender"),
      'content': ("genderList"),
      'value': ("gender"),
      'showInline': (true)
    },hashTypes:{'name': "ID",'content': "ID",'value': "ID",'showInline': "BOOLEAN"},hashContexts:{'name': depth0,'content': depth0,'value': depth0,'showInline': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "ext-radio", options))));
    data.buffer.push("\n            </div>\n        </div>\n        ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("dateOfBirth"),
      'label': ("Date of Birth"),
      'maxDate': ("now"),
      'class': ("col-sm-6")
    },hashTypes:{'property': "STRING",'label': "STRING",'maxDate': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'maxDate': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n    </div>    \n");
    return buffer;
    }

    data.buffer.push("<div class=\"alert alert-warning\" role=\"alert\">The patient <strong>");
    stack1 = helpers._triageMustache.call(depth0, "patientFullName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</strong> could not be found.  If you would like to create a new patient, fill in the information below.  Otherwise press the Cancel button to return.</div>\n");
    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    return buffer;
    
  });

});
define('hospitalrun/patients/quick-add/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/patients/reports/controller', ['exports', 'hospitalrun/controllers/abstract-report-controller', 'ember', 'hospitalrun/mixins/patient-diagnosis', 'hospitalrun/mixins/patient-visits', 'hospitalrun/mixins/visit-types'], function (exports, AbstractReportController, Ember, PatientDiagnosis, PatientVisits, VisitTypes) {

    'use strict';

    exports['default'] = AbstractReportController['default'].extend(PatientDiagnosis['default'], PatientVisits['default'], VisitTypes['default'], {
        needs: ['patients'],
        
        clinicList: Ember['default'].computed.alias('controllers.patients.clinicList'),
        diagnosisList: Ember['default'].computed.alias('controllers.patients.diagnosisList'),
        physicianList: Ember['default'].computed.alias('controllers.patients.physicianList'),
        locationList: Ember['default'].computed.alias('controllers.patients.locationList'),
        statusList: Ember['default'].computed.alias('controllers.patients.statusList'),
        visitTypesList: Ember['default'].computed.alias('controllers.patients.visitTypeList'),
        patientDetails: {},
        
        admissionReportColumns: {
            gender: {
                label: 'Gender',
                include: true,
                property: 'gender'
            },
            total: {
                label: 'Total',
                include: true,
                property: 'total',
                format: '_numberFormat'
            }
        },
        admissionDetailReportColumns: {
            id: {
                label: 'Id',
                include: true,
                property: 'patientId'
            },
            name: {
                label: 'Name',
                include: true,
                property: 'patientName'
            },
            admissionDate: {
                label: 'Admission Date',
                include: true,
                property: 'admissionDate',
                format: '_dateTimeFormat'
            },
            dischargeDate: {
                label: 'Discharge Date',
                include: false,
                property: 'dischargeDate',
                format: '_dateTimeFormat'
            },
            patientDays: {
                label: 'Patient Days',
                include: false,
                property: 'patientDays',
                format: '_numberFormat'
            }
        },
        diagnosticReportColumns: {
            type: {
                label: 'Type',
                include: true,
                property: 'type'
            },
            total: {
                label: 'Total',
                include: true,
                property: 'total',
                format: '_numberFormat'
            }
        },
        
        procedureDetailReportColumns: {
            id: {
                label: 'Id',
                include: true,
                property: 'patient.displayPatientId'
            },
            name: {
                label: 'Name',
                include: true,
                property: 'patient.displayName'
            },
            procedure: {
                label: 'Procedure',
                include: true,
                property: 'procedure'
            },
            procedureDate: {
                label: 'Procedure Date',
                include: true,
                property: 'procedureDate',
                format: '_dateTimeFormat'
            }        
        },
        reportColumns: {
            visitDate: {
                label: 'Visit Date',
                include: true,
                property: 'visitDate'
            },
            visitType: {
                label: 'Visit Type',
                include: true,
                property: 'visitType'
            },
            visitLocation: {
                label: 'Location',
                include: false,
                property: 'location'
            },
            examiner: {
                label: 'Examiner',
                include: true,
                property: 'examiner'    
            },
            name: {
                label: 'Name',
                include: true,
                property: 'patient.displayName'
            },
            id: {
                label: 'Id',
                include: true,
                property: 'patient.displayPatientId'
            },
            gender: {
                label: 'Gender',
                include: true,
                property: 'patient.gender'
            },
            dateOfBirth: {
                label: 'Date Of Birth',
                include: true,
                property: 'patient.dateOfBirth',
                format: '_dateFormat'
            },
            age: {
                label: 'Age',
                include: false,
                property: 'patient.age'            
            },
            primaryDiagnosis: {
                label: 'Primary Diagnosis',
                include: false,
                property: 'primaryDiagnosis'
            },
            secondaryDiagnoses: {
                label: 'Secondary Diagnoses',
                include: false,
                property: 'additionalDiagnoses',
                format: '_diagnosisListToString'
            },
            procedures: {
                label: 'Procedures',
                include: false,
                property: 'resolvedProcedures',
                format: '_procedureListToString'
            },
            contacts: {
                label: 'Contacts',
                include: false,
                property: 'patient',
                format: '_contactListToString'
            },
            referredBy: {
                label: 'Referred By',
                include: false,
                property: 'patient.referredBy'            
            },
            referredDate: {
                label: 'Referred Date',
                include: false,
                property: 'patient.referredDate',
                format: '_dateFormat'
            }
        },
        statusReportColumns: {
            id: {
                label: 'Id',
                include: true,
                property: 'patient.displayPatientId'
            },
            name: {
                label: 'Name',
                include: true,
                property: 'patient.displayName'
            },
            status:  {
                label: 'Status',
                include: true,
                property: 'patient.status'
            },
            primaryDiagnosis: {
                label: 'Primary Diagnoses',
                include: true,
                property: 'patient.visits',
                format: '_formatPrimaryDiagnosis'
            },
            secondaryDiagnoses: {
                label: 'Secondary Diagnoses',
                include: true,
                property: 'patient.visits',
                format: '_formatSecondaryDiagnosis'
            }
        },
        reportTypes: [{
            name: 'Admissions Detail',
            value: 'detailedAdmissions'
        }, {
            name: 'Admissions Summary',
            value: 'admissions'
        }, {
            name: 'Diagnostic Testing',
            value: 'diagnostic'
        }, {
            name: 'Discharges Detail',
            value: 'detailedDischarges'
        }, {
            name: 'Discharges Summary',
            value: 'discharges'
        }, {
            name: 'Procedures Detail',
            value: 'detailedProcedures'
        }, {
            name: 'Procedures Summary',
            value: 'procedures'
        }, {
            name: 'Patient Status',
            value: 'status'
        }, {
            name: 'Total Patient Days',
            value: 'patientDays'
        }, {
            name: 'Total Patient Days (Detailed)',
            value: 'detailedPatientDays'
        }, {
            name: 'Visit',
            value: 'visit'
        }],
        
        isDischargeReport: function() {
            var reportType = this.get('reportType');
            return (reportType.toLowerCase().indexOf('discharges') > -1);
        }.property('reportType'),
        
        isStatusReport: function() {
            var reportType = this.get('reportType');
            return reportType === 'status';
        }.property('reportType'),
        
        isVisitReport: function() {
            var reportType = this.get('reportType');
            return (reportType === 'visit');
        }.property('reportType'),
        
        _addContactToList: function(phone, email, prefix, contactList) {
            var contactArray = [];
            if (!Ember['default'].isEmpty(email) || !Ember['default'].isEmpty(phone)) {
                if (!Ember['default'].isEmpty(phone)) {
                    contactArray.push(phone);
                }                
                if (!Ember['default'].isEmpty(email)) {
                    contactArray.push(email);
                }
                contactList.push(prefix+contactArray.join(', '));
            }
        },
        
        _addReportRow: function(row, skipFormatting, reportColumns, rowAction) {
            if (Ember['default'].isEmpty(rowAction) && !Ember['default'].isEmpty(row.patient) && !Ember['default'].isEmpty(row.patient.get('id'))) {
                rowAction = {
                    action: 'viewPatient',
                    model: row.patient.get('id')
                };
            }
            this._super(row, skipFormatting, reportColumns, rowAction);
        },
        
        /**
         * Given a list of records, organize and total by them by type and then add them to the report.
         * @param records {Array} list of records to total.
         * @param typeField {String} the field in the records containing the type.
         * @param totalLabel {String} the label for the grand total.
         * @param reportColumns 
         */
        _addRowsByType: function(records, typeField, totalLabel, reportColumns) {
            var types = this._totalByType(records, typeField, totalLabel);
            types.forEach(function(type) {
                this._addReportRow(type, true, reportColumns);
            }.bind(this));
        },
        
        _addPatientProcedureRows: function(procedureTotals, reportColumns) {    
            procedureTotals.forEach(function(procedureTotal) {
                if (!Ember['default'].isEmpty(procedureTotal.records)) {
                    procedureTotal.records.forEach(function(patientProcedure, index) {
                        this._addReportRow({
                            patient: patientProcedure.get('patient'),
                            procedure: patientProcedure.get('description'),
                            procedureDate: patientProcedure.get('procedureDate'),
                        }, false, reportColumns);
                        if (index+1 === procedureTotal.records.length) {
                            this._addReportRow({                            
                                procedure: 'Total for %@: %@'.fmt(procedureTotal.type, procedureTotal.total)
                            }, true, reportColumns);
                        }
                    }.bind(this));
                } else {
                    this._addReportRow({                            
                        procedure: 'Total for %@: %@'.fmt(procedureTotal.type, procedureTotal.total)
                    }, true, reportColumns);
                }
            }.bind(this));
        },
        
        _contactListToString: function(patient) {
            var additionalContacts = patient.get('additionalContacts'),
                contactArray = [],
                contactDesc,
                contactList = [],
                email = patient.get('email'),
                phone = patient.get('phone');
            this._addContactToList(phone, email, 'Primary: ', contactList);
            if (!Ember['default'].isEmpty(additionalContacts)) {
                additionalContacts.forEach(function(contact) {
                    contactArray = [];
                    contactDesc = '';                   
                    if (!Ember['default'].isEmpty(contact.name) && !Ember['default'].isEmpty(contact.relationship)) {
                        if (!Ember['default'].isEmpty(contact.name)) {
                            contactDesc += contact.name;
                        } 
                        if (!Ember['default'].isEmpty(contact.relationship)) {
                            if (!Ember['default'].isEmpty(contactDesc)) {
                                contactDesc += ' - ';
                            }
                            contactDesc += contact.relationship;                            
                        }
                        contactDesc += ': ';
                    }
                    this._addContactToList(contact.phone, contact.email, contactDesc, contactList);
                }.bind(this));
            }
            return contactList.join(';\n');
        },
        
        _dateTimeFormat: function(value) {
            return this._dateFormat(value, 'l h:mm A');
        },
        
        _diagnosisListToString: function(diagnoses) {
            return this._listToString(diagnoses, 'description', 'date');
        },
            /**
         * Find diagnostics by the specified dates and the record's start and (optional) end dates.
         */
        _findDiagnosticsByDate: function() {        
            var filterEndDate = this.get('endDate'),
                filterStartDate = this.get('startDate'),
                findParams = {
                    options: {},
                    mapReduce: 'imaging_by_status'
                },
                maxValue = this.get('maxValue');
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                findParams.options.startkey =  ['Completed', null, filterStartDate.getTime(), null];
                
                if (!Ember['default'].isEmpty(filterEndDate)) {
                    filterEndDate = moment(filterEndDate).endOf('day').toDate();
                    findParams.options.endkey =  ['Completed',maxValue,filterEndDate.getTime(), maxValue];
                }
                this.store.find('imaging', findParams).then(function(imagingRecords) {
                    var returnRecords = {
                        imaging: imagingRecords
                    };
                    findParams.mapReduce = 'lab_by_status';
                    this.store.find('lab', findParams).then(function(labRecords) {
                        returnRecords.labs = labRecords;
                        resolve(returnRecords);
                    }, reject);
                }.bind(this), reject);
                
            }.bind(this));
        },
        
        
        /**
         * Find procedures by the specified dates and the record's start and (optional) end dates.
         */
        _findPatientsByStatus: function() {        
            var status = this.get('status'),
                findParams = {
                    options: {
                        key: status
                    },
                    mapReduce: 'patient_by_status'
                };            
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                this.store.find('patient', findParams).then(resolve, reject);
            }.bind(this));
        },
        
        /**
         * Find procedures by the specified dates and the record's start and (optional) end dates.
         */
        _findProceduresByDate: function() {        
            var filterEndDate = this.get('endDate'),
                filterStartDate = this.get('startDate'),
                findParams = {
                    options: {},
                    mapReduce: 'procedure_by_date'
                },
                maxValue = this.get('maxValue');
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                findParams.options.startkey =  [filterStartDate.getTime(), null];
                
                if (!Ember['default'].isEmpty(filterEndDate)) {
                    filterEndDate = moment(filterEndDate).endOf('day').toDate();
                    findParams.options.endkey =  [filterEndDate.getTime(), maxValue];
                }
                this.store.find('procedure', findParams).then(resolve, reject);
            }.bind(this));
        },
        
        /**
         * Find visits by the specified dates and the record's start and (optional) end dates.
         * @param {String} reportType the type of report to find visits for.
         */
        _findVisitsByDate: function() {        
            var filterEndDate = this.get('endDate'),
                filterStartDate = this.get('startDate'),
                findParams = {
                    options: {},
                    mapReduce: 'visit_by_date'
                },
                isDischargeReport = this.get('isDischargeReport'),
                maxValue = this.get('maxValue');
            if (isDischargeReport) {
                findParams.mapReduce = 'visit_by_discharge_date';
            }
            
            /**
             * Admissions - start date between start and end date
             * Discharge end date between start and end date
             */
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                var isDischargeReport = this.get('isDischargeReport');
                findParams.options.startkey =  [filterStartDate.getTime(), null];
                if (!Ember['default'].isEmpty(filterEndDate)) {
                    filterEndDate = moment(filterEndDate).endOf('day').toDate();
                    if (isDischargeReport) {
                        findParams.options.endkey =  [filterEndDate.getTime(), maxValue];
                    } else {
                        findParams.options.endkey =  [filterEndDate.getTime(), maxValue, maxValue];
                    }
                }
                this.store.find('visit', findParams).then(resolve, reject);
                
            }.bind(this));
        },
        
        _filterByLike: function(records, field, likeCondition) {
            return records.filter(function(record) {
                var fieldValue = record.get('field');
                if (Ember['default'].isEmpty(fieldValue)) {
                    return false;
                } else {
                    if (Ember['default'].isArray(fieldValue)) {
                        var foundValue = fieldValue.find(function(value) {
                            return this._haveLikeValue(value, likeCondition);
                        }.bind(this));
                        return !Ember['default'].isEmpty(foundValue);
                    } else {
                        return this._haveLikeValue(fieldValue, likeCondition);
                    }
                }
            });
        },
        
        _filterInPatientVisit: function(visit){
            var outPatient = visit.get('outPatient'),
                status = visit.get('status');
            return !outPatient && !Ember['default'].isEmpty(status); 
        },
        
        _finishVisitReport: function(visits) {
            var visitTypes = this._totalByType(visits, 'visitType', 'total');
            visitTypes.forEach(function(visitType) {
                if (visitType.type === 'total') {
                    this._addReportRow({
                        visitDate: 'Total visits: '+visitType.total
                    });
                } else {
                    visitType.records.forEach(function(visit) {
                        this._addReportRow(visit);
                    }.bind(this));
                    this._addReportRow({
                        visitDate: 'Total for %@: %@'.fmt(visitType.type,visitType.total)
                    });
                }
            }.bind(this));
            this._finishReport();
        },
        _formatPrimaryDiagnosis: function(visits) {
            var primaryDiagnoses = this.getPrimaryDiagnoses(visits);
            return this._diagnosisListToString(primaryDiagnoses);        
        },
        
        _formatSecondaryDiagnosis: function(visits) {
            var secondaryDiagnoses = this.getSecondaryDiagnoses(visits);
            return this._diagnosisListToString(secondaryDiagnoses);
        },
        
        _generateAdmissionOrDischargeReport: function(visits, reportType) {
            var detailedReport = false,
                femaleCount = 0,
                femaleRows = [],
                maleCount = 0,
                maleRows = [],
                reportColumns;
            if (reportType.indexOf('detailed') > -1) {
                detailedReport = true;
                reportColumns = this.get('admissionDetailReportColumns');
                reportColumns.patientDays.include = false;
                if (reportType === 'detailedDischarges') {
                    reportColumns.dischargeDate.include = true;
                } else {
                    reportColumns.dischargeDate.include = false;
                }
            } else {
                reportColumns = this.get('admissionReportColumns');
            }
            visits = visits.filter(this._filterInPatientVisit);
            visits.forEach(function (visit) {
                
                if (!this.get('isDischargeReport') || !Ember['default'].isEmpty(visit.get('endDate'))) {
                    var reportRow = {
                        patient: visit.get('patient'),
                        patientId: visit.get('patient.displayPatientId'),
                        patientName: visit.get('patient.displayName'),
                        admissionDate: visit.get('startDate'), 
                        dischargeDate: visit.get('endDate')
                    };
                    if (visit.get('patient.gender') === 'F') {
                        femaleCount++;
                        femaleRows.push(reportRow);
                    } else {
                        maleCount++;
                        maleRows.push(reportRow);
                    }
                }
            }.bind(this));
            if (detailedReport) {
                femaleRows.forEach(function(reportRow) {
                    this._addReportRow(reportRow, false, reportColumns);
                }.bind(this));
                this._addReportRow({patientId: 'Female Total: '+femaleCount}, true, reportColumns);      
                maleRows.forEach(function(reportRow) {
                    this._addReportRow(reportRow, false, reportColumns);
                }.bind(this));
                this._addReportRow({patientId: 'Male Total: '+maleCount}, true, reportColumns);  
                this._addReportRow({patientId: 'Grand Total: '+ (femaleCount+maleCount)}, true, reportColumns); 
            } else {
                this._addReportRow({gender: 'Female',total: femaleCount}, true, reportColumns);
                this._addReportRow({gender: 'Male',total: maleCount}, true, reportColumns);
                this._addReportRow({gender: 'Total: ',total: femaleCount+maleCount}, true, reportColumns);
            }
            this._finishReport(reportColumns);
        },
        
        _generateDiagnosticReport: function() {
            this._findDiagnosticsByDate().then(function(diagnostics) {
                var reportColumns = this.get('diagnosticReportColumns');
                this._addRowsByType(diagnostics.imaging, 'imagingType.name', 'Total for imaging: ', reportColumns);
                this._addRowsByType(diagnostics.labs, 'labType.name', 'Total for labs: ', reportColumns);
                this._finishReport(reportColumns);
            }.bind(this), function(err) {
                this._notifyReportError('Error in _generateDiagnosticReport:'+err);
            }.bind(this));
        },
        
        _generatePatientDaysReport: function(visits, reportType) {
            visits = visits.filter(this._filterInPatientVisit);
            var detailed = (reportType.indexOf('detailed') === 0),
                reportEndDate = this.get('endDate'),
                reportColumns,
                reportStartDate = moment(this.get('startDate')).startOf('day');
            if (detailed) {
                reportColumns = this.get('admissionDetailReportColumns');
                reportColumns.patientDays.include = true;
                reportColumns.dischargeDate.include = true;
            } else {
                reportColumns = {
                    total: {
                        label: 'Total',
                        include: true,
                        property: 'total',
                        format: '_numberFormat'
                    }
                };
            }
            if (Ember['default'].isEmpty(reportEndDate)) {
                reportEndDate = moment().endOf('day');
            } else {
                reportEndDate = moment(reportEndDate).endOf('day');
            }
            var patientDays = visits.reduce(function(previousValue, visit) {
                var calcEndDate = visit.get('endDate'),
                    calcStartDate = moment(visit.get('startDate')).startOf('day');
                if (Ember['default'].isEmpty(calcEndDate)) {
                    calcEndDate = moment().endOf('day');
                } else {
                    calcEndDate = moment(calcEndDate).endOf('day');
                }
                if (calcStartDate.isBefore(reportStartDate)) {
                    calcStartDate = reportStartDate;
                }
                if (calcEndDate.isAfter(reportEndDate)) {
                    calcEndDate = reportEndDate;
                }
                var daysDiff = calcEndDate.diff(calcStartDate, 'days', true);
                if (detailed) {
                    this._addReportRow({
                        patient: visit.get('patient'),
                        patientId: visit.get('patient.displayPatientId'),
                        patientName: visit.get('patient.displayName'),
                        admissionDate: visit.get('startDate'), 
                        dischargeDate: visit.get('endDate'),                    
                        patientDays: daysDiff
                    }, false, reportColumns);
                }
                return previousValue += daysDiff;
            }.bind(this),0);
            if (detailed) {
                this._addReportRow({patientDays: 'Total: '+this._numberFormat(patientDays)}, true, reportColumns);
                
            } else {
                this._addReportRow({total: patientDays}, false, reportColumns);
            }
            this._finishReport(reportColumns);
        },
        
        _generateProcedureReport: function(reportType) {
            this._findProceduresByDate().then(function(procedures) {
                var reportColumns;
                procedures = procedures.filter(function(procedure) {
                    var visit = procedure.get('visit');
                    if (Ember['default'].isEmpty(visit) || Ember['default'].isEmpty(visit.get('patient.id'))) {
                        return false;
                    } else {
                        return true;
                    }
                });            
                if (reportType.indexOf('detailed') === 0) {
                    reportColumns = this.get('procedureDetailReportColumns');
                    var patientPromises = {};
                    procedures.forEach(function(procedure) {
                        var visit = procedure.get('visit');
                        if (!Ember['default'].isEmpty(visit)) {
                            patientPromises[procedure.get('id')] = this._getPatientDetails(visit.get('patient.id'));
                        }
                    }.bind(this));
                    
                    Ember['default'].RSVP.hash(patientPromises).then(function(resolutionHash) {
                        procedures.forEach(function(procedure) {
                            procedure.set('patient', resolutionHash[procedure.get('id')]);
                        });
                        var procedureTotals = this._totalByType(procedures, 'description', 'Total procedures');
                        this._addPatientProcedureRows(procedureTotals, reportColumns);
                        this._finishReport(reportColumns);
                    }.bind(this), function(err) {
                        this._notifyReportError('Error in  _generateProcedureReport:'+err);
                    }.bind(this));
                } else {
                    reportColumns = this.get('diagnosticReportColumns');
                    this._addRowsByType(procedures, 'description', 'Total procedures: ', reportColumns);
                    this._finishReport(reportColumns);
                }
            }.bind(this), function(err) {
                this._notifyReportError('Error in _generateProcedureReport:'+err);
            }.bind(this));
        },
        
        _generateStatusReport: function() {
            this._findPatientsByStatus().then(function(patients) {
                var reportColumns = this.get('statusReportColumns'),
                sortedPatients = patients.sortBy('lastName', 'firstName');
                this._getPatientVisits(sortedPatients).then(function(resolvedPatients) {
                    resolvedPatients.forEach(function (patient) {
                        this._addReportRow({patient: patient}, false, reportColumns);
                    }.bind(this));
                    this._finishReport(reportColumns);
                }.bind(this)).catch(function(err) {
                    this._notifyReportError('Error in _generateStatusReport:'+err); 
                }.bind(this));
            }.bind(this)).catch(function(err) {
                this._notifyReportError('Error in _generateStatusReport:'+err);
            }.bind(this));
        },
        
        _generateVisitReport: function(visits) {
            var reportColumns = this.get('reportColumns'),
                visitFilters = this.getProperties(
                    'examiner','visitDate','visitType','location','clinic',
                    'primaryDiagnosis','secondaryDiagnosis'
                );            
            for (var filter in visitFilters) {
                if (!Ember['default'].isEmpty(visitFilters[filter])) {
                    switch (filter) {
                        case 'diagnosis': {
                            visits = this._filterByLike(visits, 'diagnosisList',  visitFilters[filter]);
                            break;
                        }
                        default: {
                            visits = visits.filterBy(filter, visitFilters[filter]);
                            break;
                        }
                    }
                }
            }
            if (reportColumns.procedures.include) {
                var promisesMap = {};
                visits.forEach(function(visit) {
                    promisesMap[visit.get('id')] = visit.get('procedures');
                });
                Ember['default'].RSVP.hash(promisesMap).then(function(resolutionHash) {
                    visits.forEach(function(visit) {
                        visit.set('resolvedProcedures', resolutionHash[visit.get('id')]);
                    });
                    this._finishVisitReport(visits);    
                }.bind(this));
            } else {
                this._finishVisitReport(visits);
            }
        },
        
        _getPatientDetails: function(patientId) {
            var patientDetails = this.get('patientDetails');
            if(!Ember['default'].isEmpty(patientDetails[patientId])) {
                return Ember['default'].RSVP.resolve(patientDetails[patientId]);            
            } else {
                return this.store.find('patient', patientId);
            }
        },
        
        _getPatientVisits: function(patients) {
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                var visitHash = {
                };
                patients.forEach(function(patient) {
                    visitHash[patient.get('id')] = this.getPatientVisits(patient);
                }.bind(this));
                Ember['default'].RSVP.hash(visitHash).then(function(resolvedHash) {
                    patients.forEach(function(patient) {
                        patient.set('visits', resolvedHash[patient.get('id')]);
                    });
                    resolve(patients);
                }, reject);
            }.bind(this));
        },
        
        _haveLikeValue: function(valueToCompare, likeCondition) {
             return (valueToCompare.toLowerCase().indexOf(likeCondition.toLowerCase()) > -1);
        },
        
        _listToString: function(items, descField, dateField) {
            var itemList = [];
            if (!Ember['default'].isEmpty(items)) {
                itemList = items.map(function(item) {
                    return Ember['default'].get(item, descField) + '('+this._dateFormat(Ember['default'].get(item, dateField))+')';
                }.bind(this));
            }
            return itemList.join(',\n');
        },
        
        /**
         * Given a list of records, total them by type and also add a grand total.
         * @param records {Array} list of records to total.
         * @param typeField {String} the field in the records containing the type.
         * @param totalLabel {String} the label for the grand total.
         * @param reportColumns 
         */
        _totalByType: function(records, typeField, totalLabel) {
            var total = 0,
                types = [];
            records.forEach(function(record) {
                var type = record.get(typeField),
                    typeObject;
                if (!Ember['default'].isEmpty(type)) {
                    typeObject = types.find(function(item) {
                        var itemType = item.type;
                        return itemType.trim().toLowerCase() === type.toLowerCase();
                    });
                    if (Ember['default'].isEmpty(typeObject)) {
                        typeObject = {
                            type: type.trim(),
                            total: 0,
                            records: []
                        };
                        types.push(typeObject);
                    }
                    typeObject.total++;
                    typeObject.records.push(record);
                    total++;
                }
            });
            types = types.sortBy('type');
            types.push({type: totalLabel,total: total});
            return types;
        },
        
        _procedureListToString: function(procedures) {
            return this._listToString(procedures, 'description', 'procedureDate');      
        },
        
        _validateDates: function() {
            var alertMessage,
                endDate = this.get('endDate'),
                isValid = true,
                reportType = this.get('reportType'),
                startDate = this.get('startDate');
            if (reportType === 'status') {
                return true;
            }
            if (Ember['default'].isEmpty(startDate)) {
                alertMessage = 'Please enter a start date.';
                isValid = false;
            } else if (!Ember['default'].isEmpty(endDate) && endDate.getTime() < startDate.getTime()) {
                alertMessage = 'Please enter an end date after the start date.';
                isValid = false;
            }
            if (!isValid) {
                this.displayAlert('Error Generating Report', alertMessage);
            }
            return isValid;
        },
        
        actions: {
            generateReport: function() {
                if (this._validateDates()) {
                    var reportRows = this.get('reportRows'),
                        reportType = this.get('reportType');
                    reportRows.clear();            
                    this.showProgressModal();
                    switch (reportType) {
                        case 'diagnostic': {
                            this._generateDiagnosticReport();
                            break;
                        }
                        case 'detailedProcedures':
                        case 'procedures': {
                            this._generateProcedureReport(reportType);
                            break;
                        }
                        case 'admissions':
                        case 'discharges':
                        case 'detailedAdmissions':
                        case 'detailedDischarges':
                        case 'detailedPatientDays':
                        case 'patientDays':
                        case 'visit': {
                            this._findVisitsByDate().then(function(visits) {
                                switch (reportType) {
                                    case 'admissions':
                                    case 'detailedAdmissions':
                                    case 'detailedDischarges':
                                    case 'discharges': {
                                        this._generateAdmissionOrDischargeReport(visits, reportType);
                                        break;
                                    }
                                    case 'detailedPatientDays':
                                    case 'patientDays': {
                                        this._generatePatientDaysReport(visits, reportType);
                                        break;
                                    }
                                    case 'visit': {
                                        this._generateVisitReport(visits);
                                        break;                    
                                    }
                                }
                            }.bind(this), function(err) {
                                this._notifyReportError('Error in _findVisitsByDate:'+err);
                            }.bind(this));
                            break;
                        }
                        case 'status': {
                            this._generateStatusReport();
                            break;
                        }
                    }
                }
            },
            viewPatient: function(id) {
                this.store.find('patient', id).then(function(item) {
                    item.set('returnTo', 'patients.reports');                
                    this.transitionToRoute('patients.edit', item);
                }.bind(this));
            }

        }
    });

});
define('hospitalrun/patients/reports/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember'], function (exports, AbstractIndexRoute, Ember) {

    'use strict';

    exports['default'] = AbstractIndexRoute['default'].extend({
        pageTitle: 'Patient Report',

        //No model for reports; data gets retrieved when report is run.
        model: function() {
            return Ember['default'].RSVP.resolve();
        }

    });

});
define('hospitalrun/patients/reports/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n            <div class=\"row\">\n                ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-xs-6"),
      'label': ("Report Type"),
      'property': ("reportType"),
      'content': ("reportTypes"),
      'optionValuePath': ("content.value"),
      'optionLabelPath': ("content.name"),
      'selected': ("reportType")
    },hashTypes:{'class': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'selected': "ID"},hashContexts:{'class': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'selected': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n            </div>\n            ");
    stack1 = helpers['if'].call(depth0, "isStatusReport", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            ");
    stack1 = helpers['if'].call(depth0, "isVisitReport", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'property': ("status"),
      'label': ("Patient Status"),
      'content': ("statusList.value"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content"),
      'prompt': (" ")
    },hashTypes:{'property': "STRING",'label': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'prompt': "STRING"},hashContexts:{'property': depth0,'label': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'prompt': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n            ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                <div class=\"row\">\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("startDate"),
      'label': ("Start Date"),
      'class': ("col-sm-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("endDate"),
      'label': ("End Date"),
      'class': ("col-sm-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n                </div>        \n            ");
    return buffer;
    }

  function program6(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                <div class=\"row\">\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-sm-6"),
      'label': ("Visit Type"),
      'property': ("visitType"),
      'content': ("visitTypes"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content"),
      'prompt': (" ")
    },hashTypes:{'class': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'prompt': "STRING"},hashContexts:{'class': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'prompt': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-sm-6"),
      'label': ("Examiner"),
      'property': ("examiner"),
      'content': ("physicianList.value"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content"),
      'prompt': (" ")
    },hashTypes:{'class': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'prompt': "STRING"},hashContexts:{'class': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'prompt': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("                \n                </div>\n                <div class=\"row\">\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-sm-6"),
      'label': ("Location"),
      'property': ("location"),
      'content': ("locationList.value"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content"),
      'prompt': (" ")
    },hashTypes:{'class': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'prompt': "STRING"},hashContexts:{'class': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'prompt': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-sm-6"),
      'label': ("Clinic"),
      'property': ("clinic"),
      'content': ("clinicList.value"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content"),
      'prompt': (" ")
    },hashTypes:{'class': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'prompt': "STRING"},hashContexts:{'class': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'prompt': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n                </div>\n                <div class=\"row\">\n                    <div class=\"form-group col-xs-12\">                        \n                        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("diagnosis"),
      'label': ("Diagnosis"),
      'list': ("diagnosisList")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID"},hashContexts:{'property': depth0,'label': depth0,'list': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push(" \n                    </div>\n                </div>        \n\n                <h3>Fields to Include</h3>\n                <div class=\"row\">\n                    <div class=\"col-xs-1\"></div>\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.id.label"),
      'property': ("reportColumns.id.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.name.label"),
      'property': ("reportColumns.name.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("                \n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.age.label"),
      'property': ("reportColumns.age.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.contacts.label"),
      'property': ("reportColumns.contacts.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.dateOfBirth.label"),
      'property': ("reportColumns.dateOfBirth.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-xs-1\"></div>        \n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.examiner.label"),
      'property': ("reportColumns.examiner.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.gender.label"),
      'property': ("reportColumns.gender.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.primaryDiagnosis.label"),
      'property': ("reportColumns.primaryDiagnosis.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.procedures.label"),
      'property': ("reportColumns.procedures.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.referredBy.label"),
      'property': ("reportColumns.referredBy.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-xs-1\"></div>\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.referredDate.label"),
      'property': ("reportColumns.referredDate.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.secondaryDiagnoses.label"),
      'property': ("reportColumns.secondaryDiagnoses.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.visitDate.label"),
      'property': ("reportColumns.visitDate.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.visitLocation.label"),
      'property': ("reportColumns.visitLocation.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("reportColumns.visitType.label"),
      'property': ("reportColumns.visitType.include"),
      'class': ("col-xs-2")
    },hashTypes:{'label': "ID",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    data.buffer.push("\n                </div>\n            ");
    return buffer;
    }

  function program8(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    <div class=\"panel panel-primary\">\n        <div class=\"panel-heading\">            \n            <h3 class=\"panel-title\">");
    stack1 = helpers._triageMustache.call(depth0, "reportTitle", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "paging", options) : helperMissing.call(depth0, "partial", "paging", options))));
    data.buffer.push("</h3>\n        </div>\n        <div class=\"panel-body\">\n            <table class=\"table\">\n                <tr class=\"table-header\">\n                    ");
    stack1 = helpers.each.call(depth0, "reportHeaders", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </tr>\n                ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "report-rows", options) : helperMissing.call(depth0, "partial", "report-rows", options))));
    data.buffer.push("                \n            </table>\n        </div>\n        <div class=\"panel-footer\">\n            <a ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'href': ("csvExport")
    },hashTypes:{'href': "STRING"},hashContexts:{'href': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(" target=\"_blank\" download=\"report.csv\" class=\"btn btn-default\">Export Report</a>\n\n        </div>    \n    </div>\n");
    return buffer;
    }
  function program9(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                        <th>\n                            ");
    stack1 = helpers._triageMustache.call(depth0, "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </th>\n                    ");
    return buffer;
    }

    data.buffer.push("<div class=\"panel panel-primary\">\n    <div class=\"panel-body\">\n        ");
    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </div>\n    <div class=\"panel-footer\">\n        <button class=\"btn btn-default\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "generateReport", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">Generate Report</button>\n    </div>\n</div>\n");
    stack1 = helpers['if'].call(depth0, "showReportResults", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    return buffer;
    
  });

});
define('hospitalrun/patients/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'ember', 'hospitalrun/mixins/patient-id'], function (exports, AbstractModuleRoute, Ember, PatientId) {

    'use strict';

    exports['default'] = AbstractModuleRoute['default'].extend(PatientId['default'], {
        addCapability: 'add_patient',
        additionalModels: [{ 
            name: 'addressOptions',
            findArgs: ['option','address_options']
        }, { 
            name: 'clinicList',
            findArgs: ['lookup','clinic_list']
        }, {
            name: 'countryList',
            findArgs: ['lookup','country_list']
        }, {
            name: 'diagnosisList',
            findArgs: ['lookup','diagnosis_list']
        }, {
            name: 'locationList',
            findArgs: ['lookup','visit_location_list']
        }, {
            name: 'physicianList',
            findArgs: ['lookup','physician_list']
        }, { 
            name: 'pricingProfiles',
            findArgs: ['price-profile']
        }, {
            name: 'statusList',
            findArgs: ['lookup','patient_status_list']
        }, {
            name: 'visitTypesList',
            findArgs: ['lookup','visit_types']
        }],
        
        actions: {
            createNewVisit: function(patient, visits) {
                var lastVisit = visits.get('lastObject'), 
                    newVisit = this.get('store').createRecord('visit', {
                        visitType: 'Admission',
                        startDate: new Date(),
                        status: 'Admitted',
                        patient: patient
                    }); 
                if (!Ember['default'].isEmpty(lastVisit)) {
                    newVisit.setProperties(lastVisit.getProperties('primaryDiagnosis','primaryBillingDiagnosis'));
                }
                this.transitionTo('visits.edit', newVisit);
            }
        },
        moduleName: 'patients',
        newButtonText: '+ new patient',
        sectionTitle: 'Patients',
        subActions: [{
            text: 'Patient listing',
            linkTo: 'patients.index'
        }, {
            text: 'Reports',
            linkTo: 'patients.reports'
        }]
    });

});
define('hospitalrun/patients/search/controller', ['exports', 'hospitalrun/patients/index/controller'], function (exports, PatientListingController) {

	'use strict';

	exports['default'] = PatientListingController['default'].extend();

});
define('hospitalrun/patients/search/route', ['exports', 'hospitalrun/routes/abstract-search-route', 'hospitalrun/utils/patient-search'], function (exports, AbstractSearchRoute, PatientSearch) {

    'use strict';

    exports['default'] = AbstractSearchRoute['default'].extend({
        moduleName: 'patients',
        searchKeys: [
            'friendlyId',
            'externalPatientId',
            'firstName',
            'lastName'
        ],
        searchIndex: PatientSearch['default'],
        searchModel: 'patient'
    });

});
define('hospitalrun/patients/search/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "patients/index", options) : helperMissing.call(depth0, "partial", "patients/index", options))));
    data.buffer.push("\n");
    return buffer;
    }

    stack1 = helpers.view.call(depth0, "search-listing", {hash:{
      'newButtonText': ("New Patient"),
      'allButtonText': ("All Patients")
    },hashTypes:{'newButtonText': "STRING",'allButtonText': "STRING"},hashContexts:{'newButtonText': depth0,'allButtonText': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/patients/socialwork/expense/controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled'], function (exports, Ember, IsUpdateDisabled) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend(IsUpdateDisabled['default'], {    
        needs: 'patients',
        
        categoryTypes: [
            'Clothing',
            'Education',
            'Electricity',
            'Food',
            'Fuel',
            'Other',
            'Rent',
            'Transportation',
            'Water'
        ],
        
        editController: Ember['default'].computed.alias('controllers.patients'),
        showUpdateButton: true,
        title: 'Expense',    
        updateButtonAction: 'update',
        updateButtonText: function() {
            if (this.get('isNew')) {
                return 'Add';
            } else {
                return 'Update';
            }
        }.property('isNew'),
        
        actions: {
            cancel: function() {
                this.send('closeModal');
            },
            
            update: function() {            
                var model = this.getProperties('isNew','category','sources','cost');
                this.get('editController').send('updateExpense', model);
            }
        }
    });

});
define('hospitalrun/patients/socialwork/expense/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'label': ("Category"),
      'property': ("category"),
      'class': ("required"),
      'content': ("categoryTypes"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content"),
      'selected': ("category")
    },hashTypes:{'label': "STRING",'property': "STRING",'class': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'selected': "ID"},hashContexts:{'label': depth0,'property': depth0,'class': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'selected': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Sources"),
      'property': ("sources")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Cost"),
      'property': ("cost"),
      'class': ("required")
    },hashTypes:{'label': "STRING",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/patients/socialwork/expense/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/patients/socialwork/family-info/controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled'], function (exports, Ember, IsUpdateDisabled) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend(IsUpdateDisabled['default'], {    
        needs: 'patients',
        
        editController: Ember['default'].computed.alias('controllers.patients'),
        showUpdateButton: true,
        title: 'Family Info',    
        updateButtonAction: 'update',
        updateButtonText: function() {
            if (this.get('isNew')) {
                return 'Add';
            } else {
                return 'Update';
            }
        }.property('isNew'),
        
        actions: {
            cancel: function() {
                this.send('closeModal');
            },
            
            update: function() {
                var model = this.getProperties('isNew','name','age','civilStatus','relationship','education','occupation','income','insurance');
                this.get('editController').send('updateFamilyInfo', model);
            }
        }
    });

});
define('hospitalrun/patients/socialwork/family-info/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Name"),
      'property': ("name"),
      'class': ("required col-xs-6")
    },hashTypes:{'label': "STRING",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Age"),
      'property': ("age"),
      'class': ("col-xs-3")
    },hashTypes:{'label': "STRING",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    </div>\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Civil Status"),
      'property': ("civilStatus"),
      'class': ("col-xs-6")
    },hashTypes:{'label': "STRING",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Relationship To Patient"),
      'property': ("relationship"),
      'class': ("col-xs-6")
    },hashTypes:{'label': "STRING",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    </div>\n    <div class=\"row\">        \n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Education"),
      'property': ("education"),
      'class': ("col-xs-6")
    },hashTypes:{'label': "STRING",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Occupation"),
      'property': ("occupation"),
      'class': ("col-xs-6")
    },hashTypes:{'label': "STRING",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    </div>\n    <div class=\"row\">        \n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Income"),
      'property': ("income"),
      'class': ("col-xs-6")
    },hashTypes:{'label': "STRING",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Insurance"),
      'property': ("insurance"),
      'class': ("col-xs-6")
    },hashTypes:{'label': "STRING",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    </div>\n");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/patients/socialwork/family-info/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/pricing/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, AbstractDeleteController) {

     'use strict';

     exports['default'] = AbstractDeleteController['default'].extend({
          title: 'Delete Pricing Item'
     });

});
define('hospitalrun/pricing/delete/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1;


    data.buffer.push("<div class=\"alert alert-danger\">\n    <span class=\"glyphicon glyphicon-warning-sign\"></span> \n    Are you sure you wish to delete ");
    stack1 = helpers._triageMustache.call(depth0, "name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("?\n</div>");
    return buffer;
    
  });

});
define('hospitalrun/pricing/delete/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/pricing/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/lab-pricing-types', 'hospitalrun/mixins/imaging-pricing-types', 'hospitalrun/mixins/return-to'], function (exports, AbstractEditController, Ember, LabPricingTypes, ImagingPricingTypes, ReturnTo) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend(LabPricingTypes['default'], ImagingPricingTypes['default'], ReturnTo['default'], {
        needs: ['pricing'],
        
        actions: {
            addOverride: function(override) {
                var pricingOverrides = this.get('pricingOverrides');
                pricingOverrides.addObject(override);
                this.send('update', true);
                this.send('closeModal');         
            },        
            deleteOverride: function(model) {
                var overrideToDelete = model.overrideToDelete,
                    pricingOverrides = this.get('pricingOverrides');
                pricingOverrides.removeObject(overrideToDelete);            
                overrideToDelete.destroyRecord().then(function() {
                    this.send('update', true);
                    this.send('closeModal');
                }.bind(this));
            },
            editOverride: function(overrideToEdit) {
                if (Ember['default'].isEmpty(overrideToEdit)) {
                    overrideToEdit = this.store.createRecord('override-price');
                }                              
                this.send('openModal', 'pricing.override', overrideToEdit);
            },
            showDeleteOverride: function(overrideToDelete) {
                var message= 'Are you sure you want to delete this override?',
                    model = Ember['default'].Object.create({
                        overrideToDelete: overrideToDelete
                    }),
                    title = 'Delete Override';
                this.displayConfirm(title, message, 'deleteOverride', model);
            }
        },
        
        categories: [
            'Imaging',
            'Lab',
            'Procedure',
            'Ward'
        ],
        expenseAccountList: Ember['default'].computed.alias('controllers.pricing.expenseAccountList'),
        imagingPricingTypes: Ember['default'].computed.alias('controllers.pricing.imagingPricingTypes'),
        labPricingTypes: Ember['default'].computed.alias('controllers.pricing.labPricingTypes'),
        procedurePricingTypes: Ember['default'].computed.alias('controllers.pricing.procedurePricingTypes'),
        wardPricingTypes: Ember['default'].computed.alias('controllers.pricing.wardPricingTypes'),
        
        lookupListsToUpdate: function() {
            var category = this.get('category').toLowerCase(),
                listsToUpdate = [{
                name: 'expenseAccountList', 
                property: 'expenseAccount', 
                id: 'expense_account_list'
            }];
            listsToUpdate.push({       
                name: category+'PricingTypes', 
                property: 'type',
                id: category+'_pricing_types'
            });
            return listsToUpdate;
        }.property('category'),
        
        pricingTypes: function() {
            var category = this.get('category');
            if (!Ember['default'].isEmpty(category)) {
                var typesList = this.get(category.toLowerCase() + 'PricingTypes');
                if (Ember['default'].isEmpty(typesList) || Ember['default'].isEmpty(typesList.get('value'))) {
                    if (category === 'Lab') {
                        return Ember['default'].Object.create({value: this.defaultLabPricingTypes});
                    } else if (category === 'Imaging') {
                        return Ember['default'].Object.create({value: this.defaultImagingPricingTypes});
                    }
                }
                return typesList;
            }
        }.property('category'),
        
        updateCapability: 'add_pricing',
        
        afterUpdate: function(record) {
            var message =  'The pricing record for %@ has been saved.'.fmt(record.get('name'));
            this.displayAlert('Pricing Item Saved', message);        
        }
    });

});
define('hospitalrun/pricing/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route'], function (exports, AbstractEditRoute) {

    'use strict';

    exports['default'] = AbstractEditRoute['default'].extend({
        editTitle: 'Edit Pricing Item',
        modelName: 'pricing',
        newTitle: 'New Pricing Item',
        
        actions: {
            deleteOverride: function(overrideToDelete) {
                this.controller.send('deleteOverride', overrideToDelete);
            }
        }
    });

});
define('hospitalrun/pricing/edit/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Name"),
      'property': ("name"),
      'class': ("required")
    },hashTypes:{'label': "STRING",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Price"),
      'property': ("price"),
      'class': ("required col-xs-2")
    },hashTypes:{'label': "STRING",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("expenseAccount"),
      'label': ("Department"),
      'list': ("expenseAccountList"),
      'selection': ("expenseAccount"),
      'class': ("col-xs-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n    </div>\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'label': ("Category"),
      'class': ("required col-xs-4"),
      'property': ("category"),
      'content': ("categories"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content"),
      'selected': ("category")
    },hashTypes:{'label': "STRING",'class': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'selected': "ID"},hashContexts:{'label': depth0,'class': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'selected': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("    \n        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("type"),
      'label': ("Type"),
      'list': ("pricingTypes"),
      'selection': ("type"),
      'class': ("col-xs-4"),
      'prompt': (" ")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID",'class': "STRING",'prompt': "STRING"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0,'class': depth0,'prompt': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n    </div>\n\n    <div class=\"panel\">\n        <div class=\"panel-heading\">\n            <h3 class=\"panel-title\">\n                Pricing profile overrides\n                ");
    stack1 = helpers['if'].call(depth0, "showUpdateButton", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </h3>\n        </div>\n        <div class=\"panel-body detail-section-content\">\n            <table class=\"table\">\n                <tbody>\n                    <tr class=\"table-header\">\n                        <th>Pricing Profile</th>\n                        <th>Price</th>\n                        ");
    stack1 = helpers['if'].call(depth0, "showUpdateButton", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    </tr>\n                    ");
    stack1 = helpers['with'].call(depth0, "", "as", "parentController", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </tbody>        \n            </table>\n        </div>\n    </div>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                    <button class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editOverride", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span>Add Override</button>\n                ");
    return buffer;
    }

  function program4(depth0,data) {
    
    
    data.buffer.push("\n                            <th>Actions</th>\n                        ");
    }

  function program6(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                        ");
    stack1 = helpers.each.call(depth0, "pricingOverrides", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    ");
    return buffer;
    }
  function program7(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                            <tr>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "profile.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "price", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>                                \n                                    ");
    stack1 = helpers['if'].call(depth0, "parentController.showUpdateButton", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("                                \n                                </td>                            \n                            </tr>\n                        ");
    return buffer;
    }
  function program8(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                        <button class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editOverride", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                                        <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showDeleteOverride", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                                            <span class=\"octicon octicon-x\"></span>  Delete\n                                        </button>\n                                    ");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/pricing/edit/view', ['exports', 'hospitalrun/views/panel'], function (exports, PanelView) {

	'use strict';

	exports['default'] = PanelView['default'].extend();

});
define('hospitalrun/pricing/imaging/controller', ['exports', 'hospitalrun/pricing/index/controller'], function (exports, PricingIndexController) {

	'use strict';

	exports['default'] = PricingIndexController['default'].extend();

});
define('hospitalrun/pricing/imaging/route', ['exports', 'hospitalrun/pricing/index/route'], function (exports, PricingIndexRoute) {

    'use strict';

    exports['default'] = PricingIndexRoute['default'].extend({
        category: 'Imaging',
        pageTitle: 'Imaging Pricing',
        
        actions: {
            editItem: function(item) {
                item.set('returnTo','pricing.imaging');
                this.transitionTo('pricing.edit', item);
            }
        }
    });

});
define('hospitalrun/pricing/imaging/view', ['exports', 'hospitalrun/views/item-listing'], function (exports, ItemListingView) {

    'use strict';

    exports['default'] = ItemListingView['default'].extend({
        templateName: 'pricing/index'
    });

});
define('hospitalrun/pricing/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, AbstractPagedController) {

    'use strict';

    exports['default'] = AbstractPagedController['default'].extend({
        addPermission: 'add_pricing',
        deletePermission: 'delete_pricing',
        showCategory: true,
        startKey: []
    });

});
define('hospitalrun/pricing/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember'], function (exports, AbstractIndexRoute, Ember) {

    'use strict';

    exports['default'] = AbstractIndexRoute['default'].extend({
        category: null,
        modelName: 'pricing',
        pageTitle: 'All Pricing Items',    
            
        _getStartKeyFromItem: function(item) {
            var category = item.get('category'),
                keyPrefix = this.get('keyPrefix'),
                name = item.get('name'),
                type = item.get('type');
            return [category, name, type, keyPrefix+item.get('id')];        
        },
        
        _modelQueryParams: function() {
            var category = this.get('category'),
                keyPrefix = this.get('keyPrefix'),
                maxValue = this.get('maxValue'),
                queryParams = {
                    mapReduce: 'pricing_by_category'
                };
            if (!Ember['default'].isEmpty(category)) {
                queryParams.options = {
                    startkey: [category, null, null, null],
                    endkey: [category, {}, {}, keyPrefix+maxValue]
                };
            }
            return queryParams;
        }    
    });

});
define('hospitalrun/pricing/index/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <table class=\"table\">\n        <tr class=\"table-header\">\n            ");
    stack1 = helpers['if'].call(depth0, "showCategory", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            <th>Name</th>\n            <th>Price</th>\n            <th>Type</th>\n            <th>Expense To</th>\n            ");
    stack1 = helpers['if'].call(depth0, "showActions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        </tr>\n        ");
    stack1 = helpers['with'].call(depth0, "", "as", "parentController", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </table>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    
    data.buffer.push("\n                <th>Category</th>\n            ");
    }

  function program4(depth0,data) {
    
    
    data.buffer.push("\n                <th>Actions</th>\n            ");
    }

  function program6(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            ");
    stack1 = helpers.each.call(depth0, {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[],types:[],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    return buffer;
    }
  function program7(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                <tr ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editItem", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                    ");
    stack1 = helpers['if'].call(depth0, "parentController.showCategory", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "price", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "type", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "expenseAccount", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    ");
    stack1 = helpers['if'].call(depth0, "parentController.showActions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </tr>\n            ");
    return buffer;
    }
  function program8(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                        <td>");
    stack1 = helpers._triageMustache.call(depth0, "category", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    ");
    return buffer;
    }

  function program10(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                        <td>\n                            ");
    stack1 = helpers['if'].call(depth0, "parentController.canEdit", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                            ");
    stack1 = helpers['if'].call(depth0, "parentController.canDelete", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(13, program13, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </td>\n                    ");
    return buffer;
    }
  function program11(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                <button class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editItem", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                            ");
    return buffer;
    }

  function program13(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "deleteItem", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span> Delete</button>\n                            ");
    return buffer;
    }

  function program15(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <div class=\"alert alert-info\">\n        <p>No pricing items found. ");
    stack1 = helpers['if'].call(depth0, "canAdd", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(16, program16, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n    </div>\n");
    return buffer;
    }
  function program16(depth0,data) {
    
    var buffer = '';
    data.buffer.push("<a href=\"#\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "newItem", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">Create a new record?</a>");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "hasRecords", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(15, program15, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/pricing/index/view', ['exports', 'hospitalrun/views/item-listing'], function (exports, ItemListingView) {

	'use strict';

	exports['default'] = ItemListingView['default'].extend();

});
define('hospitalrun/pricing/lab/controller', ['exports', 'hospitalrun/pricing/index/controller'], function (exports, PricingIndexController) {

	'use strict';

	exports['default'] = PricingIndexController['default'].extend();

});
define('hospitalrun/pricing/lab/route', ['exports', 'hospitalrun/pricing/index/route'], function (exports, PricingIndexRoute) {

    'use strict';

    exports['default'] = PricingIndexRoute['default'].extend({
        category: 'Lab',
        pageTitle: 'Lab Pricing',
        
        actions: {
            editItem: function(item) {
                item.set('returnTo','pricing.lab');
                this.transitionTo('pricing.edit', item);
            }
        }
    });

});
define('hospitalrun/pricing/lab/view', ['exports', 'hospitalrun/views/item-listing'], function (exports, ItemListingView) {

    'use strict';

    exports['default'] = ItemListingView['default'].extend({
        templateName: 'pricing/index'
    });

});
define('hospitalrun/pricing/override/controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled'], function (exports, Ember, IsUpdateDisabled) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend(IsUpdateDisabled['default'], {
        needs: ['pricing','pricing/edit'],        

        actions: {
            cancel: function() {
                this.get('model').rollback();
                this.send('closeModal');
            },
            
            update: function() {
                var isNew = this.get('isNew'),
                    override = this.get('model');
                override.save().then(function() {
                    if (isNew) {
                        this.get('editController').send('addOverride',override);
                    } else {
                        this.send('closeModal');
                    }
                }.bind(this));                           
            }
        },

        editController: Ember['default'].computed.alias('controllers.pricing/edit'),    
        pricingProfiles: Ember['default'].computed.alias('controllers.pricing.pricingProfiles'),
        showUpdateButton: true,
        
        title: function() {
            if (this.get('isNew')) {            
                return 'Add Override';
            } else {
                return 'Edit Override';
            }
        }.property('isNew'),
        
        updateButtonAction: 'update',
        updateButtonText: function() {
            var isNew = this.get('isNew');
            if (isNew) {
                return 'Add';
            } else {
                return 'Update';
            }
        }.property('isNew'),

        
    });

});
define('hospitalrun/pricing/override/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'label': ("Pricing Profile"),
      'property': ("profile"),
      'content': ("pricingProfiles"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content.name"),
      'class': ("required"),
      'prompt': (" ")
    },hashTypes:{'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'class': "STRING",'prompt': "STRING"},hashContexts:{'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'class': depth0,'prompt': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Price"),
      'property': ("price"),
      'class': ("required")
    },hashTypes:{'label': "STRING",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/pricing/override/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/pricing/procedure/controller', ['exports', 'hospitalrun/pricing/index/controller'], function (exports, PricingIndexController) {

	'use strict';

	exports['default'] = PricingIndexController['default'].extend();

});
define('hospitalrun/pricing/procedure/route', ['exports', 'hospitalrun/pricing/index/route'], function (exports, PricingIndexRoute) {

    'use strict';

    exports['default'] = PricingIndexRoute['default'].extend({
        category: 'Procedure',
        pageTitle: 'Procedure Pricing',
        
        actions: {
            editItem: function(item) {
                item.set('returnTo','pricing.procedure');
                this.transitionTo('pricing.edit', item);
            }
        }
    });

});
define('hospitalrun/pricing/procedure/view', ['exports', 'hospitalrun/views/item-listing'], function (exports, ItemListingView) {

    'use strict';

    exports['default'] = ItemListingView['default'].extend({
        templateName: 'pricing/index'
    });

});
define('hospitalrun/pricing/profiles/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, AbstractPagedController) {

    'use strict';

    exports['default'] = AbstractPagedController['default'].extend({
        addPermission: 'add_pricing_profile',
        deletePermission: 'delete_pricing_profile'    
    });

});
define('hospitalrun/pricing/profiles/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller'], function (exports, AbstractEditController) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend({
        actions: {
            cancel: function() {
                this.send('closeModal');
            }
        },
        
        afterUpdate: function(record) {
            var message =  'The pricing profile %@ has been saved.'.fmt(record.get('name'));
            this.displayAlert('Pricing Profile Saved', message);
            this.send('refreshProfiles');
        }
    });

});
define('hospitalrun/pricing/profiles/edit/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("name"),
      'label': ("Name"),
      'class': ("required")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("discountPercentage"),
      'label': ("Discount Percentage")
    },hashTypes:{'property': "STRING",'label': "STRING"},hashContexts:{'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("discountAmount"),
      'label': ("Discount Amount")
    },hashTypes:{'property': "STRING",'label': "STRING"},hashContexts:{'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/pricing/profiles/edit/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/pricing/profiles/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember', 'hospitalrun/mixins/modal-helper'], function (exports, AbstractIndexRoute, Ember, ModalHelper) {

    'use strict';

    exports['default'] = AbstractIndexRoute['default'].extend(ModalHelper['default'], {
        category: null,
        modelName: 'price-profile',
        pageTitle: 'Pricing Profiles',
        
        actions: {
            editItem: function(item) {
                this.send('openModal', 'pricing.profiles.edit', item);
            },
            
            deleteItem: function(item) {
                var message= 'Are you sure you want to delete this profile?',
                    model = Ember['default'].Object.create({
                        itemToDelete: item                
                    }),
                    title = 'Delete Profile';
                this.displayConfirm(title, message, 'deletePricingProfile', model);
            }, 
            
            deletePricingProfile: function(model) {
                model.itemToDelete.destroyRecord();
            },
            
            newItem: function() {
                var newItem = this.store.createRecord('price-profile');
                this.send('openModal', 'pricing.profiles.edit', newItem);
            },
            
            refreshProfiles: function() {
                this.refresh();
            }    
        }
    });

});
define('hospitalrun/pricing/profiles/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <table class=\"table\">\n        <tr class=\"table-header\">\n            <th>Name</th>\n            <th>Discount Amount</th>\n            <th>Discount Percentage</th>\n            ");
    stack1 = helpers['if'].call(depth0, "showActions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        </tr>\n        ");
    stack1 = helpers['with'].call(depth0, "", "as", "parentController", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </table>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    
    data.buffer.push("\n                <th>Actions</th>\n            ");
    }

  function program4(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            ");
    stack1 = helpers.each.call(depth0, {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[],types:[],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    return buffer;
    }
  function program5(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                <tr ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editItem", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "discountAmount", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "discountPercentage", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                    ");
    stack1 = helpers['if'].call(depth0, "parentController.showActions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </tr>\n            ");
    return buffer;
    }
  function program6(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                        <td>\n                            ");
    stack1 = helpers['if'].call(depth0, "parentController.canEdit", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                            ");
    stack1 = helpers['if'].call(depth0, "parentController.canDelete", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </td>\n                    ");
    return buffer;
    }
  function program7(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                <button class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editItem", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                            ");
    return buffer;
    }

  function program9(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "deleteItem", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span> Delete</button>\n                            ");
    return buffer;
    }

  function program11(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <div class=\"alert alert-info\">\n        <p>No pricing profiles found. ");
    stack1 = helpers['if'].call(depth0, "canAdd", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(12, program12, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n    </div>\n");
    return buffer;
    }
  function program12(depth0,data) {
    
    var buffer = '';
    data.buffer.push("<a href=\"#\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "newItem", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">Create a new record?</a>");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "hasRecords", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(11, program11, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/pricing/profiles/view', ['exports', 'hospitalrun/views/item-listing'], function (exports, ItemListingView) {

	'use strict';

	exports['default'] = ItemListingView['default'].extend();

});
define('hospitalrun/pricing/route', ['exports', 'hospitalrun/routes/abstract-module-route'], function (exports, AbstractModuleRoute) {

    'use strict';

    exports['default'] = AbstractModuleRoute['default'].extend({
        addCapability: 'add_pricing',
        additionalModels: [{
            name: 'expenseAccountList',
            findArgs: ['lookup','expense_account_list']
        }, { 
            name: 'imagingPricingTypes',
            findArgs: ['lookup','imaging_pricing_types']
        }, { 
            name: 'labPricingTypes',
            findArgs: ['lookup','lab_pricing_types']
        }, { 
            name: 'procedurePricingTypes',
            findArgs: ['lookup','procedure_pricing_types']
        }, { 
            name: 'pricingProfiles',
            findArgs: ['price-profile']
        }, { 
            name: 'wardPricingTypes',
            findArgs: ['lookup','ward_pricing_types']
        }],    
        allowSearch: true,
        moduleName: 'pricing',
        newButtonText: '+ new item',
        sectionTitle: 'Pricing',
        subActions: [{
            text: 'All Pricing Items',
            linkTo: 'pricing.index'
        }, {
            text: 'Imaging Pricing',
            linkTo: 'pricing.imaging'
        }, {
            text: 'Lab Pricing',
            linkTo: 'pricing.lab'
        }, {
            text: 'Procedure Pricing',
            linkTo: 'pricing.procedure'
        }, {
            text: 'Ward Pricing',
            linkTo: 'pricing.ward'
        }, {
            text: 'Pricing Profiles',
            linkTo: 'pricing.profiles'
        }]
    });

});
define('hospitalrun/pricing/search/controller', ['exports', 'hospitalrun/patients/index/controller'], function (exports, PatientListingController) {

	'use strict';

	exports['default'] = PatientListingController['default'].extend();

});
define('hospitalrun/pricing/search/route', ['exports', 'hospitalrun/routes/abstract-search-route', 'hospitalrun/utils/pricing-search'], function (exports, AbstractSearchRoute, PricingSearch) {

    'use strict';

    exports['default'] = AbstractSearchRoute['default'].extend({
        moduleName: 'pricing',
        searchKeys: [
            'name'
        ],
        searchIndex: PricingSearch['default'],
        searchModel: 'pricing'
    });

});
define('hospitalrun/pricing/search/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "pricing/index", options) : helperMissing.call(depth0, "partial", "pricing/index", options))));
    data.buffer.push("\n");
    return buffer;
    }

    stack1 = helpers.view.call(depth0, "search-listing", {hash:{
      'newButtonText': ("New Item"),
      'allButtonText': ("All Items")
    },hashTypes:{'newButtonText': "STRING",'allButtonText': "STRING"},hashContexts:{'newButtonText': depth0,'allButtonText': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/pricing/ward/controller', ['exports', 'hospitalrun/pricing/index/controller'], function (exports, PricingIndexController) {

	'use strict';

	exports['default'] = PricingIndexController['default'].extend();

});
define('hospitalrun/pricing/ward/route', ['exports', 'hospitalrun/pricing/index/route'], function (exports, PricingIndexRoute) {

    'use strict';

    exports['default'] = PricingIndexRoute['default'].extend({
        category: 'Ward',
        pageTitle: 'Ward Pricing',
        
        actions: {
            editItem: function(item) {
                item.set('returnTo','pricing.ward');
                this.transitionTo('pricing.edit', item);
            }
        }
    });

});
define('hospitalrun/pricing/ward/view', ['exports', 'hospitalrun/views/item-listing'], function (exports, ItemListingView) {

    'use strict';

    exports['default'] = ItemListingView['default'].extend({
        templateName: 'pricing/index'
    });

});
define('hospitalrun/print/invoice/controller', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend({
        actions: {
            returnToInvoice: function() {
                this.transitionTo('invoices.edit', this.get('model'));
            }
        }
    });

});
define('hospitalrun/print/invoice/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push(" \n                <tr>\n                    <td colspan=\"6\">\n                        <strong>");
    stack1 = helpers._triageMustache.call(depth0, "category", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</strong>\n                    </td>\n                </tr>\n                ");
    stack1 = helpers.each.call(depth0, "items", {hash:{
      'itemController': ("invoices/line-item")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                <tr>\n                    <td><strong>Total ");
    stack1 = helpers._triageMustache.call(depth0, "category", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</strong></td>\n                    <td class=\"text-right\"><strong>");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "total", options) : helperMissing.call(depth0, "number-format", "total", options))));
    data.buffer.push("</strong></td>\n                    <td class=\"text-right\"><strong>");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "discount", options) : helperMissing.call(depth0, "number-format", "discount", options))));
    data.buffer.push("</strong></td>\n                    <td class=\"text-right\"><strong>");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "nationalInsurance", options) : helperMissing.call(depth0, "number-format", "nationalInsurance", options))));
    data.buffer.push("</strong></td>\n                    <td class=\"text-right\"><strong>");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "privateInsurance", options) : helperMissing.call(depth0, "number-format", "privateInsurance", options))));
    data.buffer.push("</strong></td>\n                    <td class=\"text-right\"><strong>");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "amountOwed", options) : helperMissing.call(depth0, "number-format", "amountOwed", options))));
    data.buffer.push("</strong></td>\n                </tr>\n            ");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("        \n                    <tr>\n                        <td>\n                            ");
    stack1 = helpers._triageMustache.call(depth0, "name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </td>\n                        <td class=\"text-right\">\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "total", options) : helperMissing.call(depth0, "number-format", "total", options))));
    data.buffer.push("                    \n                        </td>\n                        <td class=\"text-right\">\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "discount", options) : helperMissing.call(depth0, "number-format", "discount", options))));
    data.buffer.push("\n                        </td>\n                        <td class=\"text-right\">\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "nationalInsurance", options) : helperMissing.call(depth0, "number-format", "nationalInsurance", options))));
    data.buffer.push("\n                        </td>\n                        <td class=\"text-right\">\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "privateInsurance", options) : helperMissing.call(depth0, "number-format", "privateInsurance", options))));
    data.buffer.push("\n                        </td>\n                        <td class=\"text-right\">");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "amountOwed", options) : helperMissing.call(depth0, "number-format", "amountOwed", options))));
    data.buffer.push("</td>\n                    </tr>\n                ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            <tr>\n                <td class=\"col-xs-12\">\n                    Discharge Notes: ");
    stack1 = helpers._triageMustache.call(depth0, "visit.dischargeInfo", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </td>\n            </tr>              \n            ");
    return buffer;
    }

  function program6(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            <tr>\n                <td class=\"col-xs-12\">\n                    Remarks: ");
    stack1 = helpers._triageMustache.call(depth0, "remarks", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </td>\n            </tr>              \n            ");
    return buffer;
    }

  function program8(depth0,data) {
    
    
    data.buffer.push("Return");
    }

    data.buffer.push("<div class=\"panel panel-primary\">\n    <div class=\"panel-body\">\n        <h5 class=\"text-center\">\n            TEBOW CURE HOSPITAL\n        </h5>\n        <p class=\"text-center\">J.P. Laurel Ave. corner Banawe St. Brgy Aquino Davao City, Philippines</p>\n        <p class=\"text-center\">Telephone: (082) 300-5345    Email: info@tebowcure.org</p>\n        <h5 class=\"text-center\">\n            PATIENT'S\n        </h5>\n        <h5 class=\"text-center\">\n            BILLING STATEMENT\n        </h5>\n        <table>\n            <tr>\n                <td colspan=\"2\" class=\"col-xs-8\">\n                    NAME OF PATIENT: ");
    stack1 = helpers._triageMustache.call(depth0, "patient.displayName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </td>\n                <td class=\"col-xs-4\">\n                    PATIENT #:");
    stack1 = helpers._triageMustache.call(depth0, "patient.displayPatientId", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </td>\n            </tr>\n            <tr>\n                <td class=\"col-xs-5\">\n                    AGE: ");
    stack1 = helpers._triageMustache.call(depth0, "patient.age", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(" \n                </td>\n                <td class=\"col-xs-3\">\n                    ADMITTED: ");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "visit.startDate", options) : helperMissing.call(depth0, "date-format", "visit.startDate", options))));
    data.buffer.push("\n                </td>\n                <td class=\"col-xs-4\"></td>\n            </tr>\n            <tr>\n                <td class=\"col-xs-5\"></td>\n                <td class=\"col-xs-3\">DISCHARGE: ");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "visit.endDate", options) : helperMissing.call(depth0, "date-format", "visit.endDate", options))));
    data.buffer.push("</td>\n                <td class=\"col-xs-4\"></td>\n            </tr>\n            <tr>\n                <td colspan=\"3\" class=\"col-xs-12\">\n                    ADDRESS: ");
    stack1 = helpers._triageMustache.call(depth0, "patient.displayAddress", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </td>\n            </tr>\n        </table>\n        <table class=\"table\">\n            <tr class=\"table-header\">\n                <th>Description</th>\n                <th class=\"text-right\">Actual Charges</th>\n                <th class=\"text-right\">Discount</th>\n                <th class=\"text-right\">PhilHealth</th>\n                <th class=\"text-right\">HMO/COM</th>\n                <th class=\"text-right\">Excess</th>\n            </tr>\n            ");
    stack1 = helpers.each.call(depth0, "lineItemsByCategory", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n             <tr>\n                <td><strong>Total</strong></td>\n                <td class=\"text-right\"><strong>");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "total", options) : helperMissing.call(depth0, "number-format", "total", options))));
    data.buffer.push("</strong></td>\n                <td class=\"text-right\"><strong>");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "discount", options) : helperMissing.call(depth0, "number-format", "discount", options))));
    data.buffer.push("</strong></td>\n                <td class=\"text-right\"><strong>");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "nationalInsurance", options) : helperMissing.call(depth0, "number-format", "nationalInsurance", options))));
    data.buffer.push("</strong></td>\n                <td class=\"text-right\"><strong>");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "privateInsurance", options) : helperMissing.call(depth0, "number-format", "privateInsurance", options))));
    data.buffer.push("</strong></td>\n                <td class=\"text-right\"><strong>");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "amountOwed", options) : helperMissing.call(depth0, "number-format", "amountOwed", options))));
    data.buffer.push("</strong></td>\n            </tr>\n            <tr>\n                <td><strong>Payments/Deposits</strong></td>\n                <td colspan=\"4\"></td>\n                <td class=\"text-right\">-");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "paidTotal", options) : helperMissing.call(depth0, "number-format", "paidTotal", options))));
    data.buffer.push("</td>                            \n                <td></td>\n            </tr>\n            <tr>\n                <td><strong>Grand Total</strong></td>\n                <td colspan=\"4\"></td>\n                <td class=\"text-right\"><strong>");
    data.buffer.push(escapeExpression((helper = helpers['number-format'] || (depth0 && depth0['number-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "remainingBalance", options) : helperMissing.call(depth0, "number-format", "remainingBalance", options))));
    data.buffer.push("</strong></td>                            \n                <td></td>\n            </tr>\n        </table>\n        <table>\n            ");
    stack1 = helpers['if'].call(depth0, "visit.dischargeInfo", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            ");
    stack1 = helpers['if'].call(depth0, "remarks", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            <tr>\n                <td class=\"col-xs-7\"></td>\n                <td class=\"col-xs-5\">were deducted during my confinement</td>\n            </tr>\n            <tr>\n                <td class=\"col-xs-8\">Billed by: ");
    stack1 = helpers._triageMustache.call(depth0, "modifiedBy", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                <td class=\"col-xs-4\">__________________________________________</td>\n            </tr>\n            <tr>\n                <td class=\"col-xs-8\">Bill Date: ");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "billDate", options) : helperMissing.call(depth0, "date-format", "billDate", options))));
    data.buffer.push("</td>\n                <td class=\"text-center col-xs-4\">Patient-Member</td>\n            </tr>\n            <tr>\n                <td class=\"col-xs-8\"></td>\n                <td class=\"col-xs-4\">__________________________________________</td>\n            </tr>  \n            <tr>\n                <td class=\"col-xs-8\">Certified Correct by: Leron L. Lehman- Executive Director</td>\n                <td class=\"text-center col-xs-4\">Relationship/Contact no.</td>\n            </tr>  \n\n        </table>\n    </div>\n    <div class=\"panel-footer\">\n        ");
    stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{
      'class': ("btn btn-default warning")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0,depth0],types:["STRING","ID"],data:data},helper ? helper.call(depth0, "invoices.edit", "", options) : helperMissing.call(depth0, "link-to", "invoices.edit", "", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </div>\n</div>");
    return buffer;
    
  });

});
define('hospitalrun/procedures/charge/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember'], function (exports, AbstractEditController, Ember) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend({
        needs: ['procedures/edit'],
        cancelAction: 'closeModal',
        newPricingItem: false,
        requestingController: Ember['default'].computed.alias('controllers.procedures/edit'),
        pricingList: Ember['default'].computed.alias('controllers.procedures/edit.pricingList'),
        
        updateCapability: 'add_charge',

        itemChanged: function() {
            var selectedItem = this.get('selectedItem');
            if (!Ember['default'].isEmpty(selectedItem)) {            
                this.store.find('pricing', selectedItem._id.substr(8)).then(function(item) {
                    this.set('pricingItem', item);
                }.bind(this));
            }
        }.observes('selectedItem'),
        
        pricingItemChanged: function() {
            var itemName = this.get('itemName'),
                pricingItem = this.get('pricingItem');
            if (!Ember['default'].isEmpty(pricingItem)) {
                this.set('newPricingItem', false);
                if (pricingItem.get('name') !== itemName) {
                    this.set('itemName', pricingItem.get('name'));
                }
            } else {
                this.set('newPricingItem', true);
            }
        }.observes('pricingItem'),
        
        title: function() {
            var isNew = this.get('isNew');
            if (isNew) {
                return 'Add Charge Item';
            }
            return 'Edit Charge Item';
    	}.property('isNew'),    
        
        beforeUpdate: function() {
            var isNew = this.get('isNew');
            if (isNew) {
                this.set('newCharge', true);         
            }
            if (this.get('newPricingItem')) {
                return new Ember['default'].RSVP.Promise(function(resolve, reject) {                
                    var newPricing = this.store.createRecord('pricing', {
                        name: this.get('itemName'),
                        category: this.get('pricingCategory')
                    });
                    newPricing.save().then(function() {
                        this.get('pricingList').addObject({
                            _id: 'pricing_'+ newPricing.get('id'),
                            name: newPricing.get('name')
                        });
                        this.set('pricingItem', newPricing);
                        resolve();
                    }.bind(this), reject);
                }.bind(this));
            } else {
                return Ember['default'].RSVP.Promise.resolve();
            }
        },
        
        afterUpdate: function(record) {
            if (this.get('newCharge')) {            
                this.get('requestingController').send('addCharge', record);
            } else {
                this.send('closeModal');
            }        
        }
    });

});
define('hospitalrun/procedures/charge/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['pricing-typeahead'] || (depth0 && depth0['pricing-typeahead']),options={hash:{
      'property': ("itemName"),
      'label': ("Item"),
      'content': ("pricingList"),
      'selection': ("selectedItem"),
      'class': ("required")
    },hashTypes:{'property': "STRING",'label': "STRING",'content': "ID",'selection': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'content': depth0,'selection': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "pricing-typeahead", options))));
    data.buffer.push("   \n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Quantity"),
      'property': ("quantity"),
      'class': ("col-xs-3 required")
    },hashTypes:{'label': "STRING",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("    \n        ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("dateCharged"),
      'label': ("Date Charged"),
      'class': ("col-xs-4 required")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n    </div>\n");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/procedures/charge/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/procedures/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/charge-actions', 'ember', 'hospitalrun/mixins/patient-submodule'], function (exports, AbstractEditController, ChargeActions, Ember, PatientSubmodule) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend(ChargeActions['default'], PatientSubmodule['default'], {
        needs: ['visits','visits/edit','pouchdb'],

        canAddProcedure: function() {        
            return this.currentUserCan('add_procedure');
        }.property(),
        
        chargePricingCategory: 'Procedure',
        chargeRoute: 'procedures.charge',
        
        anesthesiaTypes: Ember['default'].computed.alias('controllers.visits.anesthesiaTypes'),
        anesthesiologistList: Ember['default'].computed.alias('controllers.visits.anesthesiologistList'),
        cptCodeList: Ember['default'].computed.alias('controllers.visits.cptCodeList'),
        physicianList: Ember['default'].computed.alias('controllers.visits.physicianList'),
        procedureList: Ember['default'].computed.alias('controllers.visits.procedureList'),
        procedureLocations: Ember['default'].computed.alias('controllers.visits.procedureLocations'),
        lookupListsToUpdate: [{
            name: 'anesthesiaTypes',
            property: 'anesthesiaType',
            id: 'anesthesia_types'
        }, {
            name: 'anesthesiologistList',
            property: 'anesthesiologist',
            id: 'anesthesiologists'
        }, {
            name: 'cptCodeList',
            property: 'cptCode',
            id: 'cpt_code_list'
        }, {
            name: 'physicianList',
            property: 'assistant',
            id: 'physician_list'
        }, {
            name: 'physicianList',
            property: 'physician',
            id: 'physician_list'
        }, {
            name: 'procedureList',
            property: 'description',
            id: 'procedure_list'
        }, {
            name: 'procedureLocations',
            property: 'location',
            id: 'procedure_locations'
        }],
        
        editController: Ember['default'].computed.alias('controllers.visits/edit'),
        pricingList: null, //This gets filled in by the route
        pricingTypes: Ember['default'].computed.alias('controllers.visits.procedurePricingTypes'),
        newProcedure: false,
        
        title: function() {
            var isNew = this.get('isNew');
            if (isNew) {
                return 'Add Procedure';
            }
            return 'Edit Procedure';
    	}.property('isNew'),
        
        updateCapability: 'add_charge',
        
        actions: {
            showAddMedication: function() {
                var newCharge = this.get('store').createRecord('proc-charge',{
                    dateCharged: new Date(),
                    newMedicationCharge: true,
                    quantity: 1
                });
                this.send('openModal','procedures.medication', newCharge);
            },
            
            showEditMedication: function(charge) {
                this.send('openModal','procedures.medication', charge);
            },
            
            showDeleteMedication: function(charge) {
                this.send('openModal', 'dialog', Ember['default'].Object.create({
                    confirmAction: 'deleteCharge',
                    title: 'Delete Medication Used',
                    message: 'Are you sure you want to delete this medication?',
                    chargeToDelete: charge,
                    updateButtonAction: 'confirm',
                    updateButtonText: 'Ok'
                }));                 
            }
        },
        
        beforeUpdate: function() {
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                this.updateCharges().then(function() {
                    if (this.get('isNew')) {
                        this.addChildToVisit(this.get('model'), 'procedures').then(resolve, reject);
                    } else {
                        resolve();
                    }
                }.bind(this), reject);
            }.bind(this));
        },
        
        afterUpdate: function() {
            var alertTitle = 'Procedure Saved',
                alertMessage = 'The procedure record has been saved.';
            this.saveVisitIfNeeded(alertTitle, alertMessage);
        }
    });

});
define('hospitalrun/procedures/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'hospitalrun/mixins/charge-route'], function (exports, AbstractEditRoute, ChargeRoute) {

    'use strict';

    exports['default'] = AbstractEditRoute['default'].extend(ChargeRoute['default'], {
        editTitle: 'Edit Procedure', 
        modelName: 'procedure',
        newTitle: 'New Procedure',
        pricingCategory: 'Procedure',
        
        setupController: function(controller, model) {
            this._super(controller, model);
            var medicationQuery = {
                key:  'Medication',
                include_docs: true,
            };
            this.controllerFor('pouchdb').queryMainDB(medicationQuery, 'inventory_by_type').then(function(result) {
                var medicationList = result.rows.map(function(medication) {
                    return medication.doc;
                });
                controller.set('medicationList', medicationList);
            });
        }
    });

});
define('hospitalrun/procedures/edit/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("    \n    ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'class': ("required"),
      'property': ("description"),
      'label': ("Procedure"),
      'list': ("procedureList"),
      'selection': ("description"),
      'hint': (false)
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID",'hint': "BOOLEAN"},hashContexts:{'class': depth0,'property': depth0,'label': depth0,'list': depth0,'selection': depth0,'hint': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("          \n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'class': ("col-xs-6"),
      'property': ("cptCode"),
      'label': ("CPT Code"),
      'list': ("cptCodeList"),
      'selection': ("cptCode")
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'class': depth0,'property': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n    </div>\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'class': ("col-sm-3"),
      'property': ("location"),
      'label': ("Procedure Location"),
      'list': ("procedureLocations"),
      'selection': ("location")
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'class': depth0,'property': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("  \n        ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("procedureDate"),
      'label': ("Procedure Date"),
      'class': ("col-sm-3 required")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("timeStarted"),
      'label': ("Time Started"),
      'class': ("col-sm-3")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("timeEnded"),
      'label': ("Time Ended"),
      'class': ("col-sm-3")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    </div>\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'class': ("col-sm-4 required"),
      'property': ("physician"),
      'label': ("Physician"),
      'list': ("physicianList"),
      'selection': ("physician")
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'class': depth0,'property': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'class': ("col-sm-4"),
      'property': ("assistant"),
      'label': ("Assistant"),
      'list': ("physicianList"),
      'selection': ("assistant"),
      'prompt': (" ")
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID",'prompt': "STRING"},hashContexts:{'class': depth0,'property': depth0,'label': depth0,'list': depth0,'selection': depth0,'prompt': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'class': ("col-sm-4"),
      'property': ("anesthesiologist"),
      'label': ("Anesthesiologist"),
      'list': ("anesthesiologistList"),
      'selection': ("anesthesiologist")
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'class': depth0,'property': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n    </div>\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'class': ("col-sm-4"),
      'property': ("anesthesiaType"),
      'label': ("Anesthesia Type"),
      'list': ("anesthesiaTypes"),
      'selection': ("anesthesiaTypes")
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'class': depth0,'property': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("        \n    </div>\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-text'] || (depth0 && depth0['em-text']),options={hash:{
      'label': ("Notes"),
      'property': ("notes"),
      'rows': (3)
    },hashTypes:{'label': "STRING",'property': "STRING",'rows': "INTEGER"},hashContexts:{'label': depth0,'property': depth0,'rows': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-text", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "item-charges", options) : helperMissing.call(depth0, "partial", "item-charges", options))));
    data.buffer.push("\n    <div class=\"panel detail-section\">\n        <div class=\"panel-heading\">\n            <h3 class=\"panel-title\">\n                Medication Used\n                ");
    stack1 = helpers['if'].call(depth0, "canAddCharge", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </h3>\n        </div>\n        <div class=\"panel-body detail-section-content\">\n            <table class=\"table\">\n                <tr class=\"table-header\">\n                    <th>Item</th>\n                    <th>Quantity</th>\n                    <th>Action</th>\n                </tr>\n                ");
    stack1 = helpers['with'].call(depth0, "", "as", "parentController", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </table>\n        </div>\n    </div>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                    <button class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showAddMedication", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span>Add Medication</button>\n                ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                    ");
    stack1 = helpers.each.call(depth0, "charges", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                ");
    return buffer;
    }
  function program5(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                        ");
    stack1 = helpers['if'].call(depth0, "medicationCharge", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    ");
    return buffer;
    }
  function program6(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                            <tr>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "medication.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "quantity", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>\n                                    ");
    stack1 = helpers['if'].call(depth0, "parentController.canAddCharge", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                    ");
    stack1 = helpers['if'].call(depth0, "parentController.canAddCharge", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                </td>\n                            </tr>\n                        ");
    return buffer;
    }
  function program7(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                        <button class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showEditMedication", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                                    ");
    return buffer;
    }

  function program9(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                        <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showDeleteMedication", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                                            <span class=\"octicon octicon-x\"></span>Delete\n                                        </button>\n                                    ");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    return buffer;
    
  });

});
define('hospitalrun/procedures/edit/view', ['exports', 'hospitalrun/views/panel'], function (exports, PanelView) {

	'use strict';

	exports['default'] = PanelView['default'].extend();

});
define('hospitalrun/procedures/medication/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/inventory-selection', 'ember'], function (exports, AbstractEditController, InventorySelection, Ember) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend(InventorySelection['default'], {
        needs: ['procedures/edit'],
        cancelAction: 'closeModal',
        newPricingItem: false,
        requestingController: Ember['default'].computed.alias('controllers.procedures/edit'),
        medicationList: Ember['default'].computed.alias('controllers.procedures/edit.medicationList'),
        
        updateCapability: 'add_charge',
        
        medicationChanged: function() {
            var itemName = this.get('itemName'),
                medication = this.get('medication');
            if (!Ember['default'].isEmpty(medication) && medication.get('name') !== itemName) {
                this.set('itemName', medication.get('name'));
            }
        }.observes('medication'),
        
        title: function() {
            var isNew = this.get('isNew');
            if (isNew) {
                return 'Add Medication Used';
            }
            return 'Edit Medication Used';
    	}.property('isNew'),    
        
        beforeUpdate: function() {
            var isNew = this.get('isNew');
            if (isNew) {
                this.set('newCharge', true);         
            }        
            return Ember['default'].RSVP.Promise.resolve();
        },
        
        afterUpdate: function(record) {
            if (this.get('newCharge')) {            
                this.get('requestingController').send('addCharge', record);
            } else {
                this.send('closeModal');
            }        
        }
    });

});
define('hospitalrun/procedures/medication/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['inventory-typeahead'] || (depth0 && depth0['inventory-typeahead']),options={hash:{
      'property': ("itemName"),
      'label': ("Medication Used"),
      'content': ("medicationList"),
      'selection': ("selectedInventoryItem")
    },hashTypes:{'property': "STRING",'label': "STRING",'content': "ID",'selection': "ID"},hashContexts:{'property': depth0,'label': depth0,'content': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "inventory-typeahead", options))));
    data.buffer.push("  \n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'label': ("Quantity"),
      'property': ("quantity"),
      'class': ("required")
    },hashTypes:{'label': "STRING",'property': "STRING",'class': "STRING"},hashContexts:{'label': depth0,'property': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/procedures/medication/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/router', ['exports', 'ember', 'hospitalrun/config/environment'], function (exports, Ember, config) {

  'use strict';

  var Router = Ember['default'].Router.extend({
    location: config['default'].locationType
  });

  Router.map(function() {
      this.resource('admin', function() {
          this.route('address');
          this.route('lookup', { path: '/' });
          this.resource('users', function() {
              this.route('edit', { path: "/edit/:user_id" });
          }); 
           this.route('query');
      });
      
      this.resource('appointments', function() {
          //this.route('calendar'); //currently not working in prod build
          this.route('edit', { path: "/edit/:appointment_id" });
          this.route('search');
          this.route('today');
      });
      
      this.route('finishgauth', { path: "/finishgauth/:s1/:s2/:k/:t/:i/:p" });
      
      this.route('index', { path: '/' });
      
      this.resource('imaging', function() {
          this.route('completed');
          this.route('edit', { path: "/edit/:imaging_id" });
      });   
      
      this.resource('inventory', function() {
          this.route('barcode', { path: "/barcode/:inventory_id" });
          this.route('delivery', { path: "/delivery/:inv-request_id" });
          this.route('edit', { path: "/edit/:inventory_id" });
          this.route('batch', { path: "/batch/:inventory-batch_id" });
          this.route('listing');
          this.route('reports');
          this.route('request', { path: "/request/:inv-request_id" });
          this.route('search', { path: "/search/:search_text" });
      });
      
      this.resource('invoices', function() {
          this.route('edit', { path: "/edit/:invoice_id" });
          this.route('search', { path: "/search/:search_text" });
      });
      
      this.resource('labs', function() {
          this.route('completed');
          this.route('edit', { path: "/edit/:lab_id" });
      });    
      
      this.route('login');

      this.resource('medication', function() {
          this.route('completed');
          this.route('edit', { path: "/edit/:medication_id" });
          this.route('return', { path: "/return/:inv-request_id" });
          this.route('search', { path: "/search/:search_text" });
      });
      
      this.resource('patients', function() {
          this.route('edit', { path: "/edit/:patient_id" });
          this.route('reports');
          this.route('search', { path: "/search/:search_text" });
      });
      
      this.resource('pricing', function() {
          this.route('imaging');
          this.route('lab');
          this.route('procedure');
          this.route('ward');
          this.route('edit', { path: "/edit/:pricing_id" });
          this.route('search', { path: "/search/:search_text" });
          this.route('profiles');
      });
      
      this.resource('print', function() {
          this.route('invoice', { path: "/invoice/:invoice_id" });
      });
          
      this.resource('visits', function() {
          this.route('edit', { path: "/edit/:visit_id" });
          this.resource('procedures', function() {
              this.route('edit', { path: "/edit/:procedure_id" });
          });
      });
  });

  exports['default'] = Router;

});
define('hospitalrun/routes/abstract-edit-route', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend(Ember['default'].SimpleAuth.AuthenticatedRouteMixin, {
        editTitle: null,
        hideNewButton: false,
        modelName: null,
        newTitle: null,
        
        _createNewRecord: function(params) {
            return new Ember['default'].RSVP.Promise(function(resolve) {
                this.generateId().then(function(newId) {
                    this.getNewData(params).then(function(data) {
                            var modelName = this.get('modelName');
                            if (newId) {
                                data.id = newId;
                            }
                        if (newId && this.store.hasRecordForId(modelName, newId)) {
                            resolve(this.store.push(modelName, data));
                        } else {
                            resolve(this.store.createRecord(modelName, data));
                        }
                    }.bind(this));
                }.bind(this));
            }.bind(this));        
        },
        
        idParam: function() {
            var modelName = this.get('modelName');
            return modelName + '_id';
        }.property('modelName'),
        
        /**
         * Override this function to generate an id for a new record
         * @return a promise that will resolved to a generated id;default is null which means that an
         * id will be automatically generated via Ember data.
         */
        generateId: function() {
            return Ember['default'].RSVP.resolve(null);
        },

        /**
         * Override this function to define what data a new model should be instantiated with.
         * @return a promise that will resolve with the data for a new record; defaults to empty object.
         */    
        getNewData: function() {
             return Ember['default'].RSVP.resolve({});
        },
        
        model: function(params) {
            var idParam = this.get('idParam');
            if (!Ember['default'].isEmpty(idParam) && params[idParam] === 'new') {
                return this._createNewRecord(params);
            } else {
                return this._super(params);
            }
        },
        
        setupController: function(controller, model) {
            var sectionDetails = {};
            if (model.get('isNew')) {
                sectionDetails.currentScreenTitle = this.get('newTitle');
            } else {
                sectionDetails.currentScreenTitle = this.get('editTitle');
            }        
            if (this.get('hideNewButton')) {
                sectionDetails.newButtonAction = null;
            }
            this.send('setSectionHeader', sectionDetails);
            this._super(controller, model);
        }
    });

});
define('hospitalrun/routes/abstract-index-route', ['exports', 'ember', 'hospitalrun/mixins/pouchdb', 'hospitalrun/mixins/progress-dialog'], function (exports, Ember, PouchDbMixin, ProgressDialog) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend(PouchDbMixin['default'], ProgressDialog['default'], Ember['default'].SimpleAuth.AuthenticatedRouteMixin, {
        filterParams: null,
        firstKey: null,
        hideNewButton: false,
        itemsPerPage: 25,
        modelName: null,
        newButtonAction: null,
        newButtonText: null,
        nextStartKey: null,
        pageTitle: null,
        
        keyPrefix: function() {
            var modelName = this.get('modelName');
            if (!Ember['default'].isEmpty(modelName)) {
                return modelName + '_';
            }
        }.property('modelName'),
        
        _getFilterParams: function(params) {
            var filterByList = [],
                filterParams = this.get('filterParams');
            if (!Ember['default'].isEmpty(filterParams)) {
                filterParams.forEach(function(paramName) {
                    if (!Ember['default'].isEmpty(params[paramName])) {
                        filterByList.push({
                            name: paramName,
                            value: params[paramName]
                        });                                                
                    }
                });
            }
            return filterByList;
        },
        
        _getStartKeyFromItem: function(item) {
            var modelName = this.get('modelName');
            return modelName+'_'+item.get('id');
        },
        
        _modelQueryParams: function() {
            return {};
        },
        
        model: function(params) {
            return new Ember['default'].RSVP.Promise(function(resolve, reject){
                var filterParams = this._getFilterParams(params),
                    modelName = this.get('modelName'),
                    itemsPerPage = this.get('itemsPerPage'),
                    queryParams = this._modelQueryParams(params);
                if (!Ember['default'].isEmpty(params.sortKey)) {
                    queryParams.sortKey = params.sortKey;
                    if (!Ember['default'].isEmpty(params.sortDesc)) {
                        queryParams.sortDesc = params.sortDesc;
                    }                
                }
                if (!Ember['default'].isEmpty(filterParams)) {
                    queryParams.filterBy = filterParams;
                }
                if (Ember['default'].isEmpty(queryParams.options)) {
                    queryParams.options = {};
                }
                queryParams.options.limit = itemsPerPage + 1;
                if (!Ember['default'].isEmpty(params.startKey)) {
                    queryParams.options.startkey = params.startKey;
                }
                this.store.find(modelName, queryParams).then(function(model) {
                    if (model.get('length') > 0) {
                        this.set('firstKey', this._getStartKeyFromItem(model.get('firstObject')));
                    }
                    if (model.get('length') > itemsPerPage) {
                        var lastItem = model.popObject();
                        this.set('nextStartKey', this._getStartKeyFromItem(lastItem));
                    } else {
                        this.set('nextStartKey');                                    
                    }
                    resolve(model);
                }.bind(this), reject);
            }.bind(this));
        },
        
        queryParams: {
            sortDesc: {refreshModel: true},
            sortKey: {refreshModel: true},
            startKey: {refreshModel: true}
        },
        
        setupController: function(controller, model) {
            var props = this.getProperties('firstKey', 'nextStartKey');
            controller.setProperties(props);
            if (!Ember['default'].isEmpty(model)) {
                controller.set('hasRecords', (model.get('length') > 0));
            }
            var sectionDetails = {
                currentScreenTitle: this.get('pageTitle')
            };
            if (this.get('hideNewButton')) {
                sectionDetails.newButtonAction = null;
            } else if (!Ember['default'].isEmpty(this.get('newButtonAction'))) {
                sectionDetails.newButtonAction = this.get('newButtonAction');
            }
            if (!Ember['default'].isEmpty(this.get('newButtonText'))) {
                sectionDetails.newButtonText = this.get('newButtonText');
            }
            this.send('setSectionHeader', sectionDetails);
            this.closeProgressModal();
            this._super(controller, model);
        }
    });

});
define('hospitalrun/routes/abstract-module-route', ['exports', 'ember', 'hospitalrun/mixins/user-session'], function (exports, Ember, UserSession) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend(UserSession['default'], Ember['default'].SimpleAuth.AuthenticatedRouteMixin, {
        addCapability: null,
        additionalModels: null,
        allowSearch: true,
        currentScreenTitle: null,
        moduleName: null,
        newButtonText: null,
        sectionTitle:null,
        subActions: null,
        
        editPath: function() {
            var module = this.get('moduleName');
            return module + '.edit';
        }.property('moduleName'),
        
        deletePath: function() {
            var module = this.get('moduleName');
            return module + '.delete';        
        }.property('moduleName'),

        newButtonAction: function() {
            if (this.currentUserCan(this.get('addCapability'))) {
                return 'newItem';
            } else {
                return null;
            }
        }.property(),

        searchRoute: function() {
            var module = this.get('moduleName');
            return '/'+module + '/search';
        }.property('moduleName'),

        
        actions: {
            allItems: function() {
                this.transitionTo(this.get('moduleName')+'.index');
            },        
            closeModal: function() {
                this.disconnectOutlet({
                    parentView: 'application',
                    outlet: 'modal'
                });
            },
            deleteItem: function(item) {            
                var deletePath = this.get('deletePath');
                this.send('openModal', deletePath, item);
            },        
            editItem: function(item) {
                this.transitionTo(this.get('editPath'), item);
            },        
            newItem: function() {
                if (this.currentUserCan(this.get('addCapability'))) {
                    this.transitionTo(this.get('editPath'), 'new');
                }
            },        
            /**
             * Render a modal using the specifed path and optionally set a model.
             * @param modalPath the path to use for the controller and template.
             * @param model (optional) the model to set on the controller for the modal.
             */
            openModal: function(modalPath, model) {
                if (model) {
                    this.controllerFor(modalPath).set('model', model);
                }
                this.renderModal(modalPath);
            },        
            
            /**
             * Action to set items in the section header.
             * @param details an object containing details to set on the section header.
             * The following parameters are supported:
             * - currentScreenTitle - The current screen title.
             * - newButtonText - The text to display for the "new" button.
             * - newButtonAction - The action to fire for the "new" button.
             */
            setSectionHeader: function(details) {
                var currentController = this.controllerFor(this.get('moduleName'));        
                currentController.setProperties(details);
            },
            
            /**
             * Update an open modal using the specifed model.
             * @param modalPath the path to use for the controller and template.
             * @param model (optional) the model to set on the controller for the modal.
             */
            updateModal: function(modalPath, model) {        
                this.controllerFor(modalPath).set('model', model);    
            },        

        },
        
        /**
         * Make sure the user has permissions to the module; if not reroute to index.
         */
        beforeModel: function(transition) {
            var moduleName = this.get('moduleName');
            if (this.currentUserCan(moduleName)) {
                return this._super(transition);
            } else {
                this.transitionTo('index');
                return Ember['default'].RSVP.reject('Not available');
            }
        },
        
        /**
         * Override this function to generate an id for a new record
         * @return a promise that will resolved to a generated id;default is null which means that an
         * id will be automatically generated via Ember data.
         */
        generateId: function() {
            return Ember['default'].RSVP.resolve(null);                
        },

        model: function() {        
            if (!Ember['default'].isEmpty(this.additionalModels)) {
                return new Ember['default'].RSVP.Promise(function(resolve, reject){
                    var promises = this.additionalModels.map(function(modelMap) {
                        return this.store.find.apply(this.store, modelMap.findArgs);
                    }.bind(this));
                    Ember['default'].RSVP.allSettled(promises,'All additional Models for'+this.get('moduleName')).then(function(array){
                        array.forEach(function(item, index) {
                            if (item.state === 'fulfilled') {
                                this.set(this.additionalModels[index].name, item.value);
                            }
                        }.bind(this));
                        resolve();
                    }.bind(this), reject);
                }.bind(this),'Additional Models for'+this.get('moduleName'));
            } else {
                 return Ember['default'].RSVP.resolve();
            }        
        },
        
        renderModal: function(template) {
            this.render(template, {
                into: 'application',
                outlet: 'modal'
            });            
        },
        
        renderTemplate: function() {
            this.render('section');
        },
        
        setupController: function(controller, model) { 
            var navigationController = this.controllerFor('navigation');
            if (this.get('allowSearch') === true) {
                navigationController.set('allowSearch',true);
                navigationController.set('searchRoute',this.get('searchRoute'));
            } else {
                navigationController.set('allowSearch',false);
            }
            var currentController = this.controllerFor(this.get('moduleName'));
            var propsToSet = this.getProperties('additionalButtons','currentScreenTitle','newButtonAction','newButtonText','sectionTitle','subActions');        
            currentController.setProperties(propsToSet);
            if (!Ember['default'].isEmpty(this.additionalModels)) {
                this.additionalModels.forEach(function(item) {
                    controller.set(item.name, this.get(item.name));
                }.bind(this));
            }        
            this._super(controller, model);
        }
        
    });

});
define('hospitalrun/routes/abstract-search-route', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend(Ember['default'].SimpleAuth.AuthenticatedRouteMixin, {
        searchKeys: null,
        searchModel: null,
        searchText: null,
        
        _findBySearchIndex: function(searchText) {
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                var searchIndex = this.get('searchIndex'),
                    searchModel = this.get('searchModel');
                if (Ember['default'].isEmpty(searchIndex)) {
                    //Search index not defined, so reject
                    reject();
                } else {
                    var searchParams = Ember['default'].copy(searchIndex);
                    searchParams.query = searchText;
                    this.store.find(searchModel, {                    
                        searchIndex: searchParams
                    }).then(function(results) {
                        if (Ember['default'].isEmpty(results)) {
                            reject();
                        } else {
                            resolve(results);
                        }
                    }, reject);            
                }
            }.bind(this));
        },
        
        _findByContains: function(searchText) {
            var searchKeys = this.get('searchKeys'),
                searchModel = this.get('searchModel'),
                queryParams = {
                    containsValue: {
                        value: searchText,
                        keys: searchKeys                            
                    }
                };
            return this.store.find(searchModel, queryParams);
        },
        
        /**
         * Search using the following strategy:
         * 1) Search by id; if that fails to yield a result,:
         * 2) Search by search index if it is defined.  Search indexes are used by PouchDB Quick Search for fast search results
         * 3) If search index doesn't exist or if search by index doesn't yield a result, do a contains search which ends
         * up using a mapreduce function which loops through all the records in PouchDB (very slow).
         */
        model: function(params) {
            return new Ember['default'].RSVP.Promise(function(resolve) {
                var searchText = params.search_text;
                this.controllerFor('navigation').set('currentSearchText', searchText);
                this.set('searchText', searchText);
                this._findByContains(searchText).then(resolve, function(err) {
                    resolve(new DS.AdapterPopulatedRecordArray());
                    throw new Error(err);
                }.bind(this));
            }.bind(this));
        },    
        
        setupController: function(controller, model) {
            this._super(controller, model);
            if (!Ember['default'].isEmpty(model)) {
                controller.set('hasRecords', (model.get('length') > 0));
            } else {
                controller.set('hasRecords', false);
            }
            controller.set('searchText', this.get('searchText'));
            this.controllerFor('navigation').closeProgressModal();
            var parentController = this.controllerFor(this.get('moduleName'));
            var searchTitle = 'Search Results for <i>'+this.get('searchText')+'</i>';
            parentController.set('currentScreenTitle', searchTitle.htmlSafe());
        }    
        
    });

});
define('hospitalrun/routes/application', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    var ApplicationRoute = Ember['default'].Route.extend(Ember['default'].SimpleAuth.ApplicationRouteMixin, {
        use_google_auth: false,

        actions: {
            authenticateSession: function() {
                if (this.use_google_auth) {
                    window.location.replace('/auth/google');
                } else {
                    this._super();
                }
            }
        },

        model: function() {
            return this.store.find('config');        
        },
        
        afterModel: function(resolvedModel) {
            this.controllerFor('navigation').set('allowSearch',false);
            if (resolvedModel) {
                var use_google_auth = resolvedModel.findBy('id','use_google_auth');
                if (use_google_auth) {
                    this.use_google_auth = use_google_auth.get('value');
                }
            }
        }
        
    });
    exports['default'] = ApplicationRoute;

});
define('hospitalrun/routes/index', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend(Ember['default'].SimpleAuth.AuthenticatedRouteMixin, {
        afterModel: function() {
            this.controllerFor('navigation').set('allowSearch',false);
        }
    });

});
define('hospitalrun/services/validations', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var set = Ember['default'].set;

  exports['default'] = Ember['default'].Object.extend({
    init: function() {
      set(this, 'cache', {});
    }
  });

});
define('hospitalrun/templates/application', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n");
    data.buffer.push(escapeExpression((helper = helpers.render || (depth0 && depth0.render),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "navigation", options) : helperMissing.call(depth0, "render", "navigation", options))));
    data.buffer.push("\n");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "session.isAuthenticated", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    stack1 = helpers._triageMustache.call(depth0, "outlet", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    data.buffer.push(escapeExpression((helper = helpers.outlet || (depth0 && depth0.outlet),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "modal", options) : helperMissing.call(depth0, "outlet", "modal", options))));
    return buffer;
    
  });

});
define('hospitalrun/templates/appointment-event', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    
    data.buffer.push("\n        (All Day)\n    ");
    }

  function program3(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n        ");
    stack1 = helpers._triageMustache.call(depth0, "view.timeString", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    ");
    return buffer;
    }

    data.buffer.push("<div class='ember-calendar-event-name' ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editItem", "view.event.appointment", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n    ");
    stack1 = helpers._triageMustache.call(depth0, "view.nameString", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(" <button type=\"button\" class=\"btn btn-default btn-xs\">\n        <span class=\"glyphicon glyphicon-edit\"></span>       \n    </button>\n</div>\n<div class='ember-calendar-event-time'>\n    ");
    stack1 = helpers['if'].call(depth0, "view.event.appointment.allDay", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n</div>");
    return buffer;
    
  });

});
define('hospitalrun/templates/charges-by-type', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <ul class=\"nav nav-pills\" role=\"tablist\">\n        ");
    stack1 = helpers.each.call(depth0, "pricingTypeList", {hash:{
      'itemController': ("item-charge-controller")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </ul>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            <li role=\"presentation\"><a ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'href': ("tabHref"),
      'class': ("activeClass")
    },hashTypes:{'href': "ID",'class': "ID"},hashContexts:{'href': depth0,'class': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(" role=\"tab\" data-toggle=\"pill\">");
    stack1 = helpers._triageMustache.call(depth0, "model", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(" charges</a></li>\n        ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("    \n        <div role=\"tabpanel\" ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'id': ("tabId"),
      'class': (":tab-pane activeClass")
    },hashTypes:{'id': "ID",'class': "STRING"},hashContexts:{'id': depth0,'class': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(">\n            <div class=\"panel detail-section\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">\n                        ");
    stack1 = helpers._triageMustache.call(depth0, "model", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(" charges\n                    </h3>\n                </div>\n                <div class=\"panel-body detail-section-content\">\n                    <table class=\"table table-bordered\">\n                        <tbody>\n                            ");
    stack1 = helpers['with'].call(depth0, "", "as", "itemController", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    ");
    return buffer;
    }
  function program5(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                ");
    stack1 = helpers.each.call(depth0, "pricingListByType", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                            ");
    return buffer;
    }
  function program6(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                    <tr>\n                                        ");
    stack1 = helpers.each.call(depth0, "", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                    </tr> \n                                ");
    return buffer;
    }
  function program7(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                                            <td class=\"col-xs-2\">\n                                                ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("_id"),
      'label': ("name")
    },hashTypes:{'property': "ID",'label': "ID"},hashContexts:{'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n                                            </td>\n                                        ");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "showPricingTypeTabs", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n<div class=\"tab-content\">\n    ");
    stack1 = helpers.each.call(depth0, "pricingTypeList", {hash:{
      'itemController': ("item-charge-controller")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n</div>");
    return buffer;
    
  });

});
define('hospitalrun/templates/components/array-display', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    ");
    stack1 = helpers.each.call(depth0, "content", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n        ");
    stack1 = helpers._triageMustache.call(depth0, "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("<br/>\n    ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    ");
    stack1 = helpers._triageMustache.call(depth0, "content", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "isArray", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/templates/components/checkbox-or-typeahead', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "components/render-typeahead", options) : helperMissing.call(depth0, "partial", "components/render-typeahead", options))));
    data.buffer.push("\n");
    return buffer;
    }

  function program3(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <div ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'class': (":required errors:has-error")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(">\n        <label class=\"control-label\">");
    stack1 = helpers._triageMustache.call(depth0, "label", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</label>\n    </div>\n    ");
    stack1 = helpers.each.call(depth0, "checkboxRow", "in", "checkboxRows", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    ");
    stack1 = helpers['if'].call(depth0, "errors", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    return buffer;
    }
  function program4(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n        <div class=\"row\">\n            <div class=\"col-xs-1\"></div>        \n            ");
    stack1 = helpers.each.call(depth0, "checkbox", "in", "checkboxRow", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        </div>\n    ");
    return buffer;
    }
  function program5(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                <div class=\"checkbox col-xs-2\">\n                <label>\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['action-checkbox'] || (depth0 && depth0['action-checkbox']),options={hash:{
      'value': ("checkbox.value"),
      'action': ("checkboxChanged")
    },hashTypes:{'value': "ID",'action': "STRING"},hashContexts:{'value': depth0,'action': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "action-checkbox", options))));
    stack1 = helpers._triageMustache.call(depth0, "checkbox.label", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("                    \n                </label>\n                </div>\n            ");
    return buffer;
    }

  function program7(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n        <div class=\"has-error\">\n            <span class=\"help-block\">");
    stack1 = helpers._triageMustache.call(depth0, "errors", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</span>\n        </div>\n    ");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "userCanAdd", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/templates/components/cross-icon-svg', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    


    data.buffer.push("<svg class=\"cross-icon-svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n   viewBox=\"0 0 32 32\" enable-background=\"new 0 0 32 32\" xml:space=\"preserve\">\n  <polygon fill=\"#1ABC9C\" points=\"21.33,10.67 21.33,0 10.67,0 10.67,10.67 0,10.67 0,21.33 10.67,21.33 10.67,32 21.33,32\n  21.33,21.33 32,21.33 32,10.67 \"/>\n</svg>\n");
    
  });

});
define('hospitalrun/templates/components/ext-radio', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    ");
    stack1 = helpers.each.call(depth0, "view.content", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("    \n        <label class=\"radio-inline\">\n            ");
    data.buffer.push(escapeExpression((helper = helpers['radio-button'] || (depth0 && depth0['radio-button']),options={hash:{
      'content': (""),
      'name': ("view.name"),
      'selection': ("view.value")
    },hashTypes:{'content': "ID",'name': "ID",'selection': "ID"},hashContexts:{'content': depth0,'name': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "radio-button", options))));
    data.buffer.push("\n        </label>\n    ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    ");
    stack1 = helpers.each.call(depth0, "view.content", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    return buffer;
    }
  function program5(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        <div class=\"radio\">\n            <label>\n                ");
    data.buffer.push(escapeExpression((helper = helpers['radio-button'] || (depth0 && depth0['radio-button']),options={hash:{
      'content': (""),
      'name': ("view.name"),
      'selection': ("view.value")
    },hashTypes:{'content': "ID",'name': "ID",'selection': "ID"},hashContexts:{'content': depth0,'name': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "radio-button", options))));
    data.buffer.push("\n            </label>\n        </div>\n    ");
    return buffer;
    }

  function program7(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    <div class=\"radio\">\n        <label>\n            ");
    data.buffer.push(escapeExpression((helper = helpers['radio-button'] || (depth0 && depth0['radio-button']),options={hash:{
      'value': ("otherValue"),
      'name': ("view.name"),
      'selection': ("view.value")
    },hashTypes:{'value': "ID",'name': "ID",'selection': "ID"},hashContexts:{'value': depth0,'name': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "radio-button", options))));
    data.buffer.push("        \n            ");
    stack1 = helpers._triageMustache.call(depth0, "otherOptionLabel", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(" ");
    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
      'value': ("otherValue"),
      'class': ("form-control")
    },hashTypes:{'value': "ID",'class': "STRING"},hashContexts:{'value': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
    data.buffer.push("\n        </label>\n    </div>\n");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "view.showInline", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n\n");
    stack1 = helpers['if'].call(depth0, "includeOtherOption", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    return buffer;
    
  });

});
define('hospitalrun/templates/components/inventory-location-picker', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    <div class=\"form-group\">\n        <label class=\"control-label\">");
    stack1 = helpers._triageMustache.call(depth0, "label", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</label>\n        ");
    data.buffer.push(escapeExpression((helper = helpers['location-select'] || (depth0 && depth0['location-select']),options={hash:{
      'currentLocation': ("selectedLocation"),
      'content': ("subLocationList"),
      'class': ("form-control"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content.locationNameWithQuantity"),
      'selection': ("selectedLocation")
    },hashTypes:{'currentLocation': "ID",'content': "ID",'class': "STRING",'optionValuePath': "STRING",'optionLabelPath': "STRING",'selection': "ID"},hashContexts:{'currentLocation': depth0,'content': depth0,'class': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "location-select", options))));
    data.buffer.push("    \n    </div>\n");
    return buffer;
    }

    stack1 = helpers.each.call(depth0, "locationPickers", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/templates/components/logo-svg', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    


    data.buffer.push("<svg class=\"logo-svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n     viewBox=\"0 0 347.907 60.807\" enable-background=\"new 0 0 347.907 60.807\" xml:space=\"preserve\">\n  <g>\n    <path fill=\"#FFFFFF\" d=\"M39.118,49.621V0h8.247v19.067c1.336-1.269,2.805-2.293,4.408-3.072c1.603-0.779,3.483-1.169,5.643-1.169\n      c1.87,0,3.528,0.317,4.975,0.952c1.448,0.635,2.655,1.525,3.623,2.671c0.969,1.147,1.703,2.516,2.205,4.107\n      c0.501,1.592,0.751,3.345,0.751,5.259v21.805h-8.247V27.816c0-2.092-0.485-3.712-1.453-4.858c-0.969-1.147-2.421-1.72-4.358-1.72\n      c-1.425,0-2.76,0.323-4.007,0.968c-1.246,0.646-2.426,1.525-3.54,2.638v24.777H39.118z M89.209,14.826\n      c2.559,0,4.881,0.412,6.963,1.235c2.081,0.824,3.857,1.993,5.326,3.506c1.468,1.514,2.604,3.362,3.405,5.543\n      c0.802,2.182,1.202,4.62,1.202,7.313c0,2.716-0.4,5.165-1.202,7.346c-0.801,2.182-1.937,4.04-3.405,5.576\n      c-1.469,1.536-3.246,2.716-5.326,3.54c-2.082,0.823-4.403,1.236-6.963,1.236c-2.56,0-4.886-0.412-6.979-1.236\n      c-2.092-0.823-3.879-2.003-5.359-3.54c-1.481-1.536-2.627-3.394-3.44-5.576c-0.813-2.182-1.219-4.63-1.219-7.346\n      c0-2.693,0.406-5.131,1.219-7.313c0.812-2.181,1.959-4.029,3.44-5.543c1.48-1.514,3.266-2.682,5.359-3.506\n      C84.323,15.238,86.649,14.826,89.209,14.826z M89.209,43.777c2.849,0,4.959-0.957,6.327-2.872c1.369-1.914,2.055-4.719,2.055-8.415\n      c0-3.695-0.685-6.512-2.055-8.448c-1.368-1.937-3.478-2.905-6.327-2.905c-2.894,0-5.031,0.974-6.411,2.922\n      c-1.381,1.948-2.07,4.758-2.07,8.432s0.689,6.473,2.07,8.398C84.178,42.815,86.315,43.777,89.209,43.777z M131.216,22.039\n      c-0.222,0.356-0.457,0.606-0.701,0.751c-0.245,0.145-0.557,0.217-0.936,0.217c-0.4,0-0.829-0.111-1.285-0.334\n      c-0.457-0.222-0.986-0.472-1.586-0.751c-0.602-0.278-1.286-0.529-2.054-0.751c-0.769-0.222-1.676-0.334-2.722-0.334\n      c-1.625,0-2.905,0.346-3.84,1.036c-0.934,0.69-1.403,1.592-1.403,2.704c0,0.735,0.24,1.353,0.719,1.853\n      c0.479,0.501,1.113,0.941,1.903,1.319c0.789,0.379,1.686,0.718,2.688,1.018c1.002,0.3,2.025,0.629,3.072,0.985\n      c1.046,0.356,2.07,0.763,3.072,1.219c1.001,0.457,1.897,1.035,2.688,1.736c0.789,0.701,1.425,1.542,1.903,2.521\n      c0.479,0.98,0.718,2.159,0.718,3.539c0,1.648-0.3,3.167-0.901,4.558c-0.601,1.392-1.481,2.594-2.639,3.606\n      c-1.158,1.013-2.587,1.803-4.291,2.371c-1.703,0.567-3.656,0.852-5.86,0.852c-1.181,0-2.332-0.106-3.456-0.318\n      c-1.124-0.212-2.204-0.506-3.238-0.885c-1.036-0.378-1.993-0.823-2.872-1.335c-0.879-0.512-1.653-1.068-2.321-1.67l1.903-3.139\n      c0.244-0.379,0.534-0.668,0.868-0.868c0.334-0.2,0.757-0.3,1.269-0.3s0.996,0.145,1.453,0.434c0.456,0.289,0.985,0.601,1.586,0.935\n      c0.601,0.334,1.307,0.646,2.12,0.935c0.812,0.289,1.842,0.434,3.088,0.434c0.979,0,1.82-0.117,2.522-0.35\n      c0.701-0.234,1.28-0.54,1.736-0.918c0.456-0.378,0.789-0.818,1.001-1.319c0.212-0.501,0.317-1.018,0.317-1.553\n      c0-0.801-0.239-1.458-0.718-1.97c-0.479-0.512-1.114-0.957-1.903-1.335c-0.791-0.379-1.693-0.718-2.705-1.019\n      c-1.013-0.3-2.048-0.628-3.105-0.985c-1.058-0.356-2.093-0.773-3.106-1.252c-1.013-0.478-1.915-1.085-2.704-1.82\n      c-0.791-0.735-1.426-1.636-1.903-2.705c-0.48-1.068-0.719-2.359-0.719-3.873c0-1.402,0.278-2.738,0.835-4.007\n      c0.556-1.269,1.374-2.376,2.454-3.323c1.079-0.946,2.426-1.703,4.04-2.27c1.614-0.568,3.478-0.852,5.593-0.852\n      c2.359,0,4.509,0.39,6.445,1.169c1.937,0.78,3.55,1.803,4.841,3.072L131.216,22.039z M138.395,60.807V15.361h5.043\n      c0.534,0,0.991,0.123,1.369,0.367c0.378,0.245,0.623,0.624,0.734,1.135l0.667,3.173c1.381-1.581,2.967-2.86,4.759-3.84\n      s3.89-1.469,6.294-1.469c1.87,0,3.578,0.39,5.126,1.169c1.547,0.78,2.883,1.909,4.007,3.39c1.124,1.48,1.992,3.306,2.605,5.476\n      c0.611,2.17,0.918,4.658,0.918,7.463c0,2.56-0.345,4.931-1.035,7.112c-0.69,2.182-1.676,4.074-2.956,5.677\n      c-1.281,1.603-2.827,2.855-4.642,3.757c-1.814,0.902-3.845,1.353-6.094,1.353c-1.937,0-3.578-0.296-4.925-0.885\n      c-1.347-0.59-2.555-1.408-3.623-2.455v14.025H138.395z M154.423,21.238c-1.715,0-3.178,0.362-4.391,1.085\n      c-1.214,0.724-2.343,1.742-3.39,3.055v15.361c0.934,1.158,1.953,1.965,3.055,2.421c1.102,0.457,2.288,0.685,3.556,0.685\n      c1.246,0,2.376-0.234,3.39-0.701c1.013-0.467,1.87-1.18,2.571-2.137c0.702-0.957,1.241-2.165,1.62-3.623\n      c0.379-1.458,0.568-3.177,0.568-5.159c0-2.004-0.163-3.701-0.485-5.093c-0.322-1.391-0.784-2.521-1.385-3.389\n      c-0.602-0.868-1.331-1.503-2.188-1.903C156.487,21.438,155.513,21.238,154.423,21.238z M184.51,5.376\n      c0,0.713-0.145,1.38-0.435,2.003c-0.289,0.624-0.673,1.169-1.151,1.636c-0.479,0.467-1.041,0.841-1.686,1.119\n      c-0.646,0.278-1.336,0.418-2.07,0.418c-0.713,0-1.386-0.139-2.02-0.418c-0.635-0.278-1.186-0.651-1.653-1.119\n      c-0.467-0.468-0.841-1.013-1.119-1.636c-0.278-0.623-0.417-1.291-0.417-2.003c0-0.735,0.139-1.424,0.417-2.07\n      c0.278-0.646,0.652-1.202,1.119-1.67c0.467-0.467,1.018-0.84,1.653-1.119c0.634-0.278,1.307-0.418,2.02-0.418\n      c0.734,0,1.425,0.14,2.07,0.418c0.646,0.278,1.208,0.651,1.686,1.119c0.479,0.468,0.863,1.024,1.151,1.67\n      C184.365,3.952,184.51,4.642,184.51,5.376z M183.274,15.361v34.26h-8.247v-34.26H183.274z M202.173,50.155\n      c-2.961,0-5.242-0.84-6.845-2.521c-1.603-1.681-2.405-4.001-2.405-6.963V21.538h-3.472c-0.446,0-0.83-0.144-1.152-0.434\n      c-0.323-0.289-0.484-0.723-0.484-1.303v-3.272l5.51-0.902l1.736-9.35c0.089-0.445,0.294-0.79,0.617-1.035\n      c0.322-0.245,0.729-0.368,1.219-0.368h4.274v10.786h9.016v5.877h-9.016v18.566c0,1.068,0.267,1.903,0.801,2.505\n      c0.534,0.601,1.246,0.902,2.137,0.902c0.512,0,0.941-0.062,1.286-0.184c0.345-0.122,0.646-0.25,0.902-0.384\n      c0.256-0.133,0.484-0.261,0.684-0.384s0.4-0.184,0.601-0.184c0.245,0,0.445,0.062,0.602,0.184c0.155,0.123,0.322,0.306,0.501,0.551\n      l2.471,4.007c-1.202,1.002-2.582,1.759-4.14,2.271C205.457,49.899,203.842,50.155,202.173,50.155z M241.943,49.621h-3.707\n      c-0.78,0-1.392-0.117-1.837-0.35c-0.446-0.234-0.78-0.707-1.002-1.419l-0.734-2.437c-0.869,0.779-1.72,1.464-2.555,2.054\n      c-0.834,0.59-1.698,1.085-2.587,1.486c-0.891,0.401-1.837,0.701-2.839,0.902c-1.001,0.2-2.115,0.301-3.338,0.301\n      c-1.448,0-2.784-0.196-4.007-0.586c-1.225-0.391-2.277-0.977-3.156-1.759c-0.88-0.782-1.564-1.754-2.054-2.915\n      c-0.49-1.161-0.735-2.513-0.735-4.054c0-1.296,0.34-2.574,1.019-3.836c0.679-1.262,1.808-2.401,3.389-3.417\n      c1.58-1.016,3.684-1.86,6.311-2.53c2.627-0.67,5.888-1.005,9.784-1.005v-2.019c0-2.31-0.484-4.021-1.452-5.131\n      c-0.969-1.111-2.377-1.666-4.225-1.666c-1.335,0-2.449,0.156-3.338,0.467c-0.891,0.312-1.665,0.663-2.322,1.052\n      c-0.657,0.39-1.263,0.74-1.82,1.052c-0.556,0.312-1.168,0.467-1.837,0.467c-0.556,0-1.035-0.144-1.435-0.434\n      c-0.402-0.289-0.724-0.646-0.969-1.069l-1.503-2.638c3.94-3.606,8.693-5.41,14.259-5.41c2.003,0,3.79,0.329,5.36,0.985\n      c1.57,0.657,2.899,1.57,3.99,2.738c1.09,1.169,1.92,2.566,2.487,4.19c0.567,1.625,0.852,3.406,0.852,5.343V49.621z M225.915,44.479\n      c0.846,0,1.625-0.077,2.337-0.23c0.712-0.153,1.386-0.383,2.02-0.69c0.635-0.307,1.247-0.685,1.837-1.134\n      c0.59-0.449,1.186-0.981,1.787-1.594v-5.735c-2.404,0-4.414,0.151-6.027,0.454c-1.614,0.302-2.911,0.69-3.89,1.16\n      c-0.979,0.471-1.675,1.021-2.087,1.648c-0.412,0.628-0.617,1.311-0.617,2.051c0,1.458,0.428,2.5,1.285,3.128\n      C223.416,44.165,224.534,44.479,225.915,44.479z M257.169,0v49.621h-8.247V0H257.169z\"/>\n    <path fill=\"#1ABC9C\" d=\"M264.986,49.621V16.396h1.67c0.378,0,0.651,0.078,0.818,0.234c0.167,0.156,0.262,0.423,0.284,0.801\n      l0.267,7.012c1.069-2.693,2.494-4.803,4.275-6.327c1.78-1.525,3.974-2.288,6.578-2.288c1.002,0,1.925,0.106,2.772,0.317\n      c0.846,0.212,1.647,0.518,2.404,0.918l-0.434,2.204c-0.067,0.356-0.29,0.534-0.669,0.534c-0.134,0-0.322-0.044-0.567-0.133\n      c-0.245-0.089-0.551-0.189-0.918-0.3c-0.368-0.111-0.819-0.211-1.353-0.3c-0.534-0.089-1.147-0.134-1.837-0.134\n      c-2.516,0-4.581,0.78-6.194,2.338c-1.614,1.559-2.922,3.807-3.923,6.745v21.605H264.986z M292.166,16.396v21.237\n      c0,3.117,0.714,5.56,2.144,7.33c1.43,1.77,3.607,2.655,6.534,2.655c2.166,0,4.187-0.551,6.064-1.653s3.563-2.632,5.06-4.591V16.396\n      h3.172v33.225h-1.748c-0.615,0-0.934-0.289-0.956-0.868l-0.302-4.942c-1.538,1.915-3.316,3.451-5.334,4.608\n      c-2.017,1.158-4.263,1.736-6.737,1.736c-1.85,0-3.467-0.29-4.849-0.868c-1.383-0.579-2.53-1.414-3.445-2.505\n      c-0.914-1.09-1.604-2.404-2.072-3.94c-0.468-1.536-0.703-3.273-0.703-5.209V16.396H292.166z M321.794,49.621V16.396h1.736\n      c0.579,0,0.913,0.278,1.001,0.835l0.3,5.009c1.514-1.914,3.278-3.456,5.293-4.625c2.015-1.169,4.258-1.753,6.729-1.753\n      c1.825,0,3.433,0.289,4.825,0.868c1.391,0.579,2.544,1.414,3.456,2.505c0.913,1.091,1.603,2.404,2.07,3.94\n      c0.468,1.536,0.702,3.272,0.702,5.209v21.238h-3.173V28.383c0-3.116-0.712-5.559-2.137-7.329c-1.425-1.77-3.606-2.655-6.545-2.655\n      c-2.182,0-4.207,0.562-6.077,1.686s-3.54,2.666-5.008,4.625v24.91H321.794z\"/>\n    <polygon fill=\"#1ABC9C\" points=\"21.274,25.085 21.274,14.448 10.637,14.448 10.637,25.085 0,25.085 0,35.722 10.637,35.722\n      10.637,46.359 21.274,46.359 21.274,35.722 31.91,35.722 31.91,25.085 	\"/>\n  </g>\n</svg>\n");
    
  });

});
define('hospitalrun/templates/components/menu-svg', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    


    data.buffer.push("<svg version=\"1.1\" class=\"icon-nav\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n   width=\"28px\" height=\"21px\" viewBox=\"0 0 28 21\" enable-background=\"new 0 0 28 21\" xml:space=\"preserve\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" d=\"M2.154,16.8h23.692C27.036,16.8,28,17.74,28,18.9\n  c0,1.16-0.964,2.1-2.154,2.1H2.154C0.964,21,0,20.06,0,18.9C0,17.74,0.964,16.8,2.154,16.8z M2.154,8.4h23.692\n  C27.036,8.4,28,9.34,28,10.5c0,1.16-0.964,2.1-2.154,2.1H2.154C0.964,12.6,0,11.66,0,10.5C0,9.34,0.964,8.4,2.154,8.4z M2.154,0\n  h23.692C27.036,0,28,0.94,28,2.1c0,1.16-0.964,2.1-2.154,2.1H2.154C0.964,4.2,0,3.26,0,2.1C0,0.94,0.964,0,2.154,0z\"/>\n</svg>");
    
  });

});
define('hospitalrun/templates/components/nav-menu', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n  <div class=\"category-title\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleContent", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">\n    ");
    stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{
      'class': ("primary-section-link nav-link")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "nav.route", options) : helperMissing.call(depth0, "link-to", "nav.route", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n  </div>\n  ");
    stack1 = helpers['if'].call(depth0, "isShowing", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n      <span ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'class': (":mega-octicon nav.iconClass")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
    data.buffer.push("></span>");
    stack1 = helpers._triageMustache.call(depth0, "nav.title", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n  <div class=\"category-sub-items\">\n      ");
    stack1 = helpers.each.call(depth0, "nav.subnav", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n  </div>\n  ");
    return buffer;
    }
  function program5(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n        ");
    stack1 = helpers['if'].call(depth0, "show", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n      ");
    return buffer;
    }
  function program6(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n          <div ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "resetNav", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">\n          ");
    stack1 = helpers['if'].call(depth0, "subroute", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(10, program10, data),fn:self.program(7, program7, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n          </div>\n        ");
    return buffer;
    }
  function program7(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n            ");
    stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{
      'class': ("category-sub-item nav-link")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0,depth0],types:["ID","ID"],data:data},helper ? helper.call(depth0, "route", "subroute", options) : helperMissing.call(depth0, "link-to", "route", "subroute", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n          ");
    return buffer;
    }
  function program8(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            <span ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'class': (":octicon iconClass")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
    data.buffer.push("></span>");
    stack1 = helpers._triageMustache.call(depth0, "title", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            ");
    return buffer;
    }

  function program10(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n            ");
    stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{
      'class': ("category-sub-item nav-link")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "route", options) : helperMissing.call(depth0, "link-to", "route", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n          ");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "show", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/templates/components/patient-summary', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, self=this, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            <div class=\"row\">        \n                <div class=\"form-group col-sm-12\">\n                    <label class=\"control-label\">Primary Diagnoses</label> \n                    ");
    stack1 = helpers.each.call(depth0, "primaryDiagnoses", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                </div>\n            </div>\n        ");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                        ");
    stack1 = helpers.unless.call(depth0, "first", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        ");
    stack1 = helpers._triageMustache.call(depth0, "description", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(" (<strong>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "date", options) : helperMissing.call(depth0, "date-format", "date", options))));
    data.buffer.push("</strong>)\n                    ");
    return buffer;
    }
  function program3(depth0,data) {
    
    
    data.buffer.push(", ");
    }

  function program5(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            <div class=\"row\">\n                <div class=\"form-group col-sm-12\">\n                    <label class=\"control-label\">Secondary Diagnoses</label>\n                    ");
    stack1 = helpers.each.call(depth0, "secondaryDiagnoses", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("                \n                </div>\n            </div>\n        ");
    return buffer;
    }

  function program7(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            <div class=\"row\">\n                <div class=\"form-group col-sm-12\">\n                    <label class=\"control-label\">Procedures</label>\n                    ");
    stack1 = helpers.each.call(depth0, "patientProcedures", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("                \n                </div>\n            </div>\n        ");
    return buffer;
    }
  function program8(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                        ");
    stack1 = helpers.unless.call(depth0, "first", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("                    \n                        <span ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editProcedure", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                              ");
    stack1 = helpers._triageMustache.call(depth0, "description", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(">");
    stack1 = helpers._triageMustache.call(depth0, "description", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(" (<strong>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "procedureDate", options) : helperMissing.call(depth0, "date-format", "procedureDate", options))));
    data.buffer.push("</strong>)\n                        </span>\n                    ");
    return buffer;
    }

    data.buffer.push("<div class=\"panel panel-success\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "linkToPatient", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">    \n    <div class=\"panel-body\">\n        <div class=\"row\">        \n            <div class=\"form-group col-sm-3\">\n                <label class=\"control-label\">Id</label> ");
    stack1 = helpers._triageMustache.call(depth0, "patient.displayPatientId", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </div>\n            <div class=\"form-group col-sm-4\">\n                <label class=\"control-label\">Name</label> ");
    stack1 = helpers._triageMustache.call(depth0, "patient.displayName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </div>\n            <div class=\"form-group col-sm-2\">\n                <label class=\"control-label\">Gender</label> ");
    stack1 = helpers._triageMustache.call(depth0, "patient.gender", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </div>\n            <div class=\"form-group col-sm-3\">\n                <label class=\"control-label\">Age</label> ");
    stack1 = helpers._triageMustache.call(depth0, "patient.age", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </div>\n        </div>\n        ");
    stack1 = helpers['if'].call(depth0, "havePrimaryDiagnoses", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    stack1 = helpers['if'].call(depth0, "haveSecondaryDiagnoses", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    stack1 = helpers['if'].call(depth0, "haveProcedures", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("                \n    </div>\n</div>");
    return buffer;
    
  });

});
define('hospitalrun/templates/components/quantity-calc', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['quantity-conv'] || (depth0 && depth0['quantity-conv']),options={hash:{
      'unit': ("unit"),
      'firstQuantity': ("firstQuantity"),
      'unitName': ("unitName"),
      'index': ("index"),
      'quantity': ("quantity")
    },hashTypes:{'unit': "ID",'firstQuantity': "ID",'unitName': "ID",'index': "ID",'quantity': "ID"},hashContexts:{'unit': depth0,'firstQuantity': depth0,'unitName': depth0,'index': depth0,'quantity': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "quantity-conv", options))));
    data.buffer.push("\n");
    return buffer;
    }

  function program3(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <div class=\"row\">\n        <div class=\"col-xs-6\">\n            <div class=\"form-group\">\n                <label>");
    stack1 = helpers._triageMustache.call(depth0, "targetUnit", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(" total: ");
    stack1 = helpers._triageMustache.call(depth0, "calculated", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(" </label>\n            </div>\n        </div>\n    </div>\n");
    return buffer;
    }

    stack1 = helpers.each.call(depth0, "quantityGroups", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    stack1 = helpers['if'].call(depth0, "showTotal", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    return buffer;
    
  });

});
define('hospitalrun/templates/components/quantity-conv', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <div class=\"row\">\n        <div class=\"col-xs-5\">\n            <div ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'class': (":form-group :required quantityClass")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(">\n                <label class=\"control-label\">What does 1 ");
    stack1 = helpers._triageMustache.call(depth0, "unitName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push(" contain?</label>\n            </div>\n        </div>\n    </div>\n");
    return buffer;
    }

  function program3(depth0,data) {
    
    
    data.buffer.push("\n                <label class=\"control-label\">Quantity</label>\n            ");
    }

  function program5(depth0,data) {
    
    
    data.buffer.push("\n                <label class=\"control-label\">Unit</label>\n            ");
    }

    stack1 = helpers.unless.call(depth0, "firstQuantity", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n<div class=\"row\">\n    <div class=\"col-xs-3\">\n        <div ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'class': (":form-group :required quantityClass")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(">\n            ");
    stack1 = helpers['if'].call(depth0, "firstQuantity", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
      'type': ("text"),
      'value': ("quantity"),
      'class': ("form-control")
    },hashTypes:{'type': "STRING",'value': "ID",'class': "STRING"},hashContexts:{'type': depth0,'value': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
    data.buffer.push("\n            <span class=\"help-block\">");
    stack1 = helpers._triageMustache.call(depth0, "quantityHelp", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</span>\n        </div>\n    </div>\n    \n    \n    <div class=\"col-xs-3\">\n        <div ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'class': (":form-group  :required unitClass")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(">\n            ");
    stack1 = helpers['if'].call(depth0, "firstQuantity", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("            \n            ");
    data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
      'viewName': ("select"),
      'class': ("form-control"),
      'content': ("unitList"),
      'optionLabelPath': ("content"),
      'optionValuePath': ("content"),
      'value': ("unit"),
      'prompt': (" ")
    },hashTypes:{'viewName': "STRING",'class': "STRING",'content': "ID",'optionLabelPath': "STRING",'optionValuePath': "STRING",'value': "ID",'prompt': "STRING"},hashContexts:{'viewName': depth0,'class': depth0,'content': depth0,'optionLabelPath': depth0,'optionValuePath': depth0,'value': depth0,'prompt': depth0},contexts:[depth0],types:["ID"],data:data})));
    data.buffer.push("\n             <span class=\"help-block\">");
    stack1 = helpers._triageMustache.call(depth0, "unitHelp", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</span>\n        </div>\n    </div>\n</div>");
    return buffer;
    
  });

});
define('hospitalrun/templates/components/radio-button', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1;


    stack1 = helpers._triageMustache.call(depth0, "label", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/templates/components/render-typeahead', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['pricing-typeahead'] || (depth0 && depth0['pricing-typeahead']),options={hash:{
      'class': ("class"),
      'property': ("property"),
      'label': ("label"),
      'content': ("content"),
      'selection': ("selection")
    },hashTypes:{'class': "ID",'property': "ID",'label': "ID",'content': "ID",'selection': "ID"},hashContexts:{'class': depth0,'property': depth0,'label': depth0,'content': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "pricing-typeahead", options))));
    data.buffer.push("\n");
    return buffer;
    }

  function program3(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['type-ahead'] || (depth0 && depth0['type-ahead']),options={hash:{
      'class': ("class"),
      'property': ("property"),
      'label': ("label"),
      'content': ("content"),
      'selection': ("selection"),
      'setOnBlur': ("setOnBlur"),
      'hint': ("hint")
    },hashTypes:{'class': "ID",'property': "ID",'label': "ID",'content': "ID",'selection': "ID",'setOnBlur': "ID",'hint': "ID"},hashContexts:{'class': depth0,'property': depth0,'label': depth0,'content': depth0,'selection': depth0,'setOnBlur': depth0,'hint': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "type-ahead", options))));
    data.buffer.push("\n");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "usePricingTypeAhead", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/templates/components/select-or-typeahead', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "components/render-typeahead", options) : helperMissing.call(depth0, "partial", "components/render-typeahead", options))));
    data.buffer.push("\n");
    return buffer;
    }

  function program3(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("class"),
      'label': ("label"),
      'property': ("property"),
      'content': ("content"),
      'optionValuePath': ("optionValuePath"),
      'optionLabelPath': ("optionLabelPath"),
      'selected': ("selection"),
      'prompt': ("prompt")
    },hashTypes:{'class': "ID",'label': "ID",'property': "ID",'content': "ID",'optionValuePath': "ID",'optionLabelPath': "ID",'selected': "ID",'prompt': "ID"},hashContexts:{'class': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'selected': depth0,'prompt': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "userCanAdd", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/templates/components/sortable-column', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n        <span ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'class': (":glyphicon sortDesc:glyphicon-arrow-down:glyphicon-arrow-up")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
    data.buffer.push("></span>\n    ");
    return buffer;
    }

    data.buffer.push("<th ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "sortBy", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">\n    ");
    stack1 = helpers['if'].call(depth0, "sorted", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("    \n    ");
    stack1 = helpers._triageMustache.call(depth0, "yield", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n</th>");
    return buffer;
    
  });

});
define('hospitalrun/templates/components/static-text', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push(" \n            ");
    stack1 = helpers._triageMustache.call(depth0, "value", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    return buffer;
    }

  function program3(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            ");
    stack1 = helpers._triageMustache.call(depth0, "yield", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    return buffer;
    }

    data.buffer.push("<div ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'class': (":form-group class")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(">\n    <label class=\"control-label\">");
    stack1 = helpers._triageMustache.call(depth0, "label", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</label>\n    <p class=\"form-control-static\">\n        ");
    stack1 = helpers['if'].call(depth0, "value", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </p>        \n</div>");
    return buffer;
    
  });

});
define('hospitalrun/templates/components/take-photo', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'label': ("How Do You Want To Add A Photo?"),
      'property': ("photoSource"),
      'content': ("photoSources"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content")
    },hashTypes:{'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING"},hashContexts:{'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n    ");
    stack1 = helpers['if'].call(depth0, "showCameraSelect", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    <div class=\"camera panel panel-success\">\n        <div class=\"panel-body\">\n\n            <div class=\"col-sm-4\">\n                <h2>Preview</h2>\n                <video></video>\n            </div>\n            <div class=\"col-sm-2\">\n            </div>\n            <div class=\"col-sm-4\">\n                <h2>Photo</h2>\n                <canvas id=\"canvas\"></canvas>\n            </div>\n        </div>\n        <div class=\"panel-footer\">\n            <button class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "takePhoto", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">Take photo</button>\n        </div>\n    </div>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'label': ("Camera"),
      'property': ("selectedCamera"),
      'content': ("videoSources"),
      'optionValuePath': ("content.id"),
      'optionLabelPath': ("content.label")
    },hashTypes:{'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING"},hashContexts:{'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n    ");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "canCaptureVideo", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n<div class=\"fileupload row\">\n    <h2>Upload Photo</h2>\n    ");
    data.buffer.push(escapeExpression((helper = helpers['image-upload'] || (depth0 && depth0['image-upload']),options={hash:{
      'label': ("Upload File"),
      'property': ("fileName"),
      'selectedFile': ("photoFile")
    },hashTypes:{'label': "STRING",'property': "STRING",'selectedFile': "ID"},hashContexts:{'label': depth0,'property': depth0,'selectedFile': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "image-upload", options))));
    data.buffer.push("\n</div>");
    return buffer;
    
  });

});
define('hospitalrun/templates/error', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1;


    data.buffer.push("<section class=\"view error\">\n\n  <div class=\"view-top-bar\">\n    <h1 class=\"view-current-title\">Sorry, Something went wrong</h1>\n  </div>\n\n<div class=\"alert alert-info\">\n  ");
    stack1 = helpers._triageMustache.call(depth0, "message", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n  <pre>\n  ");
    stack1 = helpers._triageMustache.call(depth0, "stack", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n  </pre>\n</div>\n\n</section>");
    return buffer;
    
  });

});
define('hospitalrun/templates/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    


    data.buffer.push("<section class=\"view index\">\n\n  <div class=\"view-top-bar\">\n    <h1 class=\"view-current-title\">What would you like to do?</h1>\n  </div>\n\n</section>");
    
  });

});
define('hospitalrun/templates/inv-purchase', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['quantity-calc'] || (depth0 && depth0['quantity-calc']),options={hash:{
      'calculated': ("originalQuantity"),
      'targetUnit': ("distributionUnit"),
      'quantityGroups': ("quantityGroups")
    },hashTypes:{'calculated': "ID",'targetUnit': "ID",'quantityGroups': "ID"},hashContexts:{'calculated': depth0,'targetUnit': depth0,'quantityGroups': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "quantity-calc", options))));
    data.buffer.push("\n");
    return buffer;
    }

  function program3(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    <div class=\"form-group\">\n        <label>Quantity</label>\n        ");
    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
      'class': ("form-control"),
      'value': ("originalQuantity"),
      'type': ("text"),
      'disabled': (true)
    },hashTypes:{'class': "STRING",'value': "ID",'type': "STRING",'disabled': "BOOLEAN"},hashContexts:{'class': depth0,'value': depth0,'type': depth0,'disabled': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
    data.buffer.push("                    \n    </div>\n");
    return buffer;
    }

  function program5(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("location"),
      'label': ("Location"),
      'list': ("warehouseList"),
      'selection': ("location")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("aisleLocation"),
      'label': ("Aisle Location"),
      'list': ("aisleLocationList"),
      'selection': ("aisleLocation")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n");
    return buffer;
    }

    data.buffer.push("<div class=\"row\">\n    ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("dateReceived"),
      'label': ("Date Received"),
      'class': ("col-sm-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("invoiceNo"),
      'label': ("Invoice Number"),
      'class': ("col-sm-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n</div>\n");
    stack1 = helpers['if'].call(depth0, "canEditQuantity", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n<div class=\"row\">\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("purchaseCost"),
      'label': ("Purchase Cost"),
      'class': ("required col-sm-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("lotNumber"),
      'label': ("Serial/Lot Number"),
      'class': ("col-sm-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n</div>\n<div class=\"row\">\n    ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("expirationDate"),
      'label': ("Expiration Date"),
      'minDate': ("now"),
      'class': ("col-sm-4")
    },hashTypes:{'property': "STRING",'label': "STRING",'minDate': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'minDate': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n</div>\n<div class=\"row\">    \n    ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("vendor"),
      'label': ("Vendor"),
      'list': ("vendorList"),
      'selection': ("vendor"),
      'class': ("col-sm-6 required")
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'selection': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("vendorItemNo"),
      'label': ("Vendor Item Number"),
      'class': ("col-sm-6")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("    \n</div>\n");
    stack1 = helpers['if'].call(depth0, "isNew", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    data.buffer.push(escapeExpression((helper = helpers['em-checkbox'] || (depth0 && depth0['em-checkbox']),options={hash:{
      'label': ("Gift In Kind"),
      'property': ("giftInKind")
    },hashTypes:{'label': "STRING",'property': "STRING"},hashContexts:{'label': depth0,'property': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-checkbox", options))));
    return buffer;
    
  });

});
define('hospitalrun/templates/inventory-basic', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n        <div class=\"form-group col-sm-2\">\n            <label>ID</label>\n            ");
    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
      'class': ("form-control"),
      'value': ("friendlyId"),
      'type': ("text"),
      'disabled': (true)
    },hashTypes:{'class': "STRING",'value': "ID",'type': "STRING",'disabled': "BOOLEAN"},hashContexts:{'class': depth0,'value': depth0,'type': depth0,'disabled': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
    data.buffer.push("\n        </div>\n    ");
    return buffer;
    }

  function program3(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n        <div class=\"form-group col-sm-2\">\n            <label>Quantity</label>\n            <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "quantity", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>                    \n        </div>\n    ");
    return buffer;
    }

    data.buffer.push("<div class=\"row\">\n    ");
    stack1 = helpers.unless.call(depth0, "isNew", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("name"),
      'label': ("Name"),
      'class': ("required  col-sm-8")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    ");
    stack1 = helpers.unless.call(depth0, "isNew", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n\n</div>\n");
    data.buffer.push(escapeExpression((helper = helpers['em-text'] || (depth0 && depth0['em-text']),options={hash:{
      'label': ("Description"),
      'property': ("description"),
      'rows': (1)
    },hashTypes:{'label': "STRING",'property': "STRING",'rows': "INTEGER"},hashContexts:{'label': depth0,'property': depth0,'rows': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-text", options))));
    data.buffer.push("\n<div class=\"row\">\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'label': ("Type"),
      'property': ("type"),
      'content': ("inventoryTypes"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content"),
      'class': ("required col-sm-4"),
      'prompt': (" ")
    },hashTypes:{'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'class': "STRING",'prompt': "STRING"},hashContexts:{'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'class': depth0,'prompt': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("crossReference"),
      'label': ("Cross Reference"),
      'class': ("col-sm-8")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n</div>\n<div class=\"row\">\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("reorderPoint"),
      'label': ("Reorder Point"),
      'class': ("col-sm-3")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("price"),
      'label': ("Sale Price Per Unit"),
      'class': ("col-sm-3")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'label': ("Distribution Unit"),
      'class': ("col-sm-3 required"),
      'property': ("distributionUnit"),
      'content': ("unitList"),
      'optionLabelPath': ("content"),
      'optionValuePath': ("content"),
      'prompt': (" ")
    },hashTypes:{'label': "STRING",'class': "STRING",'property': "STRING",'content': "ID",'optionLabelPath': "STRING",'optionValuePath': "STRING",'prompt': "STRING"},hashContexts:{'label': depth0,'class': depth0,'property': depth0,'content': depth0,'optionLabelPath': depth0,'optionValuePath': depth0,'prompt': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("            \n</div>");
    return buffer;
    
  });

});
define('hospitalrun/templates/item-charges', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "charges-by-type", options) : helperMissing.call(depth0, "partial", "charges-by-type", options))));
    data.buffer.push("\n");
    return buffer;
    }

  function program3(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <div class=\"panel detail-section\">\n        <div class=\"panel-heading\">\n            <h3 class=\"panel-title\">\n                Charged Items\n                ");
    stack1 = helpers['if'].call(depth0, "canAddCharge", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </h3>\n        </div>\n        <div class=\"panel-body detail-section-content\">\n            <table class=\"table\">\n                <tr class=\"table-header\">\n                    <th>Date</th>\n                    <th>Item</th>\n                    <th>Quantity</th>\n                    <th>Action</th>\n                </tr>\n                ");
    stack1 = helpers['with'].call(depth0, "", "as", "parentController", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </table>\n        </div>\n    </div>\n");
    return buffer;
    }
  function program4(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                    <button class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showAddCharge", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span>Add Item</button>\n                ");
    return buffer;
    }

  function program6(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                    ");
    stack1 = helpers.each.call(depth0, "charges", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                ");
    return buffer;
    }
  function program7(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                        ");
    stack1 = helpers.unless.call(depth0, "medicationCharge", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    ");
    return buffer;
    }
  function program8(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                            <tr>\n                                <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "dateCharged", options) : helperMissing.call(depth0, "date-format", "dateCharged", options))));
    data.buffer.push("</td>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "pricingItem.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "quantity", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>\n                                    ");
    stack1 = helpers['if'].call(depth0, "parentController.canAddCharge", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                    ");
    stack1 = helpers['if'].call(depth0, "parentController.canAddCharge", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                </td>\n                            </tr>\n                        ");
    return buffer;
    }
  function program9(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                        <button class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showEditCharge", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                                    ");
    return buffer;
    }

  function program11(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                        <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showDeleteCharge", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                                            <span class=\"octicon octicon-x\"></span>Delete\n                                        </button>\n                                    ");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "organizeByType", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/templates/item-listing', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


    data.buffer.push("<div class=\"panel panel-primary\">\n    ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "paging", options) : helperMissing.call(depth0, "partial", "paging", options))));
    data.buffer.push("\n    ");
    stack1 = helpers._triageMustache.call(depth0, "yield", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("    \n</div>");
    return buffer;
    
  });

});
define('hospitalrun/templates/loading', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    


    data.buffer.push("<div class=\"loading-notice\" role=\"alert\">\n  <div class=\"wrapper\">\n    <div class=\"spinner\">\n        <div class=\"rect1\"></div>\n        <div class=\"rect2\"></div>\n        <div class=\"rect3\"></div>\n        <div class=\"rect4\"></div>\n        <div class=\"rect5\"></div>\n    </div>\n    <p class=\"loading-text\">Loading</p>\n  </div>\n</div>");
    
  });

});
define('hospitalrun/templates/login', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', escapeExpression=this.escapeExpression;


    data.buffer.push("<div class=\"container\">\n    <form class=\"form-signin\" role=\"form\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "authenticate", {hash:{
      'on': ("submit")
    },hashTypes:{'on': "STRING"},hashContexts:{'on': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">\n        <h2 class=\"form-signin-heading\">Please sign in</h2>\n        <div class=\"form-group\">\n            ");
    data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.TextField", {hash:{
      'id': ("identification"),
      'valueBinding': ("identification"),
      'placeholder': ("Username"),
      'class': ("form-control")
    },hashTypes:{'id': "STRING",'valueBinding': "STRING",'placeholder': "STRING",'class': "STRING"},hashContexts:{'id': depth0,'valueBinding': depth0,'placeholder': depth0,'class': depth0},contexts:[depth0],types:["ID"],data:data})));
    data.buffer.push("\n        </div>\n        <div class=\"form-group\">\n            ");
    data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.TextField", {hash:{
      'id': ("password"),
      'type': ("password"),
      'valueBinding': ("password"),
      'placeholder': ("Password"),
      'class': ("form-control")
    },hashTypes:{'id': "STRING",'type': "STRING",'valueBinding': "STRING",'placeholder': "STRING",'class': "STRING"},hashContexts:{'id': depth0,'type': depth0,'valueBinding': depth0,'placeholder': depth0,'class': depth0},contexts:[depth0],types:["ID"],data:data})));
    data.buffer.push("\n        </div>\n        <button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Sign in</button>\n    </form>\n</div> <!-- /container -->");
    return buffer;
    
  });

});
define('hospitalrun/templates/modal', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                    <button class=\"btn btn-primary on-white\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "updateButtonAction", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));
    data.buffer.push(" ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'disabled': ("isUpdateDisabled")
    },hashTypes:{'disabled': "ID"},hashContexts:{'disabled': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(">");
    stack1 = helpers._triageMustache.call(depth0, "updateButtonText", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</button>\n                ");
    return buffer;
    }

  function program3(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                    <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "cancel", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">Cancel</button>\n                ");
    return buffer;
    }

    data.buffer.push("<div class=\"modal fade\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n                <h4 class=\"modal-title\">");
    stack1 = helpers._triageMustache.call(depth0, "title", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</h4>\n            </div>\n            <div class=\"modal-body\">\n                ");
    stack1 = helpers._triageMustache.call(depth0, "yield", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </div>\n            <div class=\"modal-footer\">\n                ");
    stack1 = helpers.unless.call(depth0, "hideUpdateButton", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                ");
    stack1 = helpers.unless.call(depth0, "hideCancelButton", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </div>\n        </div>\n    </div>\n</div>");
    return buffer;
    
  });

});
define('hospitalrun/templates/navigation', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


    data.buffer.push("    <nav class=\"view sidebar-nav hidden-print\" role=\"navigation\">\n\n    ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "sidebar_nav/header", options) : helperMissing.call(depth0, "partial", "sidebar_nav/header", options))));
    data.buffer.push("\n\n    <div class=\"scroll-container\">\n\n        ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "sidebar_nav/search", options) : helperMissing.call(depth0, "partial", "sidebar_nav/search", options))));
    data.buffer.push("\n\n        ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "sidebar_nav/primary_nav", options) : helperMissing.call(depth0, "partial", "sidebar_nav/primary_nav", options))));
    data.buffer.push("\n\n        ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "sidebar_nav/message", options) : helperMissing.call(depth0, "partial", "sidebar_nav/message", options))));
    data.buffer.push("\n\n    </div>\n\n    </nav>");
    return buffer;
    
  });

});
define('hospitalrun/templates/paging', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <div class=\"btn-group pull-right\">\n        ");
    stack1 = helpers['if'].call(depth0, "showFirstPageButton", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        <button class=\"btn btn-default on-white\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "previousPage", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'disabled': ("disablePreviousPage")
    },hashTypes:{'disabled': "ID"},hashContexts:{'disabled': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(">\n            <span class=\"glyphicon glyphicon-chevron-left\"></span>\n        </button>\n        <button class=\"btn btn-default on-white\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "nextPage", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'disabled': ("disableNextPage")
    },hashTypes:{'disabled': "ID"},hashContexts:{'disabled': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(">\n            <span class=\"glyphicon glyphicon-chevron-right\"></span>\n        </button>\n        ");
    stack1 = helpers['if'].call(depth0, "showLastPageButton", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        \n    </div>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n            <button class=\"btn btn-default on-white\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "firstPage", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'disabled': ("disablePreviousPage")
    },hashTypes:{'disabled': "ID"},hashContexts:{'disabled': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(">\n                <span class=\"glyphicon glyphicon-step-backward\"></span>\n            </button>\n        ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n            <button class=\"btn btn-default on-white\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "lastPage", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'disabled': ("disableNextPage")
    },hashTypes:{'disabled': "ID"},hashContexts:{'disabled': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(">\n                <span class=\"glyphicon glyphicon-step-forward\"></span>\n            </button>\n        ");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "showPagination", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/templates/panel', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            ");
    stack1 = helpers['if'].call(depth0, "disabledAction", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                <button class=\"btn btn-primary on-white disabled-btn\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "disabledAction", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));
    data.buffer.push(">");
    stack1 = helpers._triageMustache.call(depth0, "updateButtonText", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</button>\n            ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                <button class=\"btn btn-primary on-white\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "updateButtonAction", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));
    data.buffer.push(" ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'disabled': ("isUpdateDisabled")
    },hashTypes:{'disabled': "ID"},hashContexts:{'disabled': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(">");
    stack1 = helpers._triageMustache.call(depth0, "updateButtonText", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</button>\n            ");
    return buffer;
    }

  function program6(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            ");
    stack1 = helpers['if'].call(depth0, "cancelButtonText", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(9, program9, data),fn:self.program(7, program7, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    return buffer;
    }
  function program7(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "cancel", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">");
    stack1 = helpers._triageMustache.call(depth0, "cancelButtonText", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</button>\n            ");
    return buffer;
    }

  function program9(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "cancel", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">Cancel</button>\n            ");
    return buffer;
    }

  function program11(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            <button ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'class': ("class")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "buttonAction", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));
    data.buffer.push(">\n                ");
    stack1 = helpers['if'].call(depth0, "buttonIcon", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(12, program12, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                ");
    stack1 = helpers._triageMustache.call(depth0, "buttonText", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </button>\n        ");
    return buffer;
    }
  function program12(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                    <span ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'class': ("buttonIcon")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
    data.buffer.push("></span> \n                ");
    return buffer;
    }

    data.buffer.push("<div class=\"panel panel-primary\">\n    <div class=\"panel-body\">\n        ");
    stack1 = helpers._triageMustache.call(depth0, "yield", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </div>\n    <div class=\"panel-footer\">\n        ");
    stack1 = helpers['if'].call(depth0, "showUpdateButton", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    stack1 = helpers.unless.call(depth0, "hideCancelButton", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    stack1 = helpers.each.call(depth0, "additionalButtons", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </div>\n</div>");
    return buffer;
    
  });

});
define('hospitalrun/templates/print', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1;


    stack1 = helpers._triageMustache.call(depth0, "outlet", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/templates/report-rows', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    ");
    stack1 = helpers['if'].call(depth0, "rowAction", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(5, program5, data),fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n        <tr ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "rowAction.action", "rowAction.model", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["ID","ID"],data:data})));
    data.buffer.push(">\n            ");
    stack1 = helpers.each.call(depth0, "row", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        </tr>\n    ");
    return buffer;
    }
  function program3(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                <td>");
    data.buffer.push(escapeExpression((helper = helpers['array-display'] || (depth0 && depth0['array-display']),options={hash:{
      'content': ("")
    },hashTypes:{'content': "ID"},hashContexts:{'content': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "array-display", options))));
    data.buffer.push("</td>\n            ");
    return buffer;
    }

  function program5(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n        <tr>\n            ");
    stack1 = helpers.each.call(depth0, "", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        </tr>\n    ");
    return buffer;
    }

    stack1 = helpers.each.call(depth0, "currentReportRows", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/templates/search-listing', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, escapeExpression=this.escapeExpression;


    data.buffer.push("<div class=\"panel panel-primary\">\n    <div class=\"panel-body\">\n        ");
    stack1 = helpers._triageMustache.call(depth0, "yield", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </div>\n</div>\n<button class=\"btn btn-primary on-white\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "allItems", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">");
    stack1 = helpers._triageMustache.call(depth0, "view.allButtonText", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</button>\n\n");
    return buffer;
    
  });

});
define('hospitalrun/templates/section', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                <button class=\"btn btn-primary\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "newButtonAction", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));
    data.buffer.push(">");
    stack1 = helpers._triageMustache.call(depth0, "newButtonText", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</button>\n                ");
    return buffer;
    }

  function program3(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                    ");
    stack1 = helpers.each.call(depth0, "additionalButtons", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                ");
    return buffer;
    }
  function program4(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                    <button ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'class': ("class")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "buttonAction", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));
    data.buffer.push(">\n                        ");
    stack1 = helpers['if'].call(depth0, "buttonIcon", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        ");
    stack1 = helpers._triageMustache.call(depth0, "buttonText", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</button>\n                    ");
    return buffer;
    }
  function program5(depth0,data) {
    
    var buffer = '';
    data.buffer.push("<span ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'class': ("buttonIcon")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
    data.buffer.push("></span>");
    return buffer;
    }

  function program7(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                    ");
    stack1 = helpers['if'].call(depth0, "statusQuery", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(11, program11, data),fn:self.program(8, program8, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                ");
    return buffer;
    }
  function program8(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                        <li>");
    stack1 = (helper = helpers['query-params'] || (depth0 && depth0['query-params']),options={hash:{
      'status': ("statusQuery")
    },hashTypes:{'status': "ID"},hashContexts:{'status': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "query-params", options));
    stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0,depth0],types:["ID","sexpr"],data:data},helper ? helper.call(depth0, "linkTo", stack1, options) : helperMissing.call(depth0, "link-to", "linkTo", stack1, options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</li>\n                    ");
    return buffer;
    }
  function program9(depth0,data) {
    
    var stack1;
    stack1 = helpers._triageMustache.call(depth0, "text", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    }

  function program11(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                        <li>");
    stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "linkTo", options) : helperMissing.call(depth0, "link-to", "linkTo", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</li>\n                    ");
    return buffer;
    }

    data.buffer.push("<div class=\"panel panel-default\">\n\n    <div class=\"panel-heading clearfix\">\n\n        <div class=\"view-top-bar\">\n            <h1 class=\"view-current-title\">");
    stack1 = helpers._triageMustache.call(depth0, "currentScreenTitle", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</h1>\n        </div>\n\n        <div class=\"view-sub-bar\">\n\n            <div class=\"view-action-buttons\">\n                ");
    stack1 = helpers['if'].call(depth0, "newButtonAction", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                ");
    stack1 = helpers['if'].call(depth0, "additionalButtons", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </div>\n\n            <ul class=\"nav nav-pills view-sub-nav\">\n                ");
    stack1 = helpers.each.call(depth0, "subActions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </ul>\n\n        </div>\n\n    </div>\n    <div class=\"panel-body\">\n        ");
    stack1 = helpers._triageMustache.call(depth0, "outlet", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </div>\n</div>");
    return buffer;
    
  });

});
define('hospitalrun/templates/sidebar_nav/header', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n        <nav class=\"settings-nav\">\n        ");
    stack1 = helpers['if'].call(depth0, "session.isAuthenticated", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        </nav>\n    ");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n            <a href=\"#\" class=\"logout\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "invalidateSession", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">Logout</a>\n        ");
    return buffer;
    }

  function program4(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n            ");
    stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "login", options) : helperMissing.call(depth0, "link-to", "login", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        ");
    return buffer;
    }
  function program5(depth0,data) {
    
    
    data.buffer.push("Login");
    }

    data.buffer.push("<header class=\"sidebar-nav-header\">\n    <a class=\"sidebar-nav-logo\" href=\"#\">\n      ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "components/logo-svg", options) : helperMissing.call(depth0, "partial", "components/logo-svg", options))));
    data.buffer.push("\n    </a>\n    <a href=\"#\" ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'class': (":settings-trigger isShowingSettings:active")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
    data.buffer.push(" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleSettings", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">\n        <span class=\"mega-octicon octicon-gear\"></span>\n    </a>\n\n    ");
    stack1 = helpers['if'].call(depth0, "isShowingSettings", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n\n</header>");
    return buffer;
    
  });

});
define('hospitalrun/templates/sidebar_nav/message', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1;


    data.buffer.push("<p class=\"sync-status\">");
    stack1 = helpers._triageMustache.call(depth0, "syncStatus", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>");
    return buffer;
    
  });

});
define('hospitalrun/templates/sidebar_nav/primary_nav', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n");
    stack1 = helpers.each.call(depth0, "nav", "in", "navItems", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['nav-menu'] || (depth0 && depth0['nav-menu']),options={hash:{
      'nav': ("nav"),
      'session': ("parentController.session")
    },hashTypes:{'nav': "ID",'session': "ID"},hashContexts:{'nav': depth0,'session': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "nav-menu", options))));
    data.buffer.push("\n");
    return buffer;
    }

    data.buffer.push("<div class=\"primary-nav\">\n");
    stack1 = helpers['with'].call(depth0, "", "as", "parentController", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n</div>");
    return buffer;
    
  });

});
define('hospitalrun/templates/sidebar_nav/search', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n<div class=\"sidebar-nav-search sidebar-nav-section\" role=\"search\">\n    <div class=\"form-group\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['text-search'] || (depth0 && depth0['text-search']),options={hash:{
      'valueBinding': ("searchText"),
      'autofocus': ("true"),
      'placeholder': ("Search"),
      'class': ("form-control")
    },hashTypes:{'valueBinding': "STRING",'autofocus': "STRING",'placeholder': "STRING",'class': "STRING"},hashContexts:{'valueBinding': depth0,'autofocus': depth0,'placeholder': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "text-search", options))));
    data.buffer.push("\n    </div>\n    <button type=\"button\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-search\"></span></button>\n</div>\n");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "allowSearch", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/users/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, AbstractDeleteController) {

     'use strict';

     exports['default'] = AbstractDeleteController['default'].extend({
          title: 'Delete User'
     });

});
define('hospitalrun/users/delete/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1;


    data.buffer.push("<div class=\"alert alert-danger\">\n    <span class=\"glyphicon glyphicon-warning-sign\"></span> \n    Are you sure you wish to delete the user ");
    stack1 = helpers._triageMustache.call(depth0, "name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("?\n</div>");
    return buffer;
    
  });

});
define('hospitalrun/users/delete/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/users/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/user-roles'], function (exports, AbstractEditController, Ember, UserRoles) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend(UserRoles['default'], {
        needs: 'users/index',
        updateCapability: 'add_user',
        
        users: Ember['default'].computed.alias('controllers.users/index.model'),

        actions: {
            update: function() {
                var updateModel = this.get('model'),
                    users = this.get('users');
                
                if (this.get('isNew')) {
                    var newData = updateModel.getProperties('password', 'email', 'roles', 'displayName');
                    newData.name = newData.email;
                    newData.id = 'org.couchdb.user:'+newData.email;
                    if (Ember['default'].isEmpty(newData.password)) {
                        newData.password = uuid.v4()+uuid.v4();
                    }        
                    updateModel.deleteRecord();
                    updateModel = this.get('store').createRecord('user', newData);
                    this.set('model', updateModel);
                } 
                
                if (Ember['default'].isEmpty(this.get('userPrefix'))) {
                    var counter = 1,
                        prefix = 'p',
                        userPrefix = prefix + 0,
                        usedPrefix = users.findBy('userPrefix', prefix);
                    
                    while (!Ember['default'].isEmpty(usedPrefix)) {
                        prefix = userPrefix + counter++;
                        usedPrefix = users.findBy('userPrefix', prefix);
                    }
                    this.set('userPrefix', prefix);                
                }            
                updateModel.save().then(function() {
                    this.displayAlert('User Saved', 'The user has been saved.');                
                }.bind(this));
            }
        }
    });

});
define('hospitalrun/users/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route'], function (exports, AbstractEditRoute) {

    'use strict';

    exports['default'] = AbstractEditRoute['default'].extend({
        editTitle: 'Edit User',
        modelName: 'user',
        newTitle: 'New User'
    });

});
define('hospitalrun/users/edit/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, self=this, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n    ");
    stack1 = helpers.unless.call(depth0, "isNew", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("displayName"),
      'label': ("Display Name")
    },hashTypes:{'property': "STRING",'label': "STRING"},hashContexts:{'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("email"),
      'type': ("email"),
      'label': ("Email")
    },hashTypes:{'property': "STRING",'type': "STRING",'label': "STRING"},hashContexts:{'property': depth0,'type': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'property': ("password"),
      'type': ("password"),
      'label': ("Password")
    },hashTypes:{'property': "STRING",'type': "STRING",'label': "STRING"},hashContexts:{'property': depth0,'type': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    <div class=\"form-group has-success\">\n        <label class=\"control-label\">Role</label>\n        ");
    data.buffer.push(escapeExpression((helper = helpers['role-select'] || (depth0 && depth0['role-select']),options={hash:{
      'value': ("roles"),
      'class': ("form-control"),
      'content': ("userRoles")
    },hashTypes:{'value': "ID",'class': "STRING",'content': "ID"},hashContexts:{'value': depth0,'class': depth0,'content': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "role-select", options))));
    data.buffer.push("\n    </div>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n        <div class=\"form-group has-success\">\n            <label class=\"control-label\">Username</label>\n            <div class=\"form-control\">\n                ");
    stack1 = helpers._triageMustache.call(depth0, "name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </div>\n        </div>\n    ");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/users/edit/view', ['exports', 'hospitalrun/views/panel'], function (exports, PanelView) {

	'use strict';

	exports['default'] = PanelView['default'].extend();

});
define('hospitalrun/users/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, AbstractPagedController, UserSession) {

    'use strict';

    exports['default'] = AbstractPagedController['default'].extend(UserSession['default'], {
        addPermission: 'add_user',
        deletePermission: 'delete_user',
        sortProperties: ['displayName'],

    });

});
define('hospitalrun/users/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'hospitalrun/mixins/user-session'], function (exports, AbstractIndexRoute, UserSession) {

    'use strict';

    exports['default'] = AbstractIndexRoute['default'].extend(UserSession['default'], {
        newButtonAction: function() {
            if (this.currentUserCan('add_user')) {
                return 'newItem';
            } else {
                return null;
            }
        }.property(),    
        newButtonText: '+ new user',
        pageTitle: 'User Listing',
        model: function() {
            return this.store.find('user');
        }
    });

});
define('hospitalrun/users/index/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <table class=\"table\">\n        <tr class=\"table-header\">\n            <th>Name</th>\n            <th>Username</th>\n            <th>Email</th>\n            <th>Role</th>\n            ");
    stack1 = helpers['if'].call(depth0, "showActions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n        </tr>\n        ");
    stack1 = helpers.each.call(depth0, {hash:{
      'itemController': ("users/item-controller")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(4, program4, data),contexts:[],types:[],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </table>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    
    data.buffer.push("\n                <th>Actions</th>\n            ");
    }

  function program4(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n            <tr ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editItem", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                <td>");
    stack1 = helpers._triageMustache.call(depth0, "displayName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>                \n                <td>");
    stack1 = helpers._triageMustache.call(depth0, "name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                <td>");
    stack1 = helpers._triageMustache.call(depth0, "email", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                <td>");
    stack1 = helpers._triageMustache.call(depth0, "displayRole", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                ");
    stack1 = helpers['if'].call(depth0, "parentController.showActions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </tr>\n        ");
    return buffer;
    }
  function program5(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                    <td>\n                        ");
    stack1 = helpers['if'].call(depth0, "parentController.canAdd", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        ");
    stack1 = helpers['if'].call(depth0, "parentController.canDelete", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    </td>\n                ");
    return buffer;
    }
  function program6(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                            <button class=\"btn btn-default\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editItem", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                        ");
    return buffer;
    }

  function program8(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                            <button class=\"btn btn-default\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "deleteItem", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Delete</button>\n                        ");
    return buffer;
    }

  function program10(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n    <div class=\"alert alert-info\">\n        <em>No users found.</em>  \n        ");
    stack1 = helpers['if'].call(depth0, "canAdd", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </div>\n");
    return buffer;
    }
  function program11(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n            <em>Create a new user?</em> <button class=\"btn btn-primary\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "newItem", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push(">New User</button>\n        ");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "hasRecords", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(10, program10, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    return buffer;
    
  });

});
define('hospitalrun/users/index/view', ['exports', 'hospitalrun/views/item-listing'], function (exports, ItemListingView) {

	'use strict';

	exports['default'] = ItemListingView['default'].extend();

});
define('hospitalrun/users/item-controller/controller', ['exports', 'ember', 'hospitalrun/mixins/user-roles'], function (exports, Ember, UserRoles) {

    'use strict';

    exports['default'] = Ember['default'].ObjectController.extend(UserRoles['default'], {
        displayRole: function() {        
            var roles = this.get('roles');
            if (!Ember['default'].isEmpty(roles)) {
                return roles[0];
            }
        }.property('roles')
    });

});
define('hospitalrun/users/route', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend(Ember['default'].SimpleAuth.AuthenticatedRouteMixin, {
        actions: {
            allItems: function() {
                this.transitionTo('users.index');
            }
        }
    });

});
define('hospitalrun/utils/couch-serializer', ['exports'], function (exports) {

    'use strict';

    var couchSerializer = DS.RESTSerializer.extend({
        /**
        @method extractArray
        @param {DS.Store} store
        @param {subclass of DS.Model} type
        @param {Object} payload
        @param {'findAll'|'findMany'|'findHasMany'|'findQuery'} requestType
        @returns {Array} The primary array that was returned in response
        to the original query.
        */
        extractArray: function(store, primaryType, payload) {
            var serializer = this;
            var newPayload = payload.rows.map(function(row){
                return serializer.normalizeRow(row.doc);
            });
            return newPayload;
        },
        
        /**
        `extractSave` is a hook into the extract method used when a call
        is made to `DS.Model#save`. By default this method is alias
        for [extractSingle](#method_extractSingle).

        @method extractSave
        @param {DS.Store} store
        @param {subclass of DS.Model} type
        @param {Object} payload
        @return {Object} json The deserialized payload
        */
        extractSave:  function(store, primaryType, payload) {
            if (payload.ok) {            
                var record =  store.getById('user', payload.id);
                var data = {};
                this.serializeIntoHash(data, primaryType, record, { includeId: true });
                data.user.rev = payload.rev;
                return data.user;
            }
            return null;
        },
        
        /**    
        @method extractSingle
        @param {DS.Store} store
        @param {subclass of DS.Model} type
        @param {Object} payload
        @param {String} id //unused
        @param {'find'|'createRecord'|'updateRecord'|'deleteRecord'} requestType //unused
        @returns {Object} the primary response to the original request          
        */
        extractSingle: function(store, primaryType, payload) {
            return this.normalizeRow(payload);
        },
        
        /**
        Maps _id and _rev to id and rev so that Ember doesn't think they are private properties.
        @param {Object} row Row to normalize
        */
        normalizeRow: function(row) {
            row.id = row._id;
            row.rev = row._rev;            
            return row;
        }

        
        
    });

    exports['default'] = couchSerializer;

});
define('hospitalrun/utils/custom-auth', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].SimpleAuth.Authenticators.Base.extend({
        serverEndpoint: '/db/_session',    
        useGoogleAuth: false,
        
        /**
          @method absolutizeExpirationTime
          @private
        */
        _absolutizeExpirationTime: function(expiresIn) {
            if (!Ember['default'].isEmpty(expiresIn)) {
                return new Date((new Date().getTime()) + (expiresIn - 5) * 1000).getTime();
            }
        },
        
        _checkUser: function(user, resolve, reject) {
            this._makeRequest('POST', {name: user.name}, '/chkuser').then(function(response) {
                Ember['default'].run(function() {
                    if(response.error) {
                        reject(response);
                    }
                    user.displayName = response.displayName;
                    user.role = response.role;
                    user.prefix = response.prefix;
                    resolve(user);
                });
            }, function() {
                Ember['default'].run(function() {
                    //If chkuser fails, user is probably offline; resolve with currently stored credentials
                    resolve(user);
                });
            });               
        },
        
        _getPromise: function(type, data) {        
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                this._makeRequest(type, data).then(function(response) {
                    Ember['default'].run(function() {
                        resolve(response);
                    });
                }, function(xhr) {
                    Ember['default'].run(function() {
                        reject(xhr.responseJSON || xhr.responseText);
                    });
                });
            }.bind(this));
        },
        

        _makeRequest: function(type, data, url) {
            if (!url) {
                url = this.serverEndpoint;
            }
            return Ember['default'].$.ajax({
                url:         url,
                type:        type,
                data:        data,
                dataType:    'json',
                contentType: 'application/x-www-form-urlencoded',
                xhrFields: {
                    withCredentials: true
                }
            });
        },
        
        
        /**
         Authenticate using google auth credentials or credentials from couch db.
         @method authenticate
         @param {Object} credentials The credentials to authenticate the session with
         @return {Ember.RSVP.Promise} A promise that resolves when an access token is successfully acquired from the server and rejects otherwise
         */
        authenticate: function(credentials) {
            if (credentials.google_auth) {
                this.useGoogleAuth = true;
                var session_credentials = {
                    google_auth: true,
                    consumer_key: credentials.params.k,
                    consumer_secret: credentials.params.s1,
                    token: credentials.params.t,
                    token_secret: credentials.params.s2,
                    name: credentials.params.i
                };
                return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                    this._checkUser(session_credentials, resolve, reject);
                }.bind(this));
            }            
            
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                var data = { name: credentials.identification, password: credentials.password };
                this._makeRequest('POST', data).then(function(response) {
                    Ember['default'].run(function() {
                        response.name = data.name;
                        response.expires_at = this._absolutizeExpirationTime(600);
                        this._checkUser(response, function(user) {
                            var pouchDBController = this.get('pouchDBController');
                            pouchDBController.setupMainDB({}).then(function() {
                                resolve(user);
                            }, reject);
                        }.bind(this), reject);
                    }.bind(this));
                }.bind(this), function(xhr) {
                    Ember['default'].run(function() {
                        reject(xhr.responseJSON || xhr.responseText);
                    }.bind(this));
                }.bind(this));
            }.bind(this)); 
        },
        
        invalidate: function() {
            if (this.useGoogleAuth) {
                return new Ember['default'].RSVP.resolve();
            } else {
                return this._getPromise('DELETE');
            }
        },
            
        restore: function(data) {
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                var now = (new Date()).getTime();
                if (!Ember['default'].isEmpty(data.expires_at) && data.expires_at < now) {
                    reject();
                } else {
                    if (data.google_auth) {
                        this.useGoogleAuth = true;
                    }
                    this._checkUser(data, resolve, reject);                                
                }
            }.bind(this));
        }
            
    });

});
define('hospitalrun/utils/date-sort', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = {
        sortByDate: function(firstItem, secondItem, compareAttribute) {
            var firstDate = firstItem.get(compareAttribute),
                secondDate = secondItem.get(compareAttribute);
            return Ember['default'].compare(firstDate.getTime(), secondDate.getTime());
        }
    };

});
define('hospitalrun/utils/diagnosis-validation', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = {
        diagnosisValidation: {
            acceptance: {
                /***
                 * Hack to get validation to fire if diagnosis is not empty 
                 * but a corresponding diagnosisId has not been set meaning the user
                 * didn't select a valid diagnosis
                 */
                accept: true,
                if: function(object, validator) {
                        var diagnosis = object.get(validator),
                            diagnosisId = object.get(validator+'Id');
                        if (!Ember['default'].isEmpty(diagnosis) && Ember['default'].isEmpty(diagnosisId)) {
                            //force validation to fail
                            return true;
                        } else {
                            //Diagnosis is properly set; don't do any further validation
                            return false;
                        }
                }, 
                message: 'Please select a valid diagnosis'         
            }
        }
    };

});
define('hospitalrun/utils/email-validation', ['exports'], function (exports) {

    'use strict';

    exports['default'] = {
        emailRegex: /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
    };

});
define('hospitalrun/utils/inventory-search', ['exports'], function (exports) {

    'use strict';

    exports['default'] = {
        fields: ['crossReference','description','friendlyId','name'],
        filter: function (doc) {
            var uidx = doc._id.indexOf("_"),
                doctype = doc._id.substring(0, uidx);
            return (doctype === 'inventory');
        }
    };

});
define('hospitalrun/utils/invoice-search', ['exports'], function (exports) {

    'use strict';

    exports['default'] = {
        fields: ['patientInfo', 'externalInvoiceNumber'],
        filter: function (doc) {
            var uidx = doc._id.indexOf("_"),
                doctype = doc._id.substring(0, uidx);
            return (doctype === 'invoice');
        }
    };

});
define('hospitalrun/utils/patient-search', ['exports'], function (exports) {

    'use strict';

    exports['default'] = {
        fields: ['externalPatientId','firstName','friendlyId','lastName'],
        filter: function (doc) {
            var uidx = doc._id.indexOf("_"),
                doctype = doc._id.substring(0, uidx);
            return (doctype === 'patient');
        }
    };

});
define('hospitalrun/utils/patient-validation', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = {
        patientTypeAhead: {
            acceptance: {
                accept: true,
                if: function(object) {
                    if (!object.get('selectPatient')) {
                        return false;
                    }
                    if (!object.get('isDirty')) {
                        return false;
                    }
                    var patientName = object.get('patient.displayName'),
                        patientTypeAhead = object.get('patientTypeAhead');
                    if (Ember['default'].isEmpty(patientName) || Ember['default'].isEmpty(patientTypeAhead)) {
                        //force validation to fail
                        return true;
                    } else {
                        var typeAheadName = patientTypeAhead.substr(0, patientName.length);
                        if (patientName !== typeAheadName) {
                            return true;
                        }
                    }
                    //patient is properly selected; don't do any further validation
                    return false;
                }, 
                message: 'Please select a patient'
            }
        }
    };

});
define('hospitalrun/utils/pouch-oauth-xhr', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = function(configs) {
        function PouchOauthXHR(objParameters) {
            this.internalXHR = new XMLHttpRequest(objParameters);
            this.requestHeaders = {
            };
            this.upload = this.internalXHR.upload;
        }

        PouchOauthXHR.prototype = {
            _decodeParameters: function(param_string, current_params) {
                var return_params = current_params || {},
                params = decodeURIComponent(param_string).split('&'),
                param_parts,
                i;
                for (i=0;i<params.length;i++) {
                    param_parts = params[i].split('=');
                    return_params[param_parts[0]] =param_parts[1];            
                }
                return return_params;
            },

            abort: function() {
                this.internalXHR.abort();        
            },

            oauth: configs,

            getAllResponseHeaders: function() {
                return this.internalXHR.getAllResponseHeaders();
            },

            getResponseHeader: function(header) {
                return this.internalXHR.getResponseHeader(header);
            },

            open: function(method, url, async, user, password) {
                this.method = method;
                this.url = url;
                if (async !== undefined) {
                    this.async = async;
                } else {
                       this.async = true;
                }            
                this.user = user;
                this.password = password;
                if(url.indexOf("?") > 0) {
                    var url_params = url.split("?");
                    if (this.method === 'POST' || this.method === 'GET' || this.method === 'DELETE') {                
                        this.url = url_params[0];
                    }
                    this.params = this._decodeParameters(url_params[1]);            
                }
            },

            send: function(data) {
                if (this.signOauth !== undefined) {            
                    this.params = this.signOauth(this.params);
                    if (this.method === 'POST' || this.method === 'GET' || this.method === 'DELETE') {
                        this.url = OAuth.addToURL(this.url, this.params);
                    } else {
                        this.requestHeaders['Authorization'] =  OAuth.getAuthorizationHeader('', this.params);
                    }         
                }

                this.internalXHR.open(this.method, this.url, this.async, this.user, this.password);

                for (var header in this.requestHeaders) {
                    this.internalXHR.setRequestHeader(header, this.requestHeaders[header]);
                }

                if (this.withCredentials !== undefined) {
                    this.internalXHR.withCredentials = this.withCredentials;
                }
                if (this.responseType !== undefined) {
                    this.internalXHR.responseType = this.responseType;
                } 

                if (this.timeout  !== undefined) {
                    this.internalXHR.timeout = this.timeout;
                }
                if (this.ontimeout  !== undefined) {
                    this.internalXHR.ontimeout = this.ontimeout;
                }
                this.readyState = this.internalXHR.readyState;
                this.status = this.internalXHR.status;
                if (this.onreadystatechange !== undefined) {
                    var xhrwrapper = this;
                    this.internalXHR.onreadystatechange = function() {
                        if (this.readyState === 4 && this.status === 0) {
                            console.log("wrapper readystatechange fired with xhr state and status:",this.readyState, this.status);
                            console.log("URL WAS: "+xhrwrapper.url,xhrwrapper);
                            console.trace();
                        }
                        xhrwrapper.readyState = this.readyState;
                        xhrwrapper.response = this.response;
                        xhrwrapper.responseText = this.responseText;
                        xhrwrapper.responseType = this.responseType;
                        xhrwrapper.responseXML = this.responseXML;
                        xhrwrapper.status = this.status;
                        xhrwrapper.statusText = this.statusText;
                        xhrwrapper.onreadystatechange();
                    };
                }
                this.internalXHR.send(data);
            },

            setRequestHeader: function(header, value) {
                this.requestHeaders[header] = value;
            },
            
            signOauth: function(params) {
                if (Ember['default'].isEmpty(params)) {
                    params = {};
                }
                var signature_url = this.url,
                    dblocation = this.url.indexOf('/db/');
                if (dblocation > -1) {            
                    signature_url = 'http://localhost:5984/' + this.url.substring(dblocation+4);
                }
                
                var accessor = {
                    consumerSecret: this.oauth.config_consumer_secret,
                    tokenSecret: this.oauth.config_token_secret
                };
                
                params.oauth_signature_method = 'HMAC-SHA1';
                params.oauth_consumer_key = this.oauth.config_consumer_key;
                params.oauth_token = this.oauth.config_oauth_token;
                params.oauth_version =  "1.0";
                
                var message = {
                    parameters: params
                };
                message.action = signature_url;
                message.method = this.method;
                OAuth.SignatureMethod.sign(message, accessor);
                return message.parameters;
            }
        };

        return PouchOauthXHR;
    }

});
define('hospitalrun/utils/pouch-views', ['exports'], function (exports) {

    'use strict';

    /* global emit */
    /* global req */
    /* global compareStrings */
    /* global getCompareDate */

    function createDesignDoc(item, rev) {
        var ddoc = {
            _id: '_design/' + item.name,
            version: item.version,
            views: {
            }
        };
        if (rev) {
            ddoc._rev = rev;
        }
        ddoc.views[item.name] = { map: item.function.toString() };
        if (item.sort) {
            ddoc.lists = {
                sort: item.sort
            };
        }
        return ddoc;
    }

    function generateSortFunction(sortFunction, includeCompareDate, filterFunction) {
        var generatedFunction = 'function(head, req) {' +
            'function keysEqual(keyA, keyB) {' +
                'for (var i= 0; i < keyA.length; i++) {' +
                    'if (keyA[i] !== keyB[i]) {'+
                        'return false;'+
                    '}'+
                '}'+
                'return true;'+
            '}';
        if (includeCompareDate) {
            generatedFunction += 'function getCompareDate(dateString) {'+
                'if (!dateString || dateString === "") {'+
                    'return 0;'+
                '}'+
                'return new Date(dateString).getTime();'+
            '}';
        }
        generatedFunction += 'function compareStrings(aString, bString) {'+
                'if (!aString) {'+
                    'aString = "";'+
                '}'+
                'if (!bString) {'+
                    'bString = "";'+
                '}'+
                'if (aString < bString) {'+
                    'return -1;'+
                '} else if (aString > bString) {'+
                    'return 1;'+
                '} else {'+
                    'return 0;'+
                '}'+
            '}'+
            'var row,'+
                'rows=[],'+
                'startingPosition = 0;'+
            'while(row = getRow()) {'+
                'rows.push(row);'+
            '}';
        if (filterFunction) {
            generatedFunction += 'rows = rows.filter('+filterFunction+');';
        }
        generatedFunction += 'rows.sort('+sortFunction+');'+
            'if (req.query.sortStartKey) {'+
                'var startKey = JSON.parse(req.query.sortStartKey);'+
                'for (var i=0; i<rows.length; i++) {'+
                    'if (keysEqual(startKey, rows[i].key)) {'+
                        'startingPosition = i;'+
                        'break;'+
                    '}'+
                '}'+
            '}'+
            'if (req.query.sortDesc) {'+
                'rows = rows.reverse();'+
            '}'+
            'if (req.query.sortLimit) {'+
                'rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);'+
            '} else if (startingPosition > 0) {'+
                'rows = rows.slice(startingPosition);'+
            '}'+
            'send(JSON.stringify({"rows" : rows}));'+
        '}';
        return generatedFunction;
    }

    function updateDesignDoc(item, db, rev) {
        var designDoc = createDesignDoc(item, rev);
        db.put(designDoc).then(function () {
            // design doc created!
            //Update index
            db.query(item.name, {stale: 'update_after'}); 
        }, function(err) {
            console.log("ERR updateDesignDoc:",err);
            //ignored, design doc already exists
        });   
    }

        
    var designDocs = [{
        name: 'appointments_by_date',
        function: function(doc) {
            var doctype,
                uidx;
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if(doctype === 'appointment') {
                    var endDate = doc.endDate,
                        startDate = doc.startDate;
                    if (endDate && endDate !== '') {
                        endDate = new Date(endDate);
                        if (endDate.getTime) {
                            endDate = endDate.getTime();
                        }
                    }
                    if (startDate && startDate !== '') {
                        startDate = new Date(startDate);
                        if (startDate.getTime) {
                            startDate = startDate.getTime(); 
                        }
                    }
                    emit([startDate, endDate, doc._id]);
                }
            }
        },
        sort: generateSortFunction(function(a,b) {
            function defaultStatus(value) {
                if (!value || value === '') {
                    return 'Scheduled';
                } else {
                    return value;
                }
            }
            var sortBy = '';
            if (req.query && req.query.sortKey) {
                sortBy = req.query.sortKey;
            }
            switch(sortBy) {
                case 'appointmentType':
                case 'location':
                case 'provider':
                    return compareStrings(a.doc[sortBy], b.doc[sortBy]);
                case 'date': {
                    var startDiff = getCompareDate(a.doc.startDate) -getCompareDate(b.doc.startDate);
                    if (startDiff === 0) {
                        return getCompareDate(a.doc.endDate) -getCompareDate(b.doc.endDate);
                    } else {
                        return startDiff;
                    }
                    break;
                }
                case 'status': {
                    var aStatus = defaultStatus(a.doc[sortBy]),
                        bStatus = defaultStatus(b.doc[sortBy]);
                    return compareStrings(aStatus, bStatus);
                }
                default: {
                    return 0; //Don't sort
                }
            }
        }.toString(), true, function(row) {
            var i, 
                filterBy = null,
                includeRow = true;
            if (req.query && req.query.filterBy) {
                filterBy = JSON.parse(req.query.filterBy);
            }
            if (!filterBy) {
                return true;
            }
            for (i=0; i < filterBy.length; i++) {
                var currentValue = row.doc[filterBy[i].name];
                if (filterBy[i].name === 'status' && (!currentValue || currentValue === '')) {
                    currentValue = 'Scheduled';
                }
                if (currentValue !== filterBy[i].value) {
                    includeRow = false;
                    break;
                }
            }
            return includeRow;
        }.toString()),
        version: 3
    }, {
        name: 'appointments_by_patient',
        function: function(doc) {
            var doctype,
                uidx;
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if(doctype === 'appointment') {
                    var endDate = doc.endDate,
                        startDate = doc.startDate;
                    if (endDate && endDate !== '') {
                        endDate = new Date(endDate);
                        if (endDate.getTime) {
                            endDate = endDate.getTime();
                        }
                    }
                    if (startDate && startDate !== '') {
                        startDate = new Date(startDate);
                        if (startDate.getTime) {
                            startDate = startDate.getTime(); 
                        }
                    }
                    emit([doc.patient, startDate, endDate,doc._id]);
                }
            }
        },
        version: 2
    }, {
        name: 'imaging_by_status',
        function: function(doc) {
            var doctype,
                uidx;
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if(doctype === 'imaging') {
                    var imagingDate = doc.imagingDate,
                        requestedDate = doc.requestedDate;
                    if (imagingDate && imagingDate !== '') {
                        imagingDate = new Date(imagingDate);
                        if (imagingDate.getTime) {
                            imagingDate = imagingDate.getTime(); 
                        }
                    }
                    if (requestedDate && requestedDate !== '') {
                        requestedDate = new Date(requestedDate);
                        if (requestedDate.getTime) {
                            requestedDate = requestedDate.getTime(); 
                        }
                    }            
                    emit([doc.status, requestedDate, imagingDate, doc._id]);
                }
            }    
        },
        version: 2
    }, {    
        name: 'inventory_by_name',
        function: function(doc) {
            var doctype,
                uidx;
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if (doctype === 'inventory') {
                    emit([doc.name, doc._id]); 
                }   
            }    
        },
        sort: generateSortFunction(function(a,b) {
            var sortBy = '';
            if (req.query && req.query.sortKey) {
                sortBy = req.query.sortKey;
            }
            switch(sortBy) {
                case 'crossReference':
                case 'description':
                case 'friendlyId':
                case 'name':
                case 'price':
                case 'quantity':
                case 'type': {
                    return compareStrings(a.doc[sortBy], b.doc[sortBy]);
                }
                default: {
                    return 0; //Don't sort
                }
            }
        }.toString()),    
        version: 1
    }, {    
        name: 'inventory_by_type',
        function: function(doc) {
            var doctype,
                uidx;
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if (doctype === 'inventory') {
                    emit(doc.type); 
                }   
            }    
        },
        version: 2
    }, {    
        name: 'inventory_purchase_by_date_received',
        function: function(doc) {
            var doctype,
                uidx;
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if (doctype === 'inv-purchase') {
                    var dateReceived = doc.dateReceived;
                    if (dateReceived && dateReceived !== '') {
                        dateReceived = new Date(dateReceived);
                        if (dateReceived.getTime) {
                            dateReceived = dateReceived.getTime();
                        }
                    }
                    emit([dateReceived, doc._id]); 
                }   
            }
        },
        version: 2
    }, {    
        name: 'inventory_purchase_by_expiration_date',
        function: function(doc) {
            var doctype,
                uidx;
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if (doctype === 'inv-purchase') {
                    var expirationDate = doc.expirationDate;
                    if (expirationDate && expirationDate !== '') {
                        expirationDate = new Date(expirationDate);
                        if (expirationDate.getTime) {
                            expirationDate = expirationDate.getTime();
                        }
                    }
                    emit([expirationDate, doc._id]); 
                }   
            }
        },
        version: 2
    }, {
        name: 'inventory_request_by_item',
        function: function(doc) {
            var doctype,
                uidx;    
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if(doctype === 'inv-request') {
                    var dateCompleted = doc.dateCompleted;
                    if (dateCompleted && dateCompleted !== '') {
                        dateCompleted = new Date(dateCompleted);
                        if (dateCompleted.getTime) {
                            dateCompleted = dateCompleted.getTime();
                        }
                    }
                    emit([doc.inventoryItem, doc.status, dateCompleted]);
                }
            }    
        },
        version: 2
    }, {
        name: 'inventory_request_by_status',
        function: function(doc) {
            var doctype,
                uidx;    
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if(doctype === 'inv-request') {
                    var dateCompleted = doc.dateCompleted;
                    if (dateCompleted && dateCompleted !== '') {
                        dateCompleted = new Date(dateCompleted);
                        if (dateCompleted.getTime) {
                            dateCompleted = dateCompleted.getTime();
                        }
                    }
                    emit([doc.status, dateCompleted, doc._id]);
                }
            }    
        },
        version: 2
    }, {
        name: 'invoice_by_status',
        function: function(doc) {
            var doctype,
                uidx;    
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if(doctype === 'invoice') {
                    var billDate = doc.billDate;
                    if (billDate && billDate !== '') {
                        billDate= new Date(billDate);
                        if (billDate.getTime) {
                            billDate = billDate.getTime();
                        }
                    }
                    emit([doc.status, billDate, doc._id]);
                }
            }    
        }, 
        version: 2
    }, {
        name: 'lab_by_status',
        function: function(doc) {
            var doctype,
                uidx;
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if(doctype === 'lab') {
                    var labDate = doc.labDate,
                        requestedDate = doc.requestedDate;            
                    if (labDate && labDate !== '') {
                        labDate = new Date(labDate);
                        if (labDate.getTime) {
                            labDate = labDate.getTime(); 
                        }
                    }
                    if (requestedDate && requestedDate !== '') {
                        requestedDate = new Date(requestedDate);
                        if (requestedDate.getTime) {
                            requestedDate = requestedDate.getTime(); 
                        }
                    }                 
                    emit([doc.status, requestedDate, labDate, doc._id]);
                }
            }    
        },
        version: 2
    }, {
        name: 'medication_by_status',
        function: function(doc) {
            var doctype,
                uidx;    
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if(doctype === 'medication') {
                    var prescriptionDate = doc.prescriptionDate,
                        requestedDate = doc.requestedDate;
                    if (prescriptionDate && prescriptionDate !== '') {
                        prescriptionDate = new Date(prescriptionDate);
                        if (prescriptionDate.getTime) {
                            prescriptionDate = prescriptionDate.getTime(); 
                        }
                    }
                    if (requestedDate && requestedDate !== '') {
                        requestedDate = new Date(requestedDate);
                        if (requestedDate.getTime) {
                            requestedDate = requestedDate.getTime(); 
                        }
                    }              
                    emit([doc.status, requestedDate, prescriptionDate, doc._id]);
                }
            }    
        },
        version: 2
    }, {    
        name: 'patient_by_display_id',
        function: function(doc) {
            var doctype,
                uidx;
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if (doctype === 'patient') {
                    if (doc.friendlyId) {
                        emit([doc.friendlyId, doc._id]);
                    } else if (doc.externalPatientId) {
                        emit([doc.externalPatientId, doc._id]);
                    } else {
                        emit([doc._id, doc._id]);
                    }
                }   
            }
        },
        sort: generateSortFunction(function(a,b) {
            var sortBy = '';
            if (req.query && req.query.sortKey) {
                sortBy = req.query.sortKey;
            }
            switch(sortBy) {
                case 'firstName':
                case 'gender':
                case 'lastName':
                case 'status': {
                    return compareStrings(a.doc[sortBy], b.doc[sortBy]);
                }
                case 'dateOfBirth': {
                    return getCompareDate(a.doc.dateOfBirth) -getCompareDate(b.doc.dateOfBirth);
                }
                default: {
                    return 0; //Don't sort
                }
            }
        }.toString(), true),
        version: 3
    }, {    
        name: 'patient_by_status',
        function: function(doc) {
            var doctype,
                uidx;
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if (doctype === 'patient') {                
                    emit(doc.status);
                }
            }
        },
        version: 1
    }, {
        name: 'photo_by_patient',
        function: function(doc) {
            var doctype,
                uidx;
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if (doctype === 'photo') {
                    emit(doc.patient); 
                }   
            }
        },
        version: 2
    }, {
        name: 'procedure_by_date',
        function: function(doc) {
            var doctype,
                uidx;
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if(doctype === 'procedure') {
                    var procedureDate = doc.procedureDate;
                    if (procedureDate && procedureDate !== '') {
                        procedureDate = new Date(procedureDate);
                        if (procedureDate.getTime) {
                            procedureDate = procedureDate.getTime(); 
                        }
                    }
                    emit([procedureDate, doc._id]);
                }
            }
        },
        version: 2
    }, {
        name: 'pricing_by_category',
        function: function(doc) {
            var doctype,
                uidx;
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if (doctype === 'pricing') {
                    emit([doc.category, doc.name, doc.type, doc._id]); 
                }   
            }
        },
        version: 2
    }, {
        name: 'sequence_by_prefix',
        function: function(doc) {
            var doctype,
                uidx;
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if (doctype === 'sequence') {
                    emit(doc.prefix); 
                }   
            }
        },
        version: 2
    }, {
        name: 'visit_by_date',
        function:  function(doc) {
            var doctype,
                uidx;
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if(doctype === 'visit') {
                    var endDate = doc.endDate,
                        startDate = doc.startDate;
                    if (endDate && endDate !== '') {
                        endDate = new Date(endDate);
                        if (endDate.getTime) {
                            endDate = endDate.getTime();
                        }
                    }
                    if (startDate && startDate !== '') {
                        startDate = new Date(startDate);
                        if (startDate.getTime) {
                            startDate = startDate.getTime(); 
                        }
                    }
                    emit([startDate, endDate, doc._id]);
                }
            }
        },
        version: 2
    }, {
        name: 'visit_by_discharge_date',
        function:  function(doc) {
            var doctype,
                uidx;
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if(doctype === 'visit') {
                    var endDate = doc.endDate;
                    if (endDate && endDate !== '') {
                        endDate = new Date(endDate);
                        if (endDate.getTime) {
                            endDate = endDate.getTime();
                        }
                        emit([endDate, doc._id]);
                    }
                }
            }
        },
        version: 1
    }, {
        name: 'visit_by_patient',
        function: function(doc) {
            var doctype,
                uidx;
            if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {
                doctype = doc._id.substring(0, uidx);
                if(doctype === 'visit') {
                    var endDate = doc.endDate,
                        startDate = doc.startDate;
                    if (endDate && endDate !== '') {
                        endDate = new Date(endDate);
                        if (endDate.getTime) {
                            endDate = endDate.getTime();
                        }
                    }
                    if (startDate && startDate !== '') {
                        startDate = new Date(startDate);
                        if (startDate.getTime) {
                            startDate = startDate.getTime(); 
                        }
                    }
                    emit([doc.patient, startDate, endDate, doc.visitType, doc._id]);
                }
            }
        },
        version: 2
    }];

    exports['default'] = function(db) {
        designDocs.forEach(function(item) {
            db.get('_design/' + item.name).then(function(doc) {
                if (doc.version !== item.version) {
                    updateDesignDoc(item, db, doc._rev);
                }
            }, function() {
                updateDesignDoc(item, db);
            });
        });
    }

});
define('hospitalrun/utils/pricing-search', ['exports'], function (exports) {

    'use strict';

    exports['default'] = {
        fields: ['name'],
        filter: function (doc) {
            var uidx = doc._id.indexOf("_"),
                doctype = doc._id.substring(0, uidx);
            return (doctype === 'pricing');
        }
    };

});
define('hospitalrun/views/application', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].View.extend({
        currentPathDidChange: function() {
            Ember['default'].run.next( this, function() {
                this.$("ul.nav li:has(>a.active)").addClass('active');
                this.$("ul.nav li:not(:has(>a.active))").removeClass('active');
            });
        }.observes('controller.currentPath'),

        willInsertElement: function() {
            $("#apploading").remove();
        }
    });

});
define('hospitalrun/views/appointment-event', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Calendar.EventView.extend({
        templateName: 'appointment-event'
    });

});
define('hospitalrun/views/item-listing', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].View.extend({
        layoutName: 'item-listing'
    });

});
define('hospitalrun/views/modal', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].View.extend({
        layoutName: 'modal',
        
        didInsertElement: function() {
            var $modal = this.$('.modal').modal();

            $modal.on('hidden.bs.modal', function () {
                this.get('controller').send('closeModal');
            }.bind(this));
        },

        willDestroyElement: function() {
            this.$('.modal').modal('hide');
            //jquery fixes
            $('body').removeClass('modal-open');
            $('.modal-backdrop').remove();
        }
    });

});
define('hospitalrun/views/panel', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].View.extend({
        layoutName: 'panel'
    });

});
define('hospitalrun/views/print', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].View.extend({
        didInsertElement: function() {
            this._super();
            Ember['default'].run.scheduleOnce('afterRender', this, function() {
                window.print();
            });
        }
    });

});
define('hospitalrun/views/search-listing', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].View.extend({
        layoutName: 'search-listing'
    });

});
define('hospitalrun/visits/add-diagnosis/controller', ['exports', 'ember', 'hospitalrun/controllers/abstract-edit-controller'], function (exports, Ember, AbstractEditController) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend({  
        diagnosisList: Ember['default'].computed.alias('controllers.visits.diagnosisList'),
        
        needs: ['visits','visits/edit'],
        
        editController: Ember['default'].computed.alias('controllers.visits/edit'), 
        lookupListsToUpdate: [{
            name: 'diagnosisList',
            property: 'diagnosis',    
        }],    
        title: 'Add Diagnosis',
        updateButtonText: 'Add',
        updateButtonAction: 'add',
        showUpdateButton: true,
        
        actions: {
            cancel: function() {
                this.send('closeModal');
            },
            
            add: function() {
                this.updateLookupLists();
                var newDiag = {                
                    date: new Date(),
                    description: this.get('diagnosis')                
                };
                this.get('editController').send('addDiagnosis',newDiag);            
            }
        }
    });

});
define('hospitalrun/visits/add-diagnosis/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'property': ("diagnosis"),
      'label': ("Diagnosis"),
      'list': ("diagnosisList"),
      'hint': (false)
    },hashTypes:{'property': "STRING",'label': "STRING",'list': "ID",'hint': "BOOLEAN"},hashContexts:{'property': depth0,'label': depth0,'list': depth0,'hint': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push(" \n");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/visits/add-diagnosis/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/visits/charge/controller', ['exports', 'hospitalrun/procedures/charge/controller', 'ember'], function (exports, ProcedureChargeController, Ember) {

    'use strict';

    exports['default'] = ProcedureChargeController['default'].extend({
        needs: ['visits/edit'],
        cancelAction: 'closeModal',
        newPricingItem: false,
        requestingController: Ember['default'].computed.alias('controllers.visits/edit'),
        pricingList: Ember['default'].computed.alias('controllers.visits/edit.pricingList'),    
    });

});
define('hospitalrun/visits/charge/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "procedures/charge", options) : helperMissing.call(depth0, "partial", "procedures/charge", options))));
    
  });

});
define('hospitalrun/visits/charge/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/visits/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, AbstractDeleteController) {

    'use strict';

    exports['default'] = AbstractDeleteController['default'].extend({
        title: 'Delete Visit',
        
        afterDeleteAction: function() {
            var deleteFromPatient = this.get('deleteFromPatient');
            if (deleteFromPatient) {
                return 'visitDeleted';
            } else {
                return 'closeModal';
            }
        }.property('deleteFromPatient')
    });

});
define('hospitalrun/visits/delete/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


    data.buffer.push("<div class=\"alert alert-danger\">\n    <span class=\"glyphicon glyphicon-warning-sign\"></span> \n    Are you sure you wish to delete this visit?\n</div>\n<form role=\"form\">\n    <div class=\"form-group\">\n        <label class=\"control-label\">Start Date</label>\n        <p class=\"form-control-static\">");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "startDate", options) : helperMissing.call(depth0, "date-format", "startDate", options))));
    data.buffer.push("</p>        \n    </div>\n     <div class=\"form-group\">\n        <label class=\"control-label\">End Date</label>\n        <p class=\"form-control-static\">");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "endDate", options) : helperMissing.call(depth0, "date-format", "endDate", options))));
    data.buffer.push("</p>        \n    </div>\n     <div class=\"form-group\">\n        <label class=\"control-label\">Examiner</label>\n        <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "examiner", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>        \n    </div>\n    <div class=\"form-group\">\n        <label class=\"control-label\">Location</label>\n        <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "location", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>        \n    </div>\n    <div class=\"form-group\">\n        <label class=\"control-label\">Type</label>\n        <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "visitType", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>        \n    </div>\n</form>");
    return buffer;
    
  });

});
define('hospitalrun/visits/delete/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/visits/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/models/add-diagnosis', 'hospitalrun/mixins/charge-actions', 'ember', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/mixins/user-session', 'hospitalrun/mixins/visit-types'], function (exports, AbstractEditController, AddDiagnosisModel, ChargeActions, Ember, PatientSubmodule, UserSession, VisitTypes) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend(ChargeActions['default'], PatientSubmodule['default'], UserSession['default'], VisitTypes['default'], {
        needs: 'visits',
        
        canAddAppointment: function() {        
            return this.currentUserCan('add_appointment');
        }.property(),    

        canAddImaging: function() {
            return this.currentUserCan('add_imaging');
        }.property(),    

        canAddLab: function() {        
            return this.currentUserCan('add_lab');
        }.property(),    
        
        canAddMedication: function() {        
            return this.currentUserCan('add_medication');
        }.property(),
        
        canAddDiagnosis: function() {        
            return this.currentUserCan('add_diagnosis');
        }.property(),    

        canAddProcedure: function() {        
            return this.currentUserCan('add_procedure');
        }.property(),
        
        canAddVitals: function() {        
            return this.currentUserCan('add_vitals');
        }.property(),
        
        canDeleteDiagnosis: function() {        
            return this.currentUserCan('delete_diagnosis');
        }.property(),
        
        canDeleteImaging: function() {
            return this.currentUserCan('delete_imaging');
        }.property(),        
        
        canDeleteLab: function() {        
            return this.currentUserCan('delete_lab');
        }.property(),        
        
        canDeleteMedication: function() {        
            return this.currentUserCan('delete_medication');
        }.property(),

        canDeleteProcedure: function() {        
            return this.currentUserCan('delete_procedure');
        }.property(),
        
        canDeleteVitals: function() {        
            return this.currentUserCan('delete_vitals');
        }.property(),
        
        disabledAction: function() {
            this.get('model').validate();
            this._super();
        }.property('endDate', 'startDate', 'isValid'),
        
        isAdmissionVisit: function() {
            var visitType = this.get('visitType'),
                isAdmission = (visitType === 'Admission');
            if (isAdmission) {
                this.set('outPatient', false);
            } else {
                this.set('status');
                this.set('outPatient', true);
            }
            return isAdmission;
        }.property('visitType'),
        
        startDateChanged: function() {
            var isAdmissionVisit = this.get('isAdmissionVisit'), 
                startDate = this.get('startDate');
            if (!isAdmissionVisit) {
                this.set('endDate', startDate);
            }
        }.observes('isAdmissionVisit', 'startDate'),
        
        cancelAction: 'returnToPatient',
        chargePricingCategory: 'Ward',
        chargeRoute: 'visits.charge',
        dateTimeFormat: 'l h:mm A',
        diagnosisList: Ember['default'].computed.alias('controllers.visits.diagnosisList'),
        findPatientVisits: false,
        pricingList: null, //This gets filled in by the route
        pricingTypes: Ember['default'].computed.alias('controllers.visits.wardPricingTypes'),
        physicianList: Ember['default'].computed.alias('controllers.visits.physicianList'),
        locationList: Ember['default'].computed.alias('controllers.visits.locationList'),
        visitTypesList: Ember['default'].computed.alias('controllers.visits.visitTypeList'),
        lookupListsToUpdate: [{
            name: 'diagnosisList',
            property: 'primaryBillingDiagnosis',
            id: 'diagnosis_list'
        }, {
            name: 'diagnosisList',
            property: 'primaryDiagnosis',
            id: 'diagnosis_list'
        }, {
            name: 'physicianList',
            property: 'examiner',
            id: 'physician_list'
        }, {
            name: 'locationList',
            property: 'location',
            id: 'visit_location_list'
        }],
        
        newVisit: false,
        visitStatuses: [
            'Admitted',
            'Discharged'
        ],

        updateCapability: 'add_visit',
        
        _finishAfterUpdate: function() {
            this.displayAlert('Visit Saved', 'The visit record has been saved.');
        },

        haveAdditionalDiagnoses: function() {
            return !Ember['default'].isEmpty(this.get('additionalDiagnoses'));
        }.property('additionalDiagnoses.@each'),

        afterUpdate: function() {
            var patient = this.get('patient'),
                patientAdmitted = patient.get('admitted'),
                patientUpdated = false,
                status = this.get('status');
            if (status === 'Admitted' && !patientAdmitted) {
                patient.set('admitted', true);
                patientUpdated = true;
            } else if (status === 'Discharged' && patientAdmitted) {
                this.getPatientVisits(patient).then(function(visits)  {
                    if (Ember['default'].isEmpty(visits.findBy('status', 'Admitted'))) {
                        patient.set('admitted', false);
                        patientUpdated = true;
                    }                    
                }.bind(this));
            }
            if (patientUpdated) {
                patient.save().then(this._finishAfterUpdate.bind(this));
            } else {
                this.displayAlert('Visit Saved', 'The visit record has been saved.');
            }
        },
        
        beforeUpdate: function() {        
            if (this.get('isNew')) {
                this.set('newVisit', true);
            }
            return new Ember['default'].RSVP.Promise(function(resolve, reject) {
                this.updateCharges().then(resolve, reject);
            }.bind(this));
        },
        
        /**
         * Adds or removes the specified object from the specified list.
         * @param {String} listName The name of the list to operate on.
         * @param {Object} listObject The object to add or removed from the
         * specified list.
         * @param {boolean} removeObject If true remove the object from the list;
         * otherwise add the specified object to the list.
         */
        updateList: function(listName, listObject, removeObject) {
            this.get(listName).then(function(list) {
                if (removeObject) {
                    list.removeObject(listObject);
                } else {
                    list.addObject(listObject);
                }
                this.send('update', true);
                this.send('closeModal');
            }.bind(this));
        },
        
        actions: {
            addDiagnosis: function(newDiagnosis) {
                var additionalDiagnoses = this.get('additionalDiagnoses');
                if (!Ember['default'].isArray(additionalDiagnoses)) {
                    additionalDiagnoses = [];
                }
                additionalDiagnoses.addObject(newDiagnosis);
                this.set('additionalDiagnoses', additionalDiagnoses);
                this.send('update', true);
                this.send('closeModal');
            },
            
            deleteDiagnosis: function(diagnosis) {
                var additionalDiagnoses = this.get('additionalDiagnoses');
                additionalDiagnoses.removeObject(diagnosis);
                this.set('additionalDiagnoses', additionalDiagnoses);
                this.send('update', true);
            },        
            
            addVitals: function(newVitals) {
                this.updateList('vitals', newVitals);
            },
            
            cancel: function() {
                var cancelledItem = this.get('model');
                if (this.get('isNew')) {
                    cancelledItem.deleteRecord();
                } else {
                    cancelledItem.rollback();
                }
                this.send(this.get('cancelAction'));
            },
            
            deleteProcedure: function(procedure) {
                this.updateList('procedures', procedure, true);
            },
            
            deleteVitals: function(vitals) {
                this.updateList('vitals', vitals, true);
            },
            
            editImaging: function(imaging) {
                imaging.setProperties({
                    'isCompleting': false,
                    'returnToVisit': true
                });
                this.transitionToRoute('imaging.edit', imaging);
            },        
            
            editLab: function(lab) {
                lab.setProperties({
                    'isCompleting': false,
                    'returnToVisit': true
                });
                this.transitionToRoute('labs.edit', lab);
            },
            
            editMedication: function(medication) {
                medication.set('returnToVisit', true);
                this.transitionToRoute('medication.edit', medication);
            },
            
            showAddVitals: function() {
                var newVitals = this.get('store').createRecord('vital', {
                    dateRecorded: new Date()
                });
                this.send('openModal', 'visits.vitals.edit', newVitals);
            },
            
            newAppointment: function() {
                var now = moment().hours(8).minutes(0).seconds(0).toDate();
                var newAppointment = this.get('store').createRecord('appointment', {
                    patient: this.get('patient'),
                    startDate: now,
                    endDate: now,
                    returnToVisit: true,
                    visit: this.get('model')                
                });
                newAppointment.set('returnToVisit', true);
                this.transitionToRoute('appointments.edit', newAppointment);
            },
            
            newImaging: function() {
                var newImaging = this.get('store').createRecord('imaging', {
                    isCompleting: false,
                    patient: this.get('patient'),
                    visit: this.get('model'),
                    returnToVisit: true
                });            
                this.transitionToRoute('imaging.edit', newImaging);
            },

            newLab: function() {
                var newLab = this.get('store').createRecord('lab', {
                    isCompleting: false,
                    patient: this.get('patient'),
                    visit: this.get('model'),
                    returnToVisit: true
                });            
                this.transitionToRoute('labs.edit', newLab);
            },        

            newMedication: function() {
                var newMedication = this.get('store').createRecord('medication', {
                    prescriptionDate: moment().startOf('day').toDate(),
                    patient: this.get('patient'),
                    visit: this.get('model'),
                    returnToVisit: true
                });            
                this.transitionToRoute('medication.edit', newMedication);
            },
            
            showAddDiagnosis: function() {
                this.send('openModal', 'visits.add-diagnosis', AddDiagnosisModel['default'].create());
            },
            
            showAddProcedure: function() {
                var newProcedure = this.get('store').createRecord('procedure', {
                    procedureDate: new Date(),
                    visit: this.get('model'),
                });
                this.transitionToRoute('procedures.edit', newProcedure);
            },

            showDeleteImaging: function(imaging) {
                this.send('openModal', 'imaging.delete', imaging);
            },

            showDeleteLab: function(lab) {
                this.send('openModal', 'labs.delete', lab);
            },
            
            showDeleteMedication: function(medication) {
                this.send('openModal', 'medication.delete', medication);
            },    
            
            showDeleteProcedure: function(procedure) {
                this.send('openModal', 'visits.procedures.delete', procedure);
            },
            
            showDeleteVitals: function(vitals) {
                this.send('openModal', 'visits.vitals.delete', vitals);
            },

            showEditProcedure: function(procedure) {
                if (Ember['default'].isEmpty(procedure.get('visit'))) {
                    procedure.set('visit', this.get('model'));
                }
                procedure.set('returnToVisit', true);
                procedure.set('returnToPatient', false);            
                this.transitionToRoute('procedures.edit', procedure);
            },
            
            showEditVitals: function(vitals) {
                this.send('openModal', 'visits.vitals.edit', vitals);
            }
        }
    });

});
define('hospitalrun/visits/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'hospitalrun/mixins/charge-route'], function (exports, AbstractEditRoute, ChargeRoute) {

    'use strict';

    exports['default'] = AbstractEditRoute['default'].extend(ChargeRoute['default'], {
        editTitle: 'Edit Visit',
        modelName: 'visit',
        newTitle: 'New Visit',
        pricingCategory: 'Ward'
    });

});
define('hospitalrun/visits/edit/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

  function program1(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                    <button type=\"button\" class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "newAppointment", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span> New Appointment</button>\n                ");
    return buffer;
    }

  function program3(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                \n                    <div class=\"row\">\n                        <div class=\"form-group col-sm-3\">\n                            <label>Patient</label>\n                            <p class=\"form-control-static\">");
    stack1 = helpers._triageMustache.call(depth0, "patient.displayName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</p>\n                        </div>\n                        ");
    stack1 = helpers['if'].call(depth0, "isAdmissionVisit", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(6, program6, data),fn:self.program(4, program4, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'class': ("col-sm-3"),
      'property': ("location"),
      'label': ("Location"),
      'list': ("locationList"),
      'selection': ("location")
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'class': depth0,'property': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n                    </div>\n                    <div class=\"row\">\n                        ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-sm-3 required"),
      'label': ("Visit Type"),
      'property': ("visitType"),
      'content': ("visitTypes"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content")
    },hashTypes:{'class': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING"},hashContexts:{'class': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n                        ");
    stack1 = helpers['if'].call(depth0, "isAdmissionVisit", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'class': ("col-sm-3"),
      'property': ("examiner"),
      'label': ("Examiner"),
      'list': ("physicianList"),
      'selection': ("examiner")
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID"},hashContexts:{'class': depth0,'property': depth0,'label': depth0,'list': depth0,'selection': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n                    </div>\n                    <div class=\"row\">\n                        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'class': ("col-sm-5"),
      'property': ("primaryDiagnosis"),
      'label': ("Admitting Diagnosis"),
      'list': ("diagnosisList"),
      'selection': ("primaryDiagnosis"),
      'hint': (false)
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID",'hint': "BOOLEAN"},hashContexts:{'class': depth0,'property': depth0,'label': depth0,'list': depth0,'selection': depth0,'hint': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push(" \n                        ");
    data.buffer.push(escapeExpression((helper = helpers['select-or-typeahead'] || (depth0 && depth0['select-or-typeahead']),options={hash:{
      'class': ("col-sm-5"),
      'property': ("primaryBillingDiagnosis"),
      'label': ("Final/Billing Diagnosis"),
      'list': ("diagnosisList"),
      'selection': ("primaryBillingDiagnosis"),
      'hint': (false)
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING",'list': "ID",'selection': "ID",'hint': "BOOLEAN"},hashContexts:{'class': depth0,'property': depth0,'label': depth0,'list': depth0,'selection': depth0,'hint': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-or-typeahead", options))));
    data.buffer.push("\n                        ");
    stack1 = helpers['if'].call(depth0, "canAddDiagnosis", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    </div>\n                    ");
    stack1 = helpers['if'].call(depth0, "haveAdditionalDiagnoses", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(12, program12, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-text'] || (depth0 && depth0['em-text']),options={hash:{
      'label': ("Patient History"),
      'property': ("history"),
      'rows': (3)
    },hashTypes:{'label': "STRING",'property': "STRING",'rows': "INTEGER"},hashContexts:{'label': depth0,'property': depth0,'rows': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-text", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-text'] || (depth0 && depth0['em-text']),options={hash:{
      'label': ("History since last seen"),
      'property': ("historySince"),
      'rows': (3)
    },hashTypes:{'label': "STRING",'property': "STRING",'rows': "INTEGER"},hashContexts:{'label': depth0,'property': depth0,'rows': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-text", options))));
    data.buffer.push("\n                    ");
    data.buffer.push(escapeExpression((helper = helpers['em-text'] || (depth0 && depth0['em-text']),options={hash:{
      'label': ("Notes"),
      'property': ("notes"),
      'rows': (3)
    },hashTypes:{'label': "STRING",'property': "STRING",'rows': "INTEGER"},hashContexts:{'label': depth0,'property': depth0,'rows': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-text", options))));
    data.buffer.push("\n                ");
    return buffer;
    }
  function program4(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("startDate"),
      'label': ("Admission Date"),
      'format': ("dateTimeFormat"),
      'showTime': (true),
      'class': ("col-sm-3 required")
    },hashTypes:{'property': "STRING",'label': "STRING",'format': "ID",'showTime': "BOOLEAN",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'format': depth0,'showTime': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("endDate"),
      'label': ("Discharge Date"),
      'format': ("dateTimeFormat"),
      'showTime': (true),
      'class': ("col-sm-3")
    },hashTypes:{'property': "STRING",'label': "STRING",'format': "ID",'showTime': "BOOLEAN",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'format': depth0,'showTime': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n                        ");
    return buffer;
    }

  function program6(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("startDate"),
      'label': ("Date"),
      'class': ("col-sm-3 required")
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING"},hashContexts:{'property': depth0,'label': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n                        ");
    return buffer;
    }

  function program8(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n                            ");
    data.buffer.push(escapeExpression((helper = helpers['em-select'] || (depth0 && depth0['em-select']),options={hash:{
      'class': ("col-sm-3"),
      'label': ("Visit Status"),
      'property': ("status"),
      'content': ("visitStatuses"),
      'optionValuePath': ("content"),
      'optionLabelPath': ("content"),
      'prompt': (" ")
    },hashTypes:{'class': "STRING",'label': "STRING",'property': "STRING",'content': "ID",'optionValuePath': "STRING",'optionLabelPath': "STRING",'prompt': "STRING"},hashContexts:{'class': depth0,'label': depth0,'property': depth0,'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'prompt': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-select", options))));
    data.buffer.push("\n                        ");
    return buffer;
    }

  function program10(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                            <div class=\"form-group col-sm-2\">\n                                <label class=\"control-label\">&nbsp;</label>\n                                <p class=\"form-control-static\">                                \n                                    <button class=\"btn btn-primary\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showAddDiagnosis", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span> Add Diagnosis</button>\n                                </p>\n                            </div>\n                        ");
    return buffer;
    }

  function program12(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                        <h4>\n                            Additional Diagnoses\n                        </h4>    \n                        <table class=\"table\">\n                            <tr class=\"table-header\">\n                                <th>Date</th>\n                                <th>Diagnosis</th>\n                                <th>Delete</th>\n                            </tr>\n                            ");
    stack1 = helpers['with'].call(depth0, "canDeleteDiagnosis", "as", "canDeleteDiagnosis", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(13, program13, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        </table>\n                    ");
    return buffer;
    }
  function program13(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                ");
    stack1 = helpers.each.call(depth0, "additionalDiagnoses", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(14, program14, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                            ");
    return buffer;
    }
  function program14(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                                <tr>\n                                    <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "date", options) : helperMissing.call(depth0, "date-format", "date", options))));
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "description", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>\n                                        ");
    stack1 = helpers['if'].call(depth0, "canDeleteDiagnosis", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(15, program15, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                    </td>\n                                </tr>\n                                ");
    return buffer;
    }
  function program15(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                            <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "deleteDiagnosis", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span> Delete</button>\n                                        ");
    return buffer;
    }

  function program17(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n        <div class=\"panel\">\n            <div class=\"panel-heading\">\n                <h3 class=\"panel-title\">\n                    <a data-toggle=\"collapse\" data-parent=\"#visit-accordion\" href=\"#visit-procedures\">\n                        Procedures \n                        ");
    stack1 = helpers['if'].call(depth0, "canAddProcedure", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(18, program18, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    </a>\n                </h3>\n            </div>\n            <div id=\"visit-procedures\" class=\"panel-collapse collapse in\">\n                <div class=\"panel-body\">\n                    <table class=\"table\">\n                        <tr class=\"table-header\">\n                            <th>Date</th>\n                            <th>Procedure</th>\n                            <th>Actions</th>\n                        </tr>\n                        ");
    stack1 = helpers['with'].call(depth0, "", "as", "parentController", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(20, program20, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    </table>\n                </div>\n            </div>\n        </div>    \n        <div class=\"panel\">\n            <div class=\"panel-heading\">\n                <h3 class=\"panel-title\">\n                    <a data-toggle=\"collapse\" data-parent=\"#patient-accordion\" href=\"#patient-medication\">\n                        Medication \n                        ");
    stack1 = helpers['if'].call(depth0, "canAddMedication", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(26, program26, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    </a>\n                </h3>        \n            </div>\n            <div id=\"patient-medication\" class=\"panel-collapse collapse in\">\n                <div class=\"panel-body\">\n                    <table class=\"table\">\n                        <tr class=\"table-header\">\n                            <th>Date</th>\n                            <th>Name</th>\n                            <th>Status</th>\n                            <th>Prescription</th>\n                            <th>Requested By</th>\n                            <th>Actions</th>\n                        </tr>\n                        ");
    stack1 = helpers.each.call(depth0, "medication", {hash:{
      'itemController': ("medication/item-controller")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(28, program28, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    </table>\n                </div>\n            </div>\n        </div>\n        <div class=\"panel\">\n            <div class=\"panel-heading\">\n                <h3 class=\"panel-title\">\n                    <a data-toggle=\"collapse\" data-parent=\"#patient-accordion\" href=\"#patient-labs\">\n                        Labs \n                        ");
    stack1 = helpers['if'].call(depth0, "canAddLab", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(34, program34, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    </a>\n                </h3>\n            </div>\n            <div id=\"patient-labs\" class=\"panel-collapse collapse in\">\n                <div class=\"panel-body\">\n                    <table class=\"table\">\n                        <tr class=\"table-header\">\n                            <th>Date Requested</th>\n                            <th>Lab Type</th>\n                            <th>Status</th>\n                            <th>Date Processed</th>\n                            <th>Result</th>\n                            <th>Notes</th>\n                            <th>Requested By</th>\n                            <th>Actions</th>\n                        </tr>\n                        ");
    stack1 = helpers.each.call(depth0, "labs", {hash:{
      'itemController': ("labs/item-controller")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(36, program36, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    </table>\n                </div>\n            </div>\n        </div>\n        <div class=\"panel\">\n            <div class=\"panel-heading\">\n                <h3 class=\"panel-title\">\n                    <a data-toggle=\"collapse\" data-parent=\"#patient-accordion\" href=\"#patient-imaging\">\n                        Imaging \n                        ");
    stack1 = helpers['if'].call(depth0, "canAddImaging", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(42, program42, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    </a>\n                </h3>\n            </div>\n            <div id=\"patient-imaging\" class=\"panel-collapse collapse in\">\n                <div class=\"panel-body\">\n                    <table class=\"table\">\n                        <tr class=\"table-header\">\n                            <th>Date Requested</th>\n                            <th>Imaging Type</th>\n                            <th>Status</th>\n                            <th>Date Processed</th>\n                            <th>Result</th>\n                            <th>Notes</th>\n                            <th>Requested By</th>\n                            <th>Actions</th>\n                        </tr>\n                        ");
    stack1 = helpers.each.call(depth0, "imaging", {hash:{
      'itemController': ("imaging/item-controller")
    },hashTypes:{'itemController': "STRING"},hashContexts:{'itemController': depth0},inverse:self.noop,fn:self.program(44, program44, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    </table>\n                </div>\n            </div>\n        </div>    \n        <div class=\"panel\">\n            <div class=\"panel-heading\">\n                <h3 class=\"panel-title\">\n                    <a data-toggle=\"collapse\" data-parent=\"#visit-accordion\" href=\"#visit-vitals\">\n                        Vitals \n                        ");
    stack1 = helpers['if'].call(depth0, "canAddVitals", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(50, program50, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    </a>\n                </h3>\n            </div>\n            <div id=\"visit-vitals\" class=\"panel-collapse collapse in\">\n                <div class=\"panel-body\">\n                    <table class=\"table\">\n                        <tr class=\"table-header\">\n                            <th>Date</th>\n                            <th>Temperature</th>\n                            <th>Weight</th>\n                            <th>Height</th>\n                            <th>SBP</th>\n                            <th>DBP</th>\n                            <th>Heart Rate</th>\n                            <th>Respiratory Rate</th>\n                            <th>Delete</th>\n                        </tr>\n                        ");
    stack1 = helpers['with'].call(depth0, "", "as", "parentController", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(52, program52, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                    </table>\n                </div>\n            </div>\n        </div>\n        ");
    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(58, program58, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    ");
    return buffer;
    }
  function program18(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                            <button class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showAddProcedure", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span> New Procedure</button>\n                        ");
    return buffer;
    }

  function program20(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                            ");
    stack1 = helpers.each.call(depth0, "procedures", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(21, program21, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        ");
    return buffer;
    }
  function program21(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                            <tr>\n                                <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "procedureDate", options) : helperMissing.call(depth0, "date-format", "procedureDate", options))));
    data.buffer.push("</td>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "description", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>\n                                    ");
    stack1 = helpers['if'].call(depth0, "parentController.canAddProcedure", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(22, program22, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                    ");
    stack1 = helpers['if'].call(depth0, "parentController.canDeleteProcedure", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(24, program24, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                </td>\n                            </tr>\n                            ");
    return buffer;
    }
  function program22(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                        <button class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showEditProcedure", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                                    ");
    return buffer;
    }

  function program24(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                        <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showDeleteProcedure", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span> Delete</button>\n                                    ");
    return buffer;
    }

  function program26(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                            <button class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "newMedication", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span> New Medication</button>\n                        ");
    return buffer;
    }

  function program28(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                            <tr ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editMedication", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                                <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "prescriptionDate", options) : helperMissing.call(depth0, "date-format", "prescriptionDate", options))));
    data.buffer.push("</td>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "inventoryItem.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "status", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "prescription", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "requestedBy", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>\n                                    ");
    stack1 = helpers['if'].call(depth0, "canEdit", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(29, program29, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                </td>\n                            </tr>\n                        ");
    return buffer;
    }
  function program29(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                        ");
    stack1 = helpers['if'].call(depth0, "parentController.canAddMedication", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(30, program30, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                        ");
    stack1 = helpers['if'].call(depth0, "parentController.canDelete", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(32, program32, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                    ");
    return buffer;
    }
  function program30(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                            <button class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editMedication", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                                        ");
    return buffer;
    }

  function program32(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                            <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showDeleteMedication", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span>  Delete</button>\n                                        ");
    return buffer;
    }

  function program34(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                            <button class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "newLab", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span> New Lab</button>\n                        ");
    return buffer;
    }

  function program36(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                            <tr ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editLab", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                                <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "requestedDate", options) : helperMissing.call(depth0, "date-format", "requestedDate", options))));
    data.buffer.push("</td>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "labType.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "status", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "labDate", options) : helperMissing.call(depth0, "date-format", "labDate", options))));
    data.buffer.push("</td>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "result", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "notes", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "requestedBy", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>\n                                    ");
    stack1 = helpers['if'].call(depth0, "canEdit", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(37, program37, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                </td>\n                            </tr>\n                        ");
    return buffer;
    }
  function program37(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                        ");
    stack1 = helpers['if'].call(depth0, "parentController.canAddLab", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(38, program38, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                        ");
    stack1 = helpers['if'].call(depth0, "parentController.canDeleteLab", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(40, program40, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                    ");
    return buffer;
    }
  function program38(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                            <button class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editLab", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                                        ");
    return buffer;
    }

  function program40(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                            <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showDeleteLab", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span>  Delete</button>\n                                        ");
    return buffer;
    }

  function program42(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                            <button class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "newImaging", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span> New Imaging</button>\n                        ");
    return buffer;
    }

  function program44(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                            <tr ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editImaging", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">\n                                <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "requestedDate", options) : helperMissing.call(depth0, "date-format", "requestedDate", options))));
    data.buffer.push("</td>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "imagingType.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "status", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "imagingDate", options) : helperMissing.call(depth0, "date-format", "imagingDate", options))));
    data.buffer.push("</td>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "result", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "notes", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>");
    stack1 = helpers._triageMustache.call(depth0, "requestedBy", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                <td>\n                                    ");
    stack1 = helpers['if'].call(depth0, "canEdit", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(45, program45, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                </td>\n                            </tr>\n                        ");
    return buffer;
    }
  function program45(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                                        ");
    stack1 = helpers['if'].call(depth0, "parentController.canAddImaging", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(46, program46, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                        ");
    stack1 = helpers['if'].call(depth0, "parentController.canDeleteImaging", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(48, program48, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                    ");
    return buffer;
    }
  function program46(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                            <button class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "editImaging", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                                        ");
    return buffer;
    }

  function program48(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                            <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showDeleteImaging", "", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span> Delete</button>\n                                        ");
    return buffer;
    }

  function program50(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                            <button class=\"btn btn-primary align-right\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showAddVitals", {hash:{
      'bubbles': (false)
    },hashTypes:{'bubbles': "BOOLEAN"},hashContexts:{'bubbles': depth0},contexts:[depth0],types:["STRING"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-plus\"></span> New Vitals</button>\n                        ");
    return buffer;
    }

  function program52(depth0,data) {
    
    var buffer = '', stack1;
    data.buffer.push("\n                            ");
    stack1 = helpers.each.call(depth0, "vitals", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(53, program53, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                        ");
    return buffer;
    }
  function program53(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n                                <tr>\n                                    <td>");
    data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{
      'format': ("l h:mm A")
    },hashTypes:{'format': "STRING"},hashContexts:{'format': depth0},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "dateRecorded", options) : helperMissing.call(depth0, "date-format", "dateRecorded", options))));
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "temperature", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "weight", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "height", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "sbp", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "dbp", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "heartRate", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>");
    stack1 = helpers._triageMustache.call(depth0, "respiratoryRate", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</td>\n                                    <td>\n                                        ");
    stack1 = helpers['if'].call(depth0, "parentController.canAddVitals", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(54, program54, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                        ");
    stack1 = helpers['if'].call(depth0, "parentController.canDeleteVitals", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(56, program56, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n                                    </td>\n                                </tr>\n                            ");
    return buffer;
    }
  function program54(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                            <button class=\"btn btn-default neutral\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showEditVitals", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push(">Edit</button>\n                                        ");
    return buffer;
    }

  function program56(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n                                            <button class=\"btn btn-default warning\" ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "showDeleteVitals", "", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
    data.buffer.push("><span class=\"octicon octicon-x\"></span> Delete</button>\n                                        ");
    return buffer;
    }

  function program58(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n            ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "item-charges", options) : helperMissing.call(depth0, "partial", "item-charges", options))));
    data.buffer.push("\n        ");
    return buffer;
    }

    data.buffer.push("<div class=\"panel-group\" id=\"visit-accordion\">\n    <div class=\"panel\">\n        <div class=\"panel-heading\">\n            <h3 class=\"panel-title\">\n                <a data-toggle=\"collapse\" data-parent=\"#visit-accordion\" href=\"#visit-info\">\n                    Visit Information\n                </a>\n                 ");
    stack1 = helpers['if'].call(depth0, "canAddAppointment", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </h3>\n        </div>\n        <div id=\"visit-info\" class=\"panel-collapse collapse in\">\n            <div class=\"panel-body\">\n             \n                ");
    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(3, program3, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n            </div>\n        </div>\n    </div>\n    ");
    stack1 = helpers.unless.call(depth0, "isNew", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(17, program17, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n</div>");
    return buffer;
    
  });

});
define('hospitalrun/visits/edit/view', ['exports', 'hospitalrun/views/panel'], function (exports, PanelView) {

	'use strict';

	exports['default'] = PanelView['default'].extend();

});
define('hospitalrun/visits/index/route', ['exports', 'hospitalrun/routes/abstract-index-route'], function (exports, AbstractIndexRoute) {

    'use strict';

    exports['default'] = AbstractIndexRoute['default'].extend({
        modelName: 'visit'
    });

});
define('hospitalrun/visits/procedures/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'ember'], function (exports, AbstractDeleteController, Ember) {

    'use strict';

    exports['default'] = AbstractDeleteController['default'].extend({
        needs: 'visits/edit',
        
        afterDeleteAction: 'notifyProcedureDelete',
        editController: Ember['default'].computed.alias('controllers.visits/edit'),
        title: 'Delete Procedure',
        
        actions: {
            notifyProcedureDelete: function() {
                this.send('closeModal');
                this.get('editController').send('deleteProcedure', this.get('model'));
            }
        }
    });

});
define('hospitalrun/visits/procedures/delete/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    


    data.buffer.push("<div class=\"alert alert-danger\">\n    <span class=\"glyphicon glyphicon-warning-sign\"></span>    \n    Are you sure you wish to delete this procedure?\n</div>");
    
  });

});
define('hospitalrun/visits/procedures/delete/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/visits/route', ['exports', 'hospitalrun/routes/abstract-module-route'], function (exports, AbstractModuleRoute) {

   'use strict';

   exports['default'] = AbstractModuleRoute['default'].extend({
       addCapability: 'add_visit',
       additionalModels: [{
           name: 'anesthesiaTypes',
           findArgs: ['lookup','anesthesia_types'],
       }, {
           name: 'anesthesiologistList',
           findArgs: ['lookup','anesthesiologists'],
       }, {
           name: 'diagnosisList',
           findArgs: ['lookup','diagnosis_list']
       }, { 
           name: 'physicianList',
           findArgs: ['lookup','physician_list']
       }, {
           name: 'locationList',
           findArgs: ['lookup','visit_location_list']
       },  {
           name: 'procedureList',
           findArgs: ['lookup','procedure_list']
       }, {
           name: 'procedureLocations',
           findArgs: ['lookup','procedure_locations']
       }, {
           name: 'procedurePricingTypes',
           findArgs: ['lookup','procedure_pricing_types']
       }, {
           name: 'visitTypesList',
           findArgs: ['lookup','visit_types']
       }, {
           name: 'wardPricingTypes',
           findArgs: ['lookup','ward_pricing_types']
       }],
       moduleName: 'visits',
       newButtonAction: null, //No new button
       sectionTitle: 'Visits'
      
   });

});
define('hospitalrun/visits/search/route', ['exports', 'hospitalrun/routes/abstract-search-route'], function (exports, AbstractSearchRoute) {

    'use strict';

    exports['default'] = AbstractSearchRoute['default'].extend({
        moduleName: 'visits',
        searchKeys: [
             '_id',
            'firstName',
            'lastName'
        ],
        searchModel: 'visit'
    });

});
define('hospitalrun/visits/search/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    ");
    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "visits/index", options) : helperMissing.call(depth0, "partial", "visits/index", options))));
    data.buffer.push("\n");
    return buffer;
    }

    stack1 = helpers.view.call(depth0, "search-listing", {hash:{
      'newButtonText': ("New Visit"),
      'allButtonText': ("All Visits")
    },hashTypes:{'newButtonText': "STRING",'allButtonText': "STRING"},hashContexts:{'newButtonText': depth0,'allButtonText': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/visits/vitals/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'ember'], function (exports, AbstractDeleteController, Ember) {

    'use strict';

    exports['default'] = AbstractDeleteController['default'].extend({
        needs: 'visits/edit',
        
        afterDeleteAction: 'notifyVitalsDelete',
        editController: Ember['default'].computed.alias('controllers.visits/edit'),
        title: 'Delete Vitals',
        
        actions: {
            notifyVitalsDelete: function() {
                this.send('closeModal');
                this.get('editController').send('deleteVitals', this.get('model'));
            }
        }
    });

});
define('hospitalrun/visits/vitals/delete/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    


    data.buffer.push("<div class=\"alert alert-danger\">\n    <span class=\"glyphicon glyphicon-warning-sign\"></span>    \n    Are you sure you wish to delete these vitals?\n</div>");
    
  });

});
define('hospitalrun/visits/vitals/delete/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
define('hospitalrun/visits/vitals/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember'], function (exports, AbstractEditController, Ember) {

    'use strict';

    exports['default'] = AbstractEditController['default'].extend({
        needs: 'visits/edit',
        
        cancelAction: 'closeModal',
        
        editController: Ember['default'].computed.alias('controllers.visits/edit'),    
        
        newVitals: false,
        
        temperatureLabel: 'Temperature (\xb0C)',
        
        title: function() {
            var isNew = this.get('isNew');
            if (isNew) {
                return 'Add Vitals';
            }
            return 'Edit Vitals';
    	}.property('isNew'),
        
        updateCapability: 'add_vitals',
        
        beforeUpdate: function() {
            if (this.get('isNew')) {
                this.set('newVitals', true);         
            }
            return Ember['default'].RSVP.Promise.resolve();
        },
        
        afterUpdate: function(vitals) {
            if (this.get('newVitals')) {            
                this.get('editController').send('addVitals',vitals);
            } else {
                this.send('closeModal');
            }
        }
    });

});
define('hospitalrun/visits/vitals/edit/template', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
  /**/) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '', helper, options;
    data.buffer.push("\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['date-picker'] || (depth0 && depth0['date-picker']),options={hash:{
      'property': ("dateRecorded"),
      'label': ("Date Recorded"),
      'class': ("col-sm-6"),
      'format': ("l h:mm A"),
      'showTime': (true)
    },hashTypes:{'property': "STRING",'label': "STRING",'class': "STRING",'format': "STRING",'showTime': "BOOLEAN"},hashContexts:{'property': depth0,'label': depth0,'class': depth0,'format': depth0,'showTime': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "date-picker", options))));
    data.buffer.push("\n    </div>\n    <div class=\"row\">        \n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'class': ("col-sm-3"),
      'property': ("temperature"),
      'label': ("temperatureLabel")
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "ID"},hashContexts:{'class': depth0,'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    </div>\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'class': ("col-sm-3"),
      'property': ("weight"),
      'label': ("Weight")
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING"},hashContexts:{'class': depth0,'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'class': ("col-sm-3"),
      'property': ("height"),
      'label': ("Height")
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING"},hashContexts:{'class': depth0,'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n        \n    </div>\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'class': ("col-sm-3"),
      'property': ("sbp"),
      'label': ("SBP")
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING"},hashContexts:{'class': depth0,'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'class': ("col-sm-3"),
      'property': ("dbp"),
      'label': ("DBP")
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING"},hashContexts:{'class': depth0,'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    </div>\n    <div class=\"row\">\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'class': ("col-sm-3"),
      'property': ("heartRate"),
      'label': ("Heart Rate")
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING"},hashContexts:{'class': depth0,'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n        ");
    data.buffer.push(escapeExpression((helper = helpers['em-input'] || (depth0 && depth0['em-input']),options={hash:{
      'class': ("col-sm-3"),
      'property': ("respiratoryRate"),
      'label': ("Respiratory Rate")
    },hashTypes:{'class': "STRING",'property': "STRING",'label': "STRING"},hashContexts:{'class': depth0,'property': depth0,'label': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-input", options))));
    data.buffer.push("\n    </div>\n");
    return buffer;
    }

    stack1 = (helper = helpers['em-form'] || (depth0 && depth0['em-form']),options={hash:{
      'model': (""),
      'submit_button': (false)
    },hashTypes:{'model': "ID",'submit_button': "BOOLEAN"},hashContexts:{'model': depth0,'submit_button': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "em-form", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    
  });

});
define('hospitalrun/visits/vitals/edit/view', ['exports', 'hospitalrun/views/modal'], function (exports, ModalView) {

	'use strict';

	exports['default'] = ModalView['default'].extend();

});
/* jshint ignore:start */

/* jshint ignore:end */

/* jshint ignore:start */

define('hospitalrun/config/environment', ['ember'], function(Ember) {
  var prefix = 'hospitalrun';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

if (runningTests) {
  require("hospitalrun/tests/test-helper");
} else {
  require("hospitalrun/app")["default"].create({});
}

/* jshint ignore:end */
